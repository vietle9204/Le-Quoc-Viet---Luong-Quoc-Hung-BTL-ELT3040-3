
adc_MQ2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08003da8  08003da8  00004da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b0  080040b0  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080040b0  080040b0  000050b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b8  080040b8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080040c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000060  08004120  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004120  000061f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045c1  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ce  00000000  00000000  0000a651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  0000b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000038c  00000000  00000000  0000bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155a2  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a9f  00000000  00000000  0002163e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f23  00000000  00000000  000280dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a3c  00000000  00000000  000ab044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000aca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d90 	.word	0x08003d90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003d90 	.word	0x08003d90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <I2C1_Write>:
#include "font.h"



// ===== I2C LOW-LEVEL =====
void I2C1_Write(uint8_t addr, uint8_t *data, uint16_t size) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	80bb      	strh	r3, [r7, #4]
    while (I2C1->SR2 & I2C_SR2_BUSY);                       // Chờ I2C sẵn sàng
 8000dbc:	bf00      	nop
 8000dbe:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <I2C1_Write+0xa8>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f9      	bne.n	8000dbe <I2C1_Write+0x12>
    I2C1->CR1 |= I2C_CR1_START;                             // Start condition
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <I2C1_Write+0xa8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a21      	ldr	r2, [pc, #132]	@ (8000e54 <I2C1_Write+0xa8>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));                      // Chờ start
 8000dd6:	bf00      	nop
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <I2C1_Write+0xa8>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f9      	beq.n	8000dd8 <I2C1_Write+0x2c>

    (void)I2C1->SR1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <I2C1_Write+0xa8>)
 8000de6:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr;                                        // Gửi địa chỉ
 8000de8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e54 <I2C1_Write+0xa8>)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));                    // Chờ ACK
 8000dee:	bf00      	nop
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <I2C1_Write+0xa8>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f9      	beq.n	8000df0 <I2C1_Write+0x44>
    (void)I2C1->SR2;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <I2C1_Write+0xa8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]

    for (uint16_t i = 0; i < size; i++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	81fb      	strh	r3, [r7, #14]
 8000e04:	e00f      	b.n	8000e26 <I2C1_Write+0x7a>
        while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000e06:	bf00      	nop
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <I2C1_Write+0xa8>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f9      	beq.n	8000e08 <I2C1_Write+0x5c>
        I2C1->DR = data[i];
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <I2C1_Write+0xa8>)
 8000e1e:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0; i < size; i++) {
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	3301      	adds	r3, #1
 8000e24:	81fb      	strh	r3, [r7, #14]
 8000e26:	89fa      	ldrh	r2, [r7, #14]
 8000e28:	88bb      	ldrh	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3eb      	bcc.n	8000e06 <I2C1_Write+0x5a>
    }

    while (!(I2C1->SR1 & I2C_SR1_BTF));                     // Chờ truyền xong
 8000e2e:	bf00      	nop
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <I2C1_Write+0xa8>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f9      	beq.n	8000e30 <I2C1_Write+0x84>
    I2C1->CR1 |= I2C_CR1_STOP;                              // Stop condition
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <I2C1_Write+0xa8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <I2C1_Write+0xa8>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40005400 	.word	0x40005400

08000e58 <I2C1_Init>:

void I2C1_Init(void) {
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <I2C1_Init+0x8c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a20      	ldr	r2, [pc, #128]	@ (8000ee4 <I2C1_Init+0x8c>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <I2C1_Init+0x8c>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee4 <I2C1_Init+0x8c>)
 8000e6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e72:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER |= (0x02 << (6 * 2)) | (0x02 << (7 * 2));  // PB6, PB7 = AF
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e7a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000e7e:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4));       // AF4 = I2C
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e86:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000e8a:	6213      	str	r3, [r2, #32]
    GPIOB->OTYPER |= (1 << 6) | (1 << 7);                   // Open-drain
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000e96:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (6 * 2)) | (3 << (7 * 2));      // High speed
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <I2C1_Init+0x90>)
 8000e9e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000ea2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= (1 << (6 * 2)) | (1 << (7 * 2));        // Pull-up
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <I2C1_Init+0x90>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <I2C1_Init+0x90>)
 8000eaa:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000eae:	60d3      	str	r3, [r2, #12]

    I2C1->CR1 &= ~I2C_CR1_PE;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <I2C1_Init+0x94>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <I2C1_Init+0x94>)
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 40;                  // APB1 = 40MHz
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <I2C1_Init+0x94>)
 8000ebe:	2228      	movs	r2, #40	@ 0x28
 8000ec0:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 200;                 // 100kHz
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <I2C1_Init+0x94>)
 8000ec4:	22c8      	movs	r2, #200	@ 0xc8
 8000ec6:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 41;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <I2C1_Init+0x94>)
 8000eca:	2229      	movs	r2, #41	@ 0x29
 8000ecc:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <I2C1_Init+0x94>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <I2C1_Init+0x94>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40005400 	.word	0x40005400

08000ef0 <ssd1306_send_cmd>:

// ===== SSD1306 LOW-LEVEL =====
void ssd1306_send_cmd(uint8_t cmd) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[2] = { 0x00, cmd };  // Control byte = 0x00
 8000efa:	2300      	movs	r3, #0
 8000efc:	733b      	strb	r3, [r7, #12]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	737b      	strb	r3, [r7, #13]
    I2C1_Write(SSD1306_I2C_ADDR, buf, 2);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2202      	movs	r2, #2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2078      	movs	r0, #120	@ 0x78
 8000f0c:	f7ff ff4e 	bl	8000dac <I2C1_Write>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <ssd1306_send_data>:

void ssd1306_send_data(uint8_t *data, uint16_t size) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0a4      	sub	sp, #144	@ 0x90
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
    uint8_t buf[129];
    buf[0] = 0x40;                   // Control byte = 0x40 (data)
 8000f24:	2340      	movs	r3, #64	@ 0x40
 8000f26:	733b      	strb	r3, [r7, #12]
    memcpy(&buf[1], data, size);
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	3301      	adds	r3, #1
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fd98 	bl	8002a68 <memcpy>
    I2C1_Write(SSD1306_I2C_ADDR, buf, size + 1);
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	2078      	movs	r0, #120	@ 0x78
 8000f46:	f7ff ff31 	bl	8000dac <I2C1_Write>
}
 8000f4a:	bf00      	nop
 8000f4c:	3790      	adds	r7, #144	@ 0x90
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <ssd1306_init>:

// ===== SSD1306 HIGH-LEVEL =====
void ssd1306_init(void) {
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
    I2C1_Init();
 8000f5a:	f7ff ff7d 	bl	8000e58 <I2C1_Init>

    const uint8_t init_cmds[] = {
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <ssd1306_init+0x48>)
 8000f60:	463c      	mov	r4, r7
 8000f62:	461d      	mov	r5, r3
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        0x00, 0xD5, 0x80, 0xD9,
        0xF1, 0xDA, 0x12, 0xDB,
        0x40, 0x8D, 0x14, 0xAF
    };

    for (uint8_t i = 0; i < sizeof(init_cmds); i++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	77fb      	strb	r3, [r7, #31]
 8000f74:	e00a      	b.n	8000f8c <ssd1306_init+0x38>
        ssd1306_send_cmd(init_cmds[i]);
 8000f76:	7ffb      	ldrb	r3, [r7, #31]
 8000f78:	3320      	adds	r3, #32
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ffb5 	bl	8000ef0 <ssd1306_send_cmd>
    for (uint8_t i = 0; i < sizeof(init_cmds); i++) {
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	77fb      	strb	r3, [r7, #31]
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	2b1b      	cmp	r3, #27
 8000f90:	d9f1      	bls.n	8000f76 <ssd1306_init+0x22>
    }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9c:	08003da8 	.word	0x08003da8

08000fa0 <ssd1306_goto>:

void ssd1306_goto(uint8_t x, uint8_t y) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
    ssd1306_send_cmd(0xB0 + y);                     // Page (y)
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	3b50      	subs	r3, #80	@ 0x50
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff9a 	bl	8000ef0 <ssd1306_send_cmd>
    ssd1306_send_cmd(0x00 + (x & 0x0F));            // Lower col
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff93 	bl	8000ef0 <ssd1306_send_cmd>
    ssd1306_send_cmd(0x10 + ((x >> 4) & 0x0F));     // Upper col
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3310      	adds	r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff8b 	bl	8000ef0 <ssd1306_send_cmd>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <ssd1306_clear>:

void ssd1306_clear(void) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b0a2      	sub	sp, #136	@ 0x88
 8000fe6:	af00      	add	r7, sp, #0
    uint8_t zero[SSD1306_WIDTH] = {0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	227c      	movs	r2, #124	@ 0x7c
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fd03 	bl	8002a00 <memset>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001000:	e00f      	b.n	8001022 <ssd1306_clear+0x40>
        ssd1306_goto(0, page);
 8001002:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001006:	4619      	mov	r1, r3
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ffc9 	bl	8000fa0 <ssd1306_goto>
        ssd1306_send_data(zero, SSD1306_WIDTH);
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <ssd1306_send_data>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
 8001018:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800101c:	3301      	adds	r3, #1
 800101e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001022:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001026:	2b07      	cmp	r3, #7
 8001028:	d9eb      	bls.n	8001002 <ssd1306_clear+0x20>
    }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3788      	adds	r7, #136	@ 0x88
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <ssd1306_put_string>:
    memcpy(data, font5x8[index], 5);
    data[5] = 0x00;  // Space between characters
    ssd1306_send_data(data, 6);
}

void ssd1306_put_string(char *str) {
 8001034:	b580      	push	{r7, lr}
 8001036:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800103a:	af00      	add	r7, sp, #0
 800103c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001040:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001044:	6018      	str	r0, [r3, #0]
    uint8_t buf[6 * 128]; // buffer lưu font cho tối đa 128 ký tự, mỗi ký tự 6 bytes
    uint16_t len = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

    while (*str && len < sizeof(buf) / 6) {
 800104c:	e044      	b.n	80010d8 <ssd1306_put_string+0xa4>
        char c = *str++;
 800104e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001052:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 800105c:	f5a2 7243 	sub.w	r2, r2, #780	@ 0x30c
 8001060:	1c59      	adds	r1, r3, #1
 8001062:	6011      	str	r1, [r2, #0]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f887 330d 	strb.w	r3, [r7, #781]	@ 0x30d
        if (c < 32 || c > 126) c = '?';
 800106a:	f897 330d 	ldrb.w	r3, [r7, #781]	@ 0x30d
 800106e:	2b1f      	cmp	r3, #31
 8001070:	d903      	bls.n	800107a <ssd1306_put_string+0x46>
 8001072:	f897 330d 	ldrb.w	r3, [r7, #781]	@ 0x30d
 8001076:	2b7e      	cmp	r3, #126	@ 0x7e
 8001078:	d902      	bls.n	8001080 <ssd1306_put_string+0x4c>
 800107a:	233f      	movs	r3, #63	@ 0x3f
 800107c:	f887 330d 	strb.w	r3, [r7, #781]	@ 0x30d
        uint8_t index = c - 32;
 8001080:	f897 330d 	ldrb.w	r3, [r7, #781]	@ 0x30d
 8001084:	3b20      	subs	r3, #32
 8001086:	f887 330c 	strb.w	r3, [r7, #780]	@ 0x30c
        memcpy(&buf[len * 6], font5x8[index], 5);
 800108a:	f8b7 230e 	ldrh.w	r2, [r7, #782]	@ 0x30e
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	461a      	mov	r2, r3
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	1898      	adds	r0, r3, r2
 800109e:	f897 230c 	ldrb.w	r2, [r7, #780]	@ 0x30c
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <ssd1306_put_string+0xe8>)
 80010aa:	4413      	add	r3, r2
 80010ac:	2205      	movs	r2, #5
 80010ae:	4619      	mov	r1, r3
 80010b0:	f001 fcda 	bl	8002a68 <memcpy>
        buf[len * 6 + 5] = 0x00;  // khoảng cách giữa ký tự
 80010b4:	f8b7 230e 	ldrh.w	r2, [r7, #782]	@ 0x30e
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3305      	adds	r3, #5
 80010c2:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 80010c6:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 80010ca:	2100      	movs	r1, #0
 80010cc:	54d1      	strb	r1, [r2, r3]
        len++;
 80010ce:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 80010d2:	3301      	adds	r3, #1
 80010d4:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
    while (*str && len < sizeof(buf) / 6) {
 80010d8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80010dc:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <ssd1306_put_string+0xbc>
 80010e8:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 80010ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ee:	d9ae      	bls.n	800104e <ssd1306_put_string+0x1a>
    }

    if (len > 0) {
 80010f0:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00c      	beq.n	8001112 <ssd1306_put_string+0xde>
        ssd1306_send_data(buf, len * 6);
 80010f8:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 80010fc:	461a      	mov	r2, r3
 80010fe:	0052      	lsls	r2, r2, #1
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff03 	bl	8000f18 <ssd1306_send_data>
    }
}
 8001112:	bf00      	nop
 8001114:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08003e74 	.word	0x08003e74

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	@ (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db12      	blt.n	8001194 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	490a      	ldr	r1, [pc, #40]	@ (80011a0 <__NVIC_DisableIRQ+0x44>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	3320      	adds	r3, #32
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001188:	f3bf 8f4f 	dsb	sy
}
 800118c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800118e:	f3bf 8f6f 	isb	sy
}
 8001192:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <OnOffSwitch_Init>:
 * hàm cấu hình switch 1 : on - off
 * cấu hình pin PA1 : mode input
 * điện trở pull-up ngoài.
 * cấu hình ngắt sườn xuống.
 */
void OnOffSwitch_Init(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <OnOffSwitch_Init+0x70>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <OnOffSwitch_Init+0x70>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3U << (1 * 2));           // Input mode.
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <OnOffSwitch_Init+0x74>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a17      	ldr	r2, [pc, #92]	@ (800126c <OnOffSwitch_Init+0x74>)
 800120e:	f023 030c 	bic.w	r3, r3, #12
 8001212:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3U << (1 * 2));           // Clear.
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <OnOffSwitch_Init+0x74>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <OnOffSwitch_Init+0x74>)
 800121a:	f023 030c 	bic.w	r3, r3, #12
 800121e:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		// clock cho ngắt.
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <OnOffSwitch_Init+0x70>)
 8001222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001224:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <OnOffSwitch_Init+0x70>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122a:	6453      	str	r3, [r2, #68]	@ 0x44

	SYSCFG->EXTICR[0] &= ~(0xF << (1 * 4));     // EXTI1 -> PA1.
 800122c:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <OnOffSwitch_Init+0x78>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a0f      	ldr	r2, [pc, #60]	@ (8001270 <OnOffSwitch_Init+0x78>)
 8001232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001236:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= (1U << 1);						// Unmask EXTI1.
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <OnOffSwitch_Init+0x7c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <OnOffSwitch_Init+0x7c>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= (1U << 1);           			// ngắt sườn xuống.
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <OnOffSwitch_Init+0x7c>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <OnOffSwitch_Init+0x7c>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1U << 1);					// không ngắt sườn lên.
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <OnOffSwitch_Init+0x7c>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <OnOffSwitch_Init+0x7c>)
 8001256:	f023 0302 	bic.w	r3, r3, #2
 800125a:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI1_IRQn);					// Enable EXTI1 interrupt in NVIC.
 800125c:	2007      	movs	r0, #7
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000
 8001270:	40013800 	.word	0x40013800
 8001274:	40013c00 	.word	0x40013c00

08001278 <ResetSwitch_Init>:
 * hàm cấu hình switch 2 : reset
 * cấu hình pin PA2 : mode input
 * điện trở pull-up ngoài.
 * cấu hình ngắt sườn xuống.
 */
void ResetSwitch_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <ResetSwitch_Init+0x70>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <ResetSwitch_Init+0x70>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3U << (2 * 2));           // Input mode.
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <ResetSwitch_Init+0x74>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <ResetSwitch_Init+0x74>)
 800128e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001292:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3U << (2 * 2));           // Clear.
 8001294:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <ResetSwitch_Init+0x74>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <ResetSwitch_Init+0x74>)
 800129a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800129e:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		// clock cho ngắt.
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <ResetSwitch_Init+0x70>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a4:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <ResetSwitch_Init+0x70>)
 80012a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012aa:	6453      	str	r3, [r2, #68]	@ 0x44

	SYSCFG->EXTICR[0] &= ~(0xF << (2 * 4));     // EXTI2 -> PA2
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <ResetSwitch_Init+0x78>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <ResetSwitch_Init+0x78>)
 80012b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012b6:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= (1U << 2);						// Unmask EXTI2
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <ResetSwitch_Init+0x7c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <ResetSwitch_Init+0x7c>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= (1U << 2);					// ngắt sườn xuống
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <ResetSwitch_Init+0x7c>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <ResetSwitch_Init+0x7c>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1U << 2);
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <ResetSwitch_Init+0x7c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <ResetSwitch_Init+0x7c>)
 80012d6:	f023 0304 	bic.w	r3, r3, #4
 80012da:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI2_IRQn);					// Enable EXTI2 interrupt in NVIC
 80012dc:	2008      	movs	r0, #8
 80012de:	f7ff ff1f 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <system_on_off>:

/**
 * hàm bật tắt hệ thống.
 * state == 1 : system_on.
 */
void system_on_off(int state) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if (state) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d019      	beq.n	800133a <system_on_off+0x42>
		ADC1->CR2 |= ADC_CR2_ADON;        // bật adc1.
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <system_on_off+0x88>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <system_on_off+0x88>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <system_on_off+0x88>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4a1a      	ldr	r2, [pc, #104]	@ (8001380 <system_on_off+0x88>)
 8001318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800131c:	6093      	str	r3, [r2, #8]

		TIM1->CR1 |= TIM_CR1_CEN;		  // bật timer cho rgb.
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <system_on_off+0x8c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a18      	ldr	r2, [pc, #96]	@ (8001384 <system_on_off+0x8c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]

		ssd1306_goto(0, 0);
 800132a:	2100      	movs	r1, #0
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe37 	bl	8000fa0 <ssd1306_goto>
		ssd1306_put_string("sys_status: 1 - on  ");
 8001332:	4815      	ldr	r0, [pc, #84]	@ (8001388 <system_on_off+0x90>)
 8001334:	f7ff fe7e 	bl	8001034 <ssd1306_put_string>
		ssd1306_goto(0, 0);
		ssd1306_put_string("sys_status: 0 - off ");

	}

}
 8001338:	e01e      	b.n	8001378 <system_on_off+0x80>
		ADC1->CR2 &= ~ADC_CR2_ADON;  // tắt adc
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <system_on_off+0x88>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <system_on_off+0x88>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6093      	str	r3, [r2, #8]
		TIM1->CR1 &= ~TIM_CR1_CEN;	 // tắt timmer.
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <system_on_off+0x8c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <system_on_off+0x8c>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6013      	str	r3, [r2, #0]
		GPIOB->ODR &= ~(1 << 12);	 // tắt relay
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <system_on_off+0x94>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <system_on_off+0x94>)
 8001358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800135c:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= (1 << 12);	 // tắt buzzer
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <system_on_off+0x98>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <system_on_off+0x98>)
 8001364:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001368:	6153      	str	r3, [r2, #20]
		ssd1306_goto(0, 0);
 800136a:	2100      	movs	r1, #0
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fe17 	bl	8000fa0 <ssd1306_goto>
		ssd1306_put_string("sys_status: 0 - off ");
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <system_on_off+0x9c>)
 8001374:	f7ff fe5e 	bl	8001034 <ssd1306_put_string>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40012000 	.word	0x40012000
 8001384:	40010000 	.word	0x40010000
 8001388:	08003dc4 	.word	0x08003dc4
 800138c:	40020400 	.word	0x40020400
 8001390:	40020000 	.word	0x40020000
 8001394:	08003ddc 	.word	0x08003ddc

08001398 <EXTI1_IRQHandler>:

/**
 * xử lý ngắt PA1: on/off hệ thống.
 */
void EXTI1_IRQHandler(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1U << 1)) {
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <EXTI1_IRQHandler+0x38>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <EXTI1_IRQHandler+0x32>
		sys_state ^= 1;				//đổi trạng thái
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <EXTI1_IRQHandler+0x3c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <EXTI1_IRQHandler+0x3c>)
 80013b2:	6013      	str	r3, [r2, #0]
		system_on_off(sys_state);	//gọi hàm on-of
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <EXTI1_IRQHandler+0x3c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff9d 	bl	80012f8 <system_on_off>
		EXTI->PR |= (1U << 1);      // Clear interrupt pending
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <EXTI1_IRQHandler+0x38>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a03      	ldr	r2, [pc, #12]	@ (80013d0 <EXTI1_IRQHandler+0x38>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6153      	str	r3, [r2, #20]
	}
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40013c00 	.word	0x40013c00
 80013d4:	20000000 	.word	0x20000000

080013d8 <EXTI2_IRQHandler>:

/**
 * xử lý ngắt PA1: reset.
 */
void EXTI2_IRQHandler(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1U << 2)) {
 80013dc:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <EXTI2_IRQHandler+0x88>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d038      	beq.n	800145a <EXTI2_IRQHandler+0x82>

		ssd1306_goto(0, 0);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fdd8 	bl	8000fa0 <ssd1306_goto>
		ssd1306_put_string("sys_status: reset ");
 80013f0:	481c      	ldr	r0, [pc, #112]	@ (8001464 <EXTI2_IRQHandler+0x8c>)
 80013f2:	f7ff fe1f 	bl	8001034 <ssd1306_put_string>

		RGB_update(0, 0, 1, 0);		 //set rgb
 80013f6:	2300      	movs	r3, #0
 80013f8:	2201      	movs	r2, #1
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 f9ed 	bl	80017dc <RGB_update>

		NVIC_DisableIRQ(EXTI1_IRQn);  // Vô hiệu hóa switch 1
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff feaa 	bl	800115c <__NVIC_DisableIRQ>
		NVIC_DisableIRQ(EXTI2_IRQn);  // Vô hiệu hóa switch 2
 8001408:	2008      	movs	r0, #8
 800140a:	f7ff fea7 	bl	800115c <__NVIC_DisableIRQ>

		//	    RCC->APB2RSTR |= RCC_APB2RSTR_ADC1RST;
		//	    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADC1RST;
	    init_ADC_MQ2();
 800140e:	f000 f833 	bl	8001478 <init_ADC_MQ2>
	    init_timer1_led_RGB();
 8001412:	f000 f967 	bl	80016e4 <init_timer1_led_RGB>


		system_on_off(system_off);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ff6e 	bl	80012f8 <system_on_off>
		warning_state = 0;
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <EXTI2_IRQHandler+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
		ppm_value = 0;
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <EXTI2_IRQHandler+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
		adc_value = 0;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <EXTI2_IRQHandler+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	801a      	strh	r2, [r3, #0]



		while(!(GPIOA->IDR >> 2 & 0x1));    // chờ tới khi nút nhấn được nhả
 800142e:	bf00      	nop
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <EXTI2_IRQHandler+0x9c>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f9      	beq.n	8001430 <EXTI2_IRQHandler+0x58>
		system_on_off(system_on);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff ff5b 	bl	80012f8 <system_on_off>

		NVIC_EnableIRQ(EXTI1_IRQn);					// Enable EXTI1 interrupt in NVIC.
 8001442:	2007      	movs	r0, #7
 8001444:	f7ff fe6c 	bl	8001120 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI2_IRQn);					// Enable EXTI2 interrupt in NVIC.			// Enable EXTI1 interrupt in NVIC.
 8001448:	2008      	movs	r0, #8
 800144a:	f7ff fe69 	bl	8001120 <__NVIC_EnableIRQ>

		EXTI->PR |= (1U << 2); // Clear interrupt pending
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <EXTI2_IRQHandler+0x88>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <EXTI2_IRQHandler+0x88>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6153      	str	r3, [r2, #20]
	}
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40013c00 	.word	0x40013c00
 8001464:	08003df4 	.word	0x08003df4
 8001468:	2000007c 	.word	0x2000007c
 800146c:	20000084 	.word	0x20000084
 8001470:	20000088 	.word	0x20000088
 8001474:	40020000 	.word	0x40020000

08001478 <init_ADC_MQ2>:

/**
 * Cấu hình PA0 chế độ analog để đọc ADC.
 * Cấu hình ADC1
 */
void init_ADC_MQ2(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  	// Bật clock GPIOA
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <init_ADC_MQ2+0x7c>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <init_ADC_MQ2+0x7c>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(3 << (0 * 2));  		// Xóa cấu hình cũ của PA0
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <init_ADC_MQ2+0x80>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <init_ADC_MQ2+0x80>)
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (3 << (0 * 2)); 		// Chọn chế độ analog cho PA0 (MODER00 = 11)
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <init_ADC_MQ2+0x80>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <init_ADC_MQ2+0x80>)
 800149a:	f043 0303 	orr.w	r3, r3, #3
 800149e:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;     // Bật clock cho ADC1
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <init_ADC_MQ2+0x7c>)
 80014a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a4:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <init_ADC_MQ2+0x7c>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014aa:	6453      	str	r3, [r2, #68]	@ 0x44

	ADC1->CR1 &= ~ADC_CR1_RES_Msk;        	// Xóa cấu hình độ phân giải cũ
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014b2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80014b6:	6053      	str	r3, [r2, #4]
//	ADC1->CR1 |= 2 << ADC_CR1_RES_Pos; 		// Chọn độ phân giải 8 bit (10 = 8-bit resolution)
	ADC1->CR1 |= ADC_CR1_EOCIE;				// Bật ngắt khi ADC chuyển đổi hoàn tất (EOC)
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6053      	str	r3, [r2, #4]

	ADC1->SMPR2 |= (7 << (0 * 3)); 			// Cấu hình thời gian lấy mẫu cho kênh 0: 112 cycles
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014ca:	f043 0307 	orr.w	r3, r3, #7
 80014ce:	6113      	str	r3, [r2, #16]

	ADC1->SQR3 &= ~(0xF << 0);              // Chọn kênh ADC = kênh 0 (PA0)
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d4:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014d6:	f023 030f 	bic.w	r3, r3, #15
 80014da:	6353      	str	r3, [r2, #52]	@ 0x34

	ADC1->CR2 |= ADC_CR2_ADON;            	// Bật ADC1 (Enable ADC)
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <init_ADC_MQ2+0x84>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(ADC_IRQn); 				// Bật ngắt ADC trong NVIC
 80014e8:	2012      	movs	r0, #18
 80014ea:	f7ff fe19 	bl	8001120 <__NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40012000 	.word	0x40012000

08001500 <ppm_caculator>:

/**
 * hàm tính ppm từ giá trị adc.
 */
int ppm_caculator(uint16_t data) {
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	// Tính điện áp từ giá trị ADC đọc được (độ phân giải 8-bit → 256 mức)
//	double voltage = 5 * data / 256.0;
	// Tính điện trở Rs theo điện áp
	double Rs = 1000.0 * ((4095.0 - data) / data);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f809 	bl	8000524 <__aeabi_i2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	a137      	add	r1, pc, #220	@ (adr r1, 80015f4 <ppm_caculator+0xf4>)
 8001518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800151c:	f7fe feb4 	bl	8000288 <__aeabi_dsub>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4614      	mov	r4, r2
 8001526:	461d      	mov	r5, r3
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fffa 	bl	8000524 <__aeabi_i2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7ff f988 	bl	800084c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <ppm_caculator+0xf0>)
 800154a:	f7ff f855 	bl	80005f8 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// Tỷ số Rs/Ro (Ro = 34123.967 : đo trong không khí sạch)
	double divRsRo = Rs / 15000.0;
 8001556:	a320      	add	r3, pc, #128	@ (adr r3, 80015d8 <ppm_caculator+0xd8>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001560:	f7ff f974 	bl	800084c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Tính log10(ppm) từ đường cong đặc trưng
	float log_ppm = -0.47 * log10f(divRsRo) + 1.63;
 800156c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001570:	f7ff fa54 	bl	8000a1c <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	ee00 3a10 	vmov	s0, r3
 800157a:	f001 fec1 	bl	8003300 <log10f>
 800157e:	ee10 3a10 	vmov	r3, s0
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffe0 	bl	8000548 <__aeabi_f2d>
 8001588:	a315      	add	r3, pc, #84	@ (adr r3, 80015e0 <ppm_caculator+0xe0>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f833 	bl	80005f8 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	a313      	add	r3, pc, #76	@ (adr r3, 80015e8 <ppm_caculator+0xe8>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe fe74 	bl	800028c <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fa36 	bl	8000a1c <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]
	// Tính ppm bằng cách mũ hóa cơ số 10
	return (int) powf(10.0, log_ppm);
 80015b4:	edd7 0a03 	vldr	s1, [r7, #12]
 80015b8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80015bc:	f001 fece 	bl	800335c <powf>
 80015c0:	eef0 7a40 	vmov.f32	s15, s0
 80015c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c8:	ee17 3a90 	vmov	r3, s15
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdb0      	pop	{r4, r5, r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40cd4c00 	.word	0x40cd4c00
 80015e0:	e147ae14 	.word	0xe147ae14
 80015e4:	bfde147a 	.word	0xbfde147a
 80015e8:	e147ae14 	.word	0xe147ae14
 80015ec:	3ffa147a 	.word	0x3ffa147a
 80015f0:	408f4000 	.word	0x408f4000
 80015f4:	00000000 	.word	0x00000000
 80015f8:	40affe00 	.word	0x40affe00

080015fc <ADC_IRQHandler>:
/**
 * hàm xử lý ngắt từ adc.
 * đọc giá trị, tính ppm
 * kiểm tra trạng thái cảnh báo.
 */
void ADC_IRQHandler(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	if (ADC1->SR & (1 << 1)) 	// Kiểm tra cờ EOC (End Of Conversion)
 8001600:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <ADC_IRQHandler+0xd4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d05f      	beq.n	80016cc <ADC_IRQHandler+0xd0>
			{
		adc_value = ADC1->DR;   			// Đọc giá trị ADC
 800160c:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <ADC_IRQHandler+0xd4>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <ADC_IRQHandler+0xd8>)
 8001614:	801a      	strh	r2, [r3, #0]
		ppm_value = ppm_caculator(adc_value); 	// Tính toán ppm từ giá trị ADC
 8001616:	4b2f      	ldr	r3, [pc, #188]	@ (80016d4 <ADC_IRQHandler+0xd8>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff70 	bl	8001500 <ppm_caculator>
 8001620:	4603      	mov	r3, r0
 8001622:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 8001624:	6013      	str	r3, [r2, #0]

		if (ppm_value < low_gar_default_value) {	//kiểm tra mức khí gar
 8001626:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b31      	cmp	r3, #49	@ 0x31
 800162c:	dc0a      	bgt.n	8001644 <ADC_IRQHandler+0x48>
			if (warning_state == 0)					// so sánh trạng thái trước đó
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <ADC_IRQHandler+0xe0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d043      	beq.n	80016be <ADC_IRQHandler+0xc2>
				return;								//cùng trạng thái trả về
			else {
				warning_state = 0;					// khác trạng thái : cập nhật
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <ADC_IRQHandler+0xe0>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
				gar_flag = 1;						// và set flag
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <ADC_IRQHandler+0xe4>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e035      	b.n	80016b0 <ADC_IRQHandler+0xb4>
			}
		}
		else if (ppm_value >= low_gar_default_value
 8001644:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b31      	cmp	r3, #49	@ 0x31
 800164a:	dd0e      	ble.n	800166a <ADC_IRQHandler+0x6e>
				&& ppm_value < high_gar_default_value) {
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b95      	cmp	r3, #149	@ 0x95
 8001652:	dc0a      	bgt.n	800166a <ADC_IRQHandler+0x6e>
			if (warning_state == 1)
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <ADC_IRQHandler+0xe0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d032      	beq.n	80016c2 <ADC_IRQHandler+0xc6>
				return;
			else {
				warning_state = 1;
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <ADC_IRQHandler+0xe0>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
				gar_flag = 1;
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <ADC_IRQHandler+0xe4>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
			if (warning_state == 1)
 8001668:	e022      	b.n	80016b0 <ADC_IRQHandler+0xb4>
			}
		}
		else if (ppm_value >= high_gar_default_value
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b95      	cmp	r3, #149	@ 0x95
 8001670:	dd0f      	ble.n	8001692 <ADC_IRQHandler+0x96>
				&& ppm_value < warning_gar_default_value) {
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800167a:	da0a      	bge.n	8001692 <ADC_IRQHandler+0x96>
			if (warning_state == 2)
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <ADC_IRQHandler+0xe0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d020      	beq.n	80016c6 <ADC_IRQHandler+0xca>
				return;
			else {
				warning_state = 2;
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <ADC_IRQHandler+0xe0>)
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
				gar_flag = 1;
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <ADC_IRQHandler+0xe4>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
			if (warning_state == 2)
 8001690:	e00e      	b.n	80016b0 <ADC_IRQHandler+0xb4>
			}
		}
		else if (ppm_value >= warning_gar_default_value) {
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <ADC_IRQHandler+0xdc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800169a:	db09      	blt.n	80016b0 <ADC_IRQHandler+0xb4>
			if (warning_state == 3)
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <ADC_IRQHandler+0xe0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d012      	beq.n	80016ca <ADC_IRQHandler+0xce>
				return;
			else {
				warning_state = 3;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <ADC_IRQHandler+0xe0>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	601a      	str	r2, [r3, #0]
				gar_flag = 1;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <ADC_IRQHandler+0xe4>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
			}
		}

		ADC1->SR &= ~(1 << 1);  			// Xóa cờ EOC
 80016b0:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <ADC_IRQHandler+0xd4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <ADC_IRQHandler+0xd4>)
 80016b6:	f023 0302 	bic.w	r3, r3, #2
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e006      	b.n	80016cc <ADC_IRQHandler+0xd0>
				return;								//cùng trạng thái trả về
 80016be:	bf00      	nop
 80016c0:	e004      	b.n	80016cc <ADC_IRQHandler+0xd0>
				return;
 80016c2:	bf00      	nop
 80016c4:	e002      	b.n	80016cc <ADC_IRQHandler+0xd0>
				return;
 80016c6:	bf00      	nop
 80016c8:	e000      	b.n	80016cc <ADC_IRQHandler+0xd0>
				return;
 80016ca:	bf00      	nop
	}

}
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40012000 	.word	0x40012000
 80016d4:	20000088 	.word	0x20000088
 80016d8:	20000084 	.word	0x20000084
 80016dc:	2000007c 	.word	0x2000007c
 80016e0:	20000080 	.word	0x20000080

080016e4 <init_timer1_led_RGB>:
 * khởi tạo timer cho led RGB.
 * cấu hình GPIO CH1-PA8-R, CH2-PA9-G, CH3-PA10-B
 * cấu hình PWM mode2 cho cả 3 kênh.
 * mục đích : tạo xung để nhấp nháy led.
 */
void init_timer1_led_RGB(void) {
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
	// 1. Bật clock GPIOA và TIM1
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80016e8:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <init_timer1_led_RGB+0xe8>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	4a37      	ldr	r2, [pc, #220]	@ (80017cc <init_timer1_led_RGB+0xe8>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80016f4:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <init_timer1_led_RGB+0xe8>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	4a34      	ldr	r2, [pc, #208]	@ (80017cc <init_timer1_led_RGB+0xe8>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6453      	str	r3, [r2, #68]	@ 0x44

	// 2. Cấu hình các chân PA8, PA9, PA10 làm Alternate Function (AF1 tương ứng với TIM1)
	GPIOA->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)) | (3 << (10 * 2))); // Xóa cấu hình cũ
 8001700:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a32      	ldr	r2, [pc, #200]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 8001706:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800170a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << (8 * 2)) | (2 << (9 * 2)) | (2 << (10 * 2)); // Đặt chế độ AF
 800170c:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2f      	ldr	r2, [pc, #188]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 8001712:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8001716:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4))
 8001718:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	4a2c      	ldr	r2, [pc, #176]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 800171e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001722:	f023 030f 	bic.w	r3, r3, #15
 8001726:	6253      	str	r3, [r2, #36]	@ 0x24
			| (0xF << ((10 - 8) * 4)));
	GPIOA->AFR[1] |= (1 << ((8 - 8) * 4)) | (1 << ((9 - 8) * 4))
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	4a28      	ldr	r2, [pc, #160]	@ (80017d0 <init_timer1_led_RGB+0xec>)
 800172e:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6253      	str	r3, [r2, #36]	@ 0x24
			| (1 << ((10 - 8) * 4));  // AF1

	// 3. Cấu hình Timer1
	TIM1->PSC = 79999;        // Prescaler: giảm từ 80 MHz xuống 1 kHz
 8001738:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800173a:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <init_timer1_led_RGB+0xf4>)
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 999;          // Auto-reload: 1s chu kỳ (1 tick = 1ms)
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001740:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c

	// 4. Đặt giá trị so sánh ban đầu cho 3 kênh PWM (CCR)
	TIM1->CCR1 = 0;
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001748:	2200      	movs	r2, #0
 800174a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 800174c:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800174e:	2200      	movs	r2, #0
 8001750:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	@ 0x3c

	// 5. Cấu hình chế độ PWM cho các kênh (OC1, OC2, OC3)
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);  // Xóa mode cũ
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800175e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001766:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 &= ~(TIM_CCMR2_OC3M);                   // Xóa mode cũ
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a19      	ldr	r2, [pc, #100]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800176e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001772:	61d3      	str	r3, [r2, #28]

	TIM1->CCMR1 |= (0b111 << TIM_CCMR1_OC1M_Pos);  // PWM mode 2 cho OC1
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800177a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800177e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (0b111 << TIM_CCMR1_OC2M_Pos);  // PWM mode 2 cho OC2
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001786:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800178a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 |= (0b111 << TIM_CCMR2_OC3M_Pos);  // PWM mode 2 cho OC3
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 8001792:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001796:	61d3      	str	r3, [r2, #28]

	TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E; // Cho phép xuất tín hiệu trên CH1, CH2, CH3
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 800179e:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6213      	str	r3, [r2, #32]

	// 6. Cho phép output (Main Output Enable)
	TIM1->BDTR |= TIM_BDTR_MOE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b2:	6453      	str	r3, [r2, #68]	@ 0x44

	// 7. Bắt đầu Timer
	TIM1->CR1 |= TIM_CR1_CEN;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <init_timer1_led_RGB+0xf0>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	0001387f 	.word	0x0001387f

080017dc <RGB_update>:

void RGB_update(int R, int G, int B, int FREQ) {
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;  // Dừng Timer để cập nhật
 80017ea:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <RGB_update+0xd4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a30      	ldr	r2, [pc, #192]	@ (80018b0 <RGB_update+0xd4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6013      	str	r3, [r2, #0]

	if (FREQ == 0)  // Nếu không nhấp nháy
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d11f      	bne.n	800183c <RGB_update+0x60>
			{
		TIM1->ARR = 999;  // Chu kỳ 1 giây
 80017fc:	4b2c      	ldr	r3, [pc, #176]	@ (80018b0 <RGB_update+0xd4>)
 80017fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c
		// Cập nhật duty cycle 100% hoặc 0% tùy màu
		TIM1->CCR1 = (R == 0) ? 0 : 999;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <RGB_update+0x32>
 800180a:	2300      	movs	r3, #0
 800180c:	e001      	b.n	8001812 <RGB_update+0x36>
 800180e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001812:	4a27      	ldr	r2, [pc, #156]	@ (80018b0 <RGB_update+0xd4>)
 8001814:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = (G == 0) ? 0 : 999;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <RGB_update+0x44>
 800181c:	2300      	movs	r3, #0
 800181e:	e001      	b.n	8001824 <RGB_update+0x48>
 8001820:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001824:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <RGB_update+0xd4>)
 8001826:	6393      	str	r3, [r2, #56]	@ 0x38
		TIM1->CCR3 = (B == 0) ? 0 : 999;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <RGB_update+0x56>
 800182e:	2300      	movs	r3, #0
 8001830:	e001      	b.n	8001836 <RGB_update+0x5a>
 8001832:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001836:	4a1e      	ldr	r2, [pc, #120]	@ (80018b0 <RGB_update+0xd4>)
 8001838:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800183a:	e026      	b.n	800188a <RGB_update+0xae>
	} else  // Nếu có nhấp nháy
	{
		int arr_val = (1000 / FREQ) - 1; // Tính chu kỳ mới theo tần số mong muốn
 800183c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	fb92 f3f3 	sdiv	r3, r2, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
		int duty = arr_val / 2;				// Duty cycle 50%
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	0fda      	lsrs	r2, r3, #31
 800184e:	4413      	add	r3, r2
 8001850:	105b      	asrs	r3, r3, #1
 8001852:	613b      	str	r3, [r7, #16]

		TIM1->ARR = arr_val;				// Cập nhật chu kỳ mới
 8001854:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <RGB_update+0xd4>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM1->CCR1 = (R == 0) ? 0 : duty;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <RGB_update+0x88>
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	e000      	b.n	8001866 <RGB_update+0x8a>
 8001864:	2300      	movs	r3, #0
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <RGB_update+0xd4>)
 8001868:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = (G == 0) ? 0 : duty;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <RGB_update+0x98>
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	e000      	b.n	8001876 <RGB_update+0x9a>
 8001874:	2300      	movs	r3, #0
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <RGB_update+0xd4>)
 8001878:	6393      	str	r3, [r2, #56]	@ 0x38
		TIM1->CCR3 = (B == 0) ? 0 : duty;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <RGB_update+0xa8>
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	e000      	b.n	8001886 <RGB_update+0xaa>
 8001884:	2300      	movs	r3, #0
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <RGB_update+0xd4>)
 8001888:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}

	TIM1->EGR |= TIM_EGR_UG;  				// Tạo sự kiện cập nhật
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <RGB_update+0xd4>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <RGB_update+0xd4>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_CEN; 				// Khởi động lại Timer
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <RGB_update+0xd4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <RGB_update+0xd4>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40010000 	.word	0x40010000

080018b4 <init_relay>:

void init_relay(void) {
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;  // clock cho gpiob
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <init_relay+0x58>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	4a13      	ldr	r2, [pc, #76]	@ (800190c <init_relay+0x58>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER &= ~(3 << (12 * 2));   // clear
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <init_relay+0x5c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <init_relay+0x5c>)
 80018ca:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80018ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (12 * 2));   // PB12: ouput
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <init_relay+0x5c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <init_relay+0x5c>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER &= ~(1 << 12);        // Push-pull
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <init_relay+0x5c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <init_relay+0x5c>)
 80018e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018e6:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3 << (12 * 2));	// no pullupp , pulldown
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <init_relay+0x5c>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <init_relay+0x5c>)
 80018ee:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80018f2:	60d3      	str	r3, [r2, #12]

	GPIOB->ODR &= ~(1 << 12);			// set giá trị ban đầu bằng 0.
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <init_relay+0x5c>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <init_relay+0x5c>)
 80018fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018fe:	6153      	str	r3, [r2, #20]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400

08001914 <init_buzzer>:

void init_buzzer(void) {
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	//  clock cho port A
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <init_buzzer+0x58>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	4a13      	ldr	r2, [pc, #76]	@ (800196c <init_buzzer+0x58>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3 << (12 * 2));   // Clear
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <init_buzzer+0x5c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <init_buzzer+0x5c>)
 800192a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800192e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << (12 * 2));   // Set PA12 output
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <init_buzzer+0x5c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0e      	ldr	r2, [pc, #56]	@ (8001970 <init_buzzer+0x5c>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(1 << 12);        // Push-pull
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <init_buzzer+0x5c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <init_buzzer+0x5c>)
 8001942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001946:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(3 << (12 * 2));	//No pull-up, no pull-down (PUPDR = 00)
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <init_buzzer+0x5c>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <init_buzzer+0x5c>)
 800194e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001952:	60d3      	str	r3, [r2, #12]

	GPIOA->ODR |= 1 << 12;			//set giá trị ban đầu = 1: buzzer off.
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <init_buzzer+0x5c>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <init_buzzer+0x5c>)
 800195a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800195e:	6153      	str	r3, [r2, #20]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000

08001974 <main>:



int main(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
	HAL_Init();
 800197a:	f000 faa5 	bl	8001ec8 <HAL_Init>

	SystemClock_Config();
 800197e:	f000 f917 	bl	8001bb0 <SystemClock_Config>
	MX_GPIO_Init();
 8001982:	f000 f97f 	bl	8001c84 <MX_GPIO_Init>

	//	init_usart6();

	char str[12];  // bộ nhớ đủ lớn để chứa số nguyên và '\0'

	ssd1306_init();
 8001986:	f7ff fae5 	bl	8000f54 <ssd1306_init>
	ssd1306_clear();
 800198a:	f7ff fb2a 	bl	8000fe2 <ssd1306_clear>

	ssd1306_goto(0, 0);
 800198e:	2100      	movs	r1, #0
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fb05 	bl	8000fa0 <ssd1306_goto>
	ssd1306_put_string("sys_status: 1 - on  ");
 8001996:	4874      	ldr	r0, [pc, #464]	@ (8001b68 <main+0x1f4>)
 8001998:	f7ff fb4c 	bl	8001034 <ssd1306_put_string>

	ssd1306_goto(0, 3);
 800199c:	2103      	movs	r1, #3
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fafe 	bl	8000fa0 <ssd1306_goto>
	ssd1306_put_string("gar_state: 0 - non");
 80019a4:	4871      	ldr	r0, [pc, #452]	@ (8001b6c <main+0x1f8>)
 80019a6:	f7ff fb45 	bl	8001034 <ssd1306_put_string>

	ssd1306_goto(0, 5);
 80019aa:	2105      	movs	r1, #5
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff faf7 	bl	8000fa0 <ssd1306_goto>
	ssd1306_put_string("ppm: 0");
 80019b2:	486f      	ldr	r0, [pc, #444]	@ (8001b70 <main+0x1fc>)
 80019b4:	f7ff fb3e 	bl	8001034 <ssd1306_put_string>

	ssd1306_goto(0, 7);
 80019b8:	2107      	movs	r1, #7
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff faf0 	bl	8000fa0 <ssd1306_goto>
	ssd1306_put_string("adc: 0");
 80019c0:	486c      	ldr	r0, [pc, #432]	@ (8001b74 <main+0x200>)
 80019c2:	f7ff fb37 	bl	8001034 <ssd1306_put_string>

	init_ADC_MQ2();
 80019c6:	f7ff fd57 	bl	8001478 <init_ADC_MQ2>
	init_timer1_led_RGB();
 80019ca:	f7ff fe8b 	bl	80016e4 <init_timer1_led_RGB>

	init_relay();
 80019ce:	f7ff ff71 	bl	80018b4 <init_relay>
	init_buzzer();
 80019d2:	f7ff ff9f 	bl	8001914 <init_buzzer>

	OnOffSwitch_Init();
 80019d6:	f7ff fc0f 	bl	80011f8 <OnOffSwitch_Init>
	ResetSwitch_Init();
 80019da:	f7ff fc4d 	bl	8001278 <ResetSwitch_Init>
	RGB_update(0, 0, 1, 0);
 80019de:	2300      	movs	r3, #0
 80019e0:	2201      	movs	r2, #1
 80019e2:	2100      	movs	r1, #0
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fef9 	bl	80017dc <RGB_update>

	NVIC_SetPriority(EXTI2_IRQn, 1); 			// Ưu tiên mức 1
 80019ea:	2101      	movs	r1, #1
 80019ec:	2008      	movs	r0, #8
 80019ee:	f7ff fbd9 	bl	80011a4 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn, 2); 			// Ưu tiên mức 2
 80019f2:	2102      	movs	r1, #2
 80019f4:	2007      	movs	r0, #7
 80019f6:	f7ff fbd5 	bl	80011a4 <__NVIC_SetPriority>
	NVIC_SetPriority(ADC_IRQn, 3); 			// Ưu tiên mức 3 cho ngắt ADC
 80019fa:	2103      	movs	r1, #3
 80019fc:	2012      	movs	r0, #18
 80019fe:	f7ff fbd1 	bl	80011a4 <__NVIC_SetPriority>

	while (1) {
		//khiểm tra hệ thống on.
		if (sys_state) {
 8001a02:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <main+0x204>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0fb      	beq.n	8001a02 <main+0x8e>
			// kiểm tra gar_flag: được set khi trạng thái cảnh báo thay đổi.
			if (gar_flag) {
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <main+0x208>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d079      	beq.n	8001b06 <main+0x192>
				if (warning_state == 0) {
 8001a12:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <main+0x20c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d119      	bne.n	8001a4e <main+0xda>
					RGB_update(0, 0, 1, 0);		// cập nhật RGB.
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fedb 	bl	80017dc <RGB_update>

					GPIOB->ODR &= ~(1 << 12);	//relay
 8001a26:	4b57      	ldr	r3, [pc, #348]	@ (8001b84 <main+0x210>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a56      	ldr	r2, [pc, #344]	@ (8001b84 <main+0x210>)
 8001a2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a30:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1 << 12);	//buzzer
 8001a32:	4b55      	ldr	r3, [pc, #340]	@ (8001b88 <main+0x214>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	4a54      	ldr	r2, [pc, #336]	@ (8001b88 <main+0x214>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a3c:	6153      	str	r3, [r2, #20]

					ssd1306_goto(66, 3);
 8001a3e:	2103      	movs	r1, #3
 8001a40:	2042      	movs	r0, #66	@ 0x42
 8001a42:	f7ff faad 	bl	8000fa0 <ssd1306_goto>
					ssd1306_put_string("0 - non     ");
 8001a46:	4851      	ldr	r0, [pc, #324]	@ (8001b8c <main+0x218>)
 8001a48:	f7ff faf4 	bl	8001034 <ssd1306_put_string>
 8001a4c:	e058      	b.n	8001b00 <main+0x18c>

				} else if (warning_state == 1) {
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <main+0x20c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d119      	bne.n	8001a8a <main+0x116>
					RGB_update(1, 1, 0, 0);
 8001a56:	2300      	movs	r3, #0
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff febd 	bl	80017dc <RGB_update>
					GPIOB->ODR &= ~(1 << 12);
 8001a62:	4b48      	ldr	r3, [pc, #288]	@ (8001b84 <main+0x210>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4a47      	ldr	r2, [pc, #284]	@ (8001b84 <main+0x210>)
 8001a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a6c:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1 << 12);
 8001a6e:	4b46      	ldr	r3, [pc, #280]	@ (8001b88 <main+0x214>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a45      	ldr	r2, [pc, #276]	@ (8001b88 <main+0x214>)
 8001a74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a78:	6153      	str	r3, [r2, #20]

					ssd1306_goto(66, 3);
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	2042      	movs	r0, #66	@ 0x42
 8001a7e:	f7ff fa8f 	bl	8000fa0 <ssd1306_goto>
					ssd1306_put_string("1 - low     ");
 8001a82:	4843      	ldr	r0, [pc, #268]	@ (8001b90 <main+0x21c>)
 8001a84:	f7ff fad6 	bl	8001034 <ssd1306_put_string>
 8001a88:	e03a      	b.n	8001b00 <main+0x18c>

				} else if (warning_state == 2) {
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <main+0x20c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d119      	bne.n	8001ac6 <main+0x152>

					RGB_update(1, 0, 0, 1);
 8001a92:	2301      	movs	r3, #1
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fe9f 	bl	80017dc <RGB_update>

					GPIOB->ODR |= 1 << 12;
 8001a9e:	4b39      	ldr	r3, [pc, #228]	@ (8001b84 <main+0x210>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a38      	ldr	r2, [pc, #224]	@ (8001b84 <main+0x210>)
 8001aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa8:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= 1 << 12;
 8001aaa:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <main+0x214>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a36      	ldr	r2, [pc, #216]	@ (8001b88 <main+0x214>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ab4:	6153      	str	r3, [r2, #20]

					ssd1306_goto(66, 3);
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	2042      	movs	r0, #66	@ 0x42
 8001aba:	f7ff fa71 	bl	8000fa0 <ssd1306_goto>
					ssd1306_put_string("2 - high    ");
 8001abe:	4835      	ldr	r0, [pc, #212]	@ (8001b94 <main+0x220>)
 8001ac0:	f7ff fab8 	bl	8001034 <ssd1306_put_string>
 8001ac4:	e01c      	b.n	8001b00 <main+0x18c>

				} else if (warning_state == 3) {
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <main+0x20c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d118      	bne.n	8001b00 <main+0x18c>
					RGB_update(1, 0, 0, 5);
 8001ace:	2305      	movs	r3, #5
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff fe81 	bl	80017dc <RGB_update>

					GPIOB->ODR |= 1 << 12;
 8001ada:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <main+0x210>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <main+0x210>)
 8001ae0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae4:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1 << 12);
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <main+0x214>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a27      	ldr	r2, [pc, #156]	@ (8001b88 <main+0x214>)
 8001aec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001af0:	6153      	str	r3, [r2, #20]

					ssd1306_goto(66, 3);
 8001af2:	2103      	movs	r1, #3
 8001af4:	2042      	movs	r0, #66	@ 0x42
 8001af6:	f7ff fa53 	bl	8000fa0 <ssd1306_goto>
					ssd1306_put_string("3 - warnning");
 8001afa:	4827      	ldr	r0, [pc, #156]	@ (8001b98 <main+0x224>)
 8001afc:	f7ff fa9a 	bl	8001034 <ssd1306_put_string>

				}

				gar_flag = 0;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <main+0x208>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

			}
			//cập nhật ppm
			sprintf(str, "%d   ", ppm_value);  // chuyển số nguyên sang chuỗi
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <main+0x228>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4924      	ldr	r1, [pc, #144]	@ (8001ba0 <main+0x22c>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 ff56 	bl	80029c0 <siprintf>
			ssd1306_goto(30, 5);
 8001b14:	2105      	movs	r1, #5
 8001b16:	201e      	movs	r0, #30
 8001b18:	f7ff fa42 	bl	8000fa0 <ssd1306_goto>
			ssd1306_put_string(str);
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fa88 	bl	8001034 <ssd1306_put_string>

			sprintf(str, "%d   ", adc_value);
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <main+0x230>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	491c      	ldr	r1, [pc, #112]	@ (8001ba0 <main+0x22c>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 ff46 	bl	80029c0 <siprintf>
			ssd1306_goto(30, 7);
 8001b34:	2107      	movs	r1, #7
 8001b36:	201e      	movs	r0, #30
 8001b38:	f7ff fa32 	bl	8000fa0 <ssd1306_goto>
			ssd1306_put_string(str);
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fa78 	bl	8001034 <ssd1306_put_string>


			ADC1->CR2 |= ADC_CR2_SWSTART;         // Bắt đầu chuyển đổi
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <main+0x234>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <main+0x234>)
 8001b4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b4e:	6093      	str	r3, [r2, #8]
			for (int i = 0; i < 2000000; i++);		//delay 2s
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e002      	b.n	8001b5c <main+0x1e8>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a13      	ldr	r2, [pc, #76]	@ (8001bac <main+0x238>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	ddf8      	ble.n	8001b56 <main+0x1e2>
		if (sys_state) {
 8001b64:	e74d      	b.n	8001a02 <main+0x8e>
 8001b66:	bf00      	nop
 8001b68:	08003dc4 	.word	0x08003dc4
 8001b6c:	08003e08 	.word	0x08003e08
 8001b70:	08003e1c 	.word	0x08003e1c
 8001b74:	08003e24 	.word	0x08003e24
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000080 	.word	0x20000080
 8001b80:	2000007c 	.word	0x2000007c
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	08003e2c 	.word	0x08003e2c
 8001b90:	08003e3c 	.word	0x08003e3c
 8001b94:	08003e4c 	.word	0x08003e4c
 8001b98:	08003e5c 	.word	0x08003e5c
 8001b9c:	20000084 	.word	0x20000084
 8001ba0:	08003e6c 	.word	0x08003e6c
 8001ba4:	20000088 	.word	0x20000088
 8001ba8:	40012000 	.word	0x40012000
 8001bac:	001e847f 	.word	0x001e847f

08001bb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	@ 0x50
 8001bb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2230      	movs	r2, #48	@ 0x30
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 ff1e 	bl	8002a00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <SystemClock_Config+0xcc>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <SystemClock_Config+0xcc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bfc:	4a20      	ldr	r2, [pc, #128]	@ (8001c80 <SystemClock_Config+0xd0>)
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <SystemClock_Config+0xd0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001c24:	230f      	movs	r3, #15
 8001c26:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001c28:	2360      	movs	r3, #96	@ 0x60
 8001c2a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c30:	2304      	movs	r3, #4
 8001c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fa9d 	bl	8002178 <HAL_RCC_OscConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0x98>
		Error_Handler();
 8001c44:	f000 f846 	bl	8001cd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c48:	230f      	movs	r3, #15
 8001c4a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c58:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	2102      	movs	r1, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fcff 	bl	8002668 <HAL_RCC_ClockConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0xc4>
		Error_Handler();
 8001c70:	f000 f830 	bl	8001cd4 <Error_Handler>
	}
}
 8001c74:	bf00      	nop
 8001c76:	3750      	adds	r7, #80	@ 0x50
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_GPIO_Init+0x4c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd0 <MX_GPIO_Init+0x4c>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <MX_GPIO_Init+0x4c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_GPIO_Init+0x4c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <MX_GPIO_Init+0x4c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_GPIO_Init+0x4c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <Error_Handler+0x8>

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f000 f8f1 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f000 fe26 	bl	8002a10 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20010000 	.word	0x20010000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	2000008c 	.word	0x2000008c
 8001df8:	200001f8 	.word	0x200001f8

08001dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
    if (USART6->SR & USART_SR_RXNE)  // Kiểm tra cờ RXNE
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <USART6_IRQHandler+0x48>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d013      	beq.n	8001e5a <USART6_IRQHandler+0x3a>
    {
        uint8_t data = (uint8_t)(USART6->DR);  // Đọc dữ liệu nhận được
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <USART6_IRQHandler+0x48>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	71fb      	strb	r3, [r7, #7]
        if(data != '\n')
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d00a      	beq.n	8001e54 <USART6_IRQHandler+0x34>
        {
        	receiver[receiver_index] = data;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <USART6_IRQHandler+0x4c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	490b      	ldr	r1, [pc, #44]	@ (8001e70 <USART6_IRQHandler+0x50>)
 8001e44:	79fa      	ldrb	r2, [r7, #7]
 8001e46:	54ca      	strb	r2, [r1, r3]
        	receiver_index++;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <USART6_IRQHandler+0x4c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <USART6_IRQHandler+0x4c>)
 8001e50:	6013      	str	r3, [r2, #0]

        }


    }
}
 8001e52:	e002      	b.n	8001e5a <USART6_IRQHandler+0x3a>
        	*receiver = '\0';
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <USART6_IRQHandler+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	200000a4 	.word	0x200000a4
 8001e70:	20000090 	.word	0x20000090

08001e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e78:	f7ff ffc0 	bl	8001dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	@ (8001eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ea2:	f000 fdbb 	bl	8002a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea6:	f7ff fd65 	bl	8001974 <main>
  bx  lr    
 8001eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001eb8:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 8001ebc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ec0:	200001f4 	.word	0x200001f4

08001ec4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <DMA1_Stream0_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <HAL_Init+0x40>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_Init+0x40>)
 8001ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_Init+0x40>)
 8001eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 f90d 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f000 f808 	bl	8001f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efc:	f7ff fef0 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_InitTick+0x54>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_InitTick+0x58>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f917 	bl	800215e <HAL_SYSTICK_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00e      	b.n	8001f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d80a      	bhi.n	8001f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f40:	2200      	movs	r2, #0
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f000 f8ed 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <HAL_InitTick+0x5c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000004 	.word	0x20000004
 8001f64:	2000000c 	.word	0x2000000c
 8001f68:	20000008 	.word	0x20000008

08001f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	200000a8 	.word	0x200000a8

08001f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200000a8 	.word	0x200000a8

08001fac <__NVIC_SetPriorityGrouping>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_GetPriorityGrouping>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	@ (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_SetPriority>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	@ (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	@ (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	@ 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff8e 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	@ (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff47 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff5c 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff8e 	bl	8002064 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5d 	bl	8002010 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffb0 	bl	80020cc <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e267      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d075      	beq.n	8002282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002196:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d00c      	beq.n	80021bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a2:	4b85      	ldr	r3, [pc, #532]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b82      	ldr	r3, [pc, #520]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4b7e      	ldr	r3, [pc, #504]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05b      	beq.n	8002280 <HAL_RCC_OscConfig+0x108>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d157      	bne.n	8002280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e242      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x74>
 80021de:	4b76      	ldr	r3, [pc, #472]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a75      	ldr	r2, [pc, #468]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b70      	ldr	r3, [pc, #448]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6f      	ldr	r2, [pc, #444]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b6d      	ldr	r3, [pc, #436]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6c      	ldr	r2, [pc, #432]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 8002210:	4b69      	ldr	r3, [pc, #420]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a68      	ldr	r2, [pc, #416]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b66      	ldr	r3, [pc, #408]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a65      	ldr	r2, [pc, #404]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff feb0 	bl	8001f94 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff feac 	bl	8001f94 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e207      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b5b      	ldr	r3, [pc, #364]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xc0>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fe9c 	bl	8001f94 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fe98 	bl	8001f94 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1f3      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b51      	ldr	r3, [pc, #324]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0xe8>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800228e:	4b4a      	ldr	r3, [pc, #296]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b47      	ldr	r3, [pc, #284]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b44      	ldr	r3, [pc, #272]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b41      	ldr	r3, [pc, #260]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x152>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1c7      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3b      	ldr	r3, [pc, #236]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4937      	ldr	r1, [pc, #220]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b34      	ldr	r3, [pc, #208]	@ (80023bc <HAL_RCC_OscConfig+0x244>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff fe51 	bl	8001f94 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff fe4d 	bl	8001f94 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1a8      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4925      	ldr	r1, [pc, #148]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <HAL_RCC_OscConfig+0x244>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff fe30 	bl	8001f94 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7ff fe2c 	bl	8001f94 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e187      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d036      	beq.n	80023d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_RCC_OscConfig+0x248>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7ff fe10 	bl	8001f94 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff fe0c 	bl	8001f94 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e167      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCC_OscConfig+0x240>)
 800238c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x200>
 8002396:	e01b      	b.n	80023d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_RCC_OscConfig+0x248>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff fdf9 	bl	8001f94 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	e00e      	b.n	80023c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a6:	f7ff fdf5 	bl	8001f94 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d907      	bls.n	80023c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e150      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470000 	.word	0x42470000
 80023c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b88      	ldr	r3, [pc, #544]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ea      	bne.n	80023a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8097 	beq.w	800250c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b81      	ldr	r3, [pc, #516]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b7d      	ldr	r3, [pc, #500]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	4a7c      	ldr	r2, [pc, #496]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fe:	4b7a      	ldr	r3, [pc, #488]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b77      	ldr	r3, [pc, #476]	@ (80025ec <HAL_RCC_OscConfig+0x474>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d118      	bne.n	800244c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b74      	ldr	r3, [pc, #464]	@ (80025ec <HAL_RCC_OscConfig+0x474>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a73      	ldr	r2, [pc, #460]	@ (80025ec <HAL_RCC_OscConfig+0x474>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7ff fdb5 	bl	8001f94 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7ff fdb1 	bl	8001f94 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e10c      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b6a      	ldr	r3, [pc, #424]	@ (80025ec <HAL_RCC_OscConfig+0x474>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x2ea>
 8002454:	4b64      	ldr	r3, [pc, #400]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4a63      	ldr	r2, [pc, #396]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002460:	e01c      	b.n	800249c <HAL_RCC_OscConfig+0x324>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b05      	cmp	r3, #5
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x30c>
 800246a:	4b5f      	ldr	r3, [pc, #380]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246e:	4a5e      	ldr	r2, [pc, #376]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6713      	str	r3, [r2, #112]	@ 0x70
 8002476:	4b5c      	ldr	r3, [pc, #368]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	4a5b      	ldr	r2, [pc, #364]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	@ 0x70
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0x324>
 8002484:	4b58      	ldr	r3, [pc, #352]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	4a57      	ldr	r2, [pc, #348]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002490:	4b55      	ldr	r3, [pc, #340]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	4a54      	ldr	r2, [pc, #336]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7ff fd76 	bl	8001f94 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7ff fd72 	bl	8001f94 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0cb      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	4b49      	ldr	r3, [pc, #292]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ee      	beq.n	80024ac <HAL_RCC_OscConfig+0x334>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7ff fd60 	bl	8001f94 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7ff fd5c 	bl	8001f94 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0b5      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ee      	bne.n	80024d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	4a38      	ldr	r2, [pc, #224]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a1 	beq.w	8002658 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002516:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d05c      	beq.n	80025dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d141      	bne.n	80025ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <HAL_RCC_OscConfig+0x478>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fd30 	bl	8001f94 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff fd2c 	bl	8001f94 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e087      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	3b01      	subs	r3, #1
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	491b      	ldr	r1, [pc, #108]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x478>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7ff fd05 	bl	8001f94 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7ff fd01 	bl	8001f94 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e05c      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x416>
 80025ac:	e054      	b.n	8002658 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <HAL_RCC_OscConfig+0x478>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff fcee 	bl	8001f94 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7ff fcea 	bl	8001f94 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e045      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x444>
 80025da:	e03d      	b.n	8002658 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e038      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
 80025f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x4ec>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d028      	beq.n	8002654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d121      	bne.n	8002654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d11a      	bne.n	8002654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800262a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800262c:	4293      	cmp	r3, r2
 800262e:	d111      	bne.n	8002654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	3b01      	subs	r3, #1
 800263e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0cc      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d90c      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b65      	ldr	r3, [pc, #404]	@ (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b63      	ldr	r3, [pc, #396]	@ (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b8      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b59      	ldr	r3, [pc, #356]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a58      	ldr	r2, [pc, #352]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d4:	4b53      	ldr	r3, [pc, #332]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a52      	ldr	r2, [pc, #328]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b50      	ldr	r3, [pc, #320]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	494d      	ldr	r1, [pc, #308]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d044      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d119      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d003      	beq.n	8002726 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	2b03      	cmp	r3, #3
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b3f      	ldr	r3, [pc, #252]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3b      	ldr	r3, [pc, #236]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e067      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b37      	ldr	r3, [pc, #220]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4934      	ldr	r1, [pc, #208]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7ff fc1c 	bl	8001f94 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7ff fc18 	bl	8001f94 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e04f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d20c      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e032      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4916      	ldr	r1, [pc, #88]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027da:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	490e      	ldr	r1, [pc, #56]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ee:	f000 f821 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	490a      	ldr	r1, [pc, #40]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	5ccb      	ldrb	r3, [r1, r3]
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fb7c 	bl	8001f0c <HAL_InitTick>

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00
 8002824:	40023800 	.word	0x40023800
 8002828:	08004054 	.word	0x08004054
 800282c:	20000004 	.word	0x20000004
 8002830:	20000008 	.word	0x20000008

08002834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002838:	b090      	sub	sp, #64	@ 0x40
 800283a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800284c:	4b59      	ldr	r3, [pc, #356]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d00d      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x40>
 8002858:	2b08      	cmp	r3, #8
 800285a:	f200 80a1 	bhi.w	80029a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x34>
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x3a>
 8002866:	e09b      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b53      	ldr	r3, [pc, #332]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800286a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800286c:	e09b      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800286e:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002870:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002872:	e098      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002874:	4b4f      	ldr	r3, [pc, #316]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800287c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287e:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d028      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288a:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	2200      	movs	r2, #0
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	627a      	str	r2, [r7, #36]	@ 0x24
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800289c:	2100      	movs	r1, #0
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x188>)
 80028a0:	fb03 f201 	mul.w	r2, r3, r1
 80028a4:	2300      	movs	r3, #0
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	4a43      	ldr	r2, [pc, #268]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x188>)
 80028ae:	fba0 1202 	umull	r1, r2, r0, r2
 80028b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b4:	460a      	mov	r2, r1
 80028b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ba:	4413      	add	r3, r2
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c0:	2200      	movs	r2, #0
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	61fa      	str	r2, [r7, #28]
 80028c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028ce:	f7fe f8f5 	bl	8000abc <__aeabi_uldivmod>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4613      	mov	r3, r2
 80028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028da:	e053      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028dc:	4b35      	ldr	r3, [pc, #212]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	2200      	movs	r2, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	617a      	str	r2, [r7, #20]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028ee:	f04f 0b00 	mov.w	fp, #0
 80028f2:	4652      	mov	r2, sl
 80028f4:	465b      	mov	r3, fp
 80028f6:	f04f 0000 	mov.w	r0, #0
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	0159      	lsls	r1, r3, #5
 8002900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002904:	0150      	lsls	r0, r2, #5
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	ebb2 080a 	subs.w	r8, r2, sl
 800290e:	eb63 090b 	sbc.w	r9, r3, fp
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800291e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002922:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002926:	ebb2 0408 	subs.w	r4, r2, r8
 800292a:	eb63 0509 	sbc.w	r5, r3, r9
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	00eb      	lsls	r3, r5, #3
 8002938:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293c:	00e2      	lsls	r2, r4, #3
 800293e:	4614      	mov	r4, r2
 8002940:	461d      	mov	r5, r3
 8002942:	eb14 030a 	adds.w	r3, r4, sl
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	eb45 030b 	adc.w	r3, r5, fp
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295a:	4629      	mov	r1, r5
 800295c:	028b      	lsls	r3, r1, #10
 800295e:	4621      	mov	r1, r4
 8002960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002964:	4621      	mov	r1, r4
 8002966:	028a      	lsls	r2, r1, #10
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296e:	2200      	movs	r2, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	60fa      	str	r2, [r7, #12]
 8002974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002978:	f7fe f8a0 	bl	8000abc <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80029a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3740      	adds	r7, #64	@ 0x40
 80029ac:	46bd      	mov	sp, r7
 80029ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	017d7840 	.word	0x017d7840

080029c0 <siprintf>:
 80029c0:	b40e      	push	{r1, r2, r3}
 80029c2:	b500      	push	{lr}
 80029c4:	b09c      	sub	sp, #112	@ 0x70
 80029c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80029c8:	9002      	str	r0, [sp, #8]
 80029ca:	9006      	str	r0, [sp, #24]
 80029cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80029d0:	4809      	ldr	r0, [pc, #36]	@ (80029f8 <siprintf+0x38>)
 80029d2:	9107      	str	r1, [sp, #28]
 80029d4:	9104      	str	r1, [sp, #16]
 80029d6:	4909      	ldr	r1, [pc, #36]	@ (80029fc <siprintf+0x3c>)
 80029d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80029dc:	9105      	str	r1, [sp, #20]
 80029de:	6800      	ldr	r0, [r0, #0]
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	a902      	add	r1, sp, #8
 80029e4:	f000 f9a2 	bl	8002d2c <_svfiprintf_r>
 80029e8:	9b02      	ldr	r3, [sp, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	b01c      	add	sp, #112	@ 0x70
 80029f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029f4:	b003      	add	sp, #12
 80029f6:	4770      	bx	lr
 80029f8:	20000010 	.word	0x20000010
 80029fc:	ffff0208 	.word	0xffff0208

08002a00 <memset>:
 8002a00:	4402      	add	r2, r0
 8002a02:	4603      	mov	r3, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <__errno>:
 8002a10:	4b01      	ldr	r3, [pc, #4]	@ (8002a18 <__errno+0x8>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000010 	.word	0x20000010

08002a1c <__libc_init_array>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a54 <__libc_init_array+0x38>)
 8002a20:	4c0d      	ldr	r4, [pc, #52]	@ (8002a58 <__libc_init_array+0x3c>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	2600      	movs	r6, #0
 8002a28:	42a6      	cmp	r6, r4
 8002a2a:	d109      	bne.n	8002a40 <__libc_init_array+0x24>
 8002a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a5c <__libc_init_array+0x40>)
 8002a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a60 <__libc_init_array+0x44>)
 8002a30:	f001 f9ae 	bl	8003d90 <_init>
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	2600      	movs	r6, #0
 8002a3a:	42a6      	cmp	r6, r4
 8002a3c:	d105      	bne.n	8002a4a <__libc_init_array+0x2e>
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}
 8002a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a44:	4798      	blx	r3
 8002a46:	3601      	adds	r6, #1
 8002a48:	e7ee      	b.n	8002a28 <__libc_init_array+0xc>
 8002a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4e:	4798      	blx	r3
 8002a50:	3601      	adds	r6, #1
 8002a52:	e7f2      	b.n	8002a3a <__libc_init_array+0x1e>
 8002a54:	080040b8 	.word	0x080040b8
 8002a58:	080040b8 	.word	0x080040b8
 8002a5c:	080040b8 	.word	0x080040b8
 8002a60:	080040bc 	.word	0x080040bc

08002a64 <__retarget_lock_acquire_recursive>:
 8002a64:	4770      	bx	lr

08002a66 <__retarget_lock_release_recursive>:
 8002a66:	4770      	bx	lr

08002a68 <memcpy>:
 8002a68:	440a      	add	r2, r1
 8002a6a:	4291      	cmp	r1, r2
 8002a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a70:	d100      	bne.n	8002a74 <memcpy+0xc>
 8002a72:	4770      	bx	lr
 8002a74:	b510      	push	{r4, lr}
 8002a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a7e:	4291      	cmp	r1, r2
 8002a80:	d1f9      	bne.n	8002a76 <memcpy+0xe>
 8002a82:	bd10      	pop	{r4, pc}

08002a84 <_free_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4605      	mov	r5, r0
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	d041      	beq.n	8002b10 <_free_r+0x8c>
 8002a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a90:	1f0c      	subs	r4, r1, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfb8      	it	lt
 8002a96:	18e4      	addlt	r4, r4, r3
 8002a98:	f000 f8e0 	bl	8002c5c <__malloc_lock>
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <_free_r+0x90>)
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	b933      	cbnz	r3, 8002ab0 <_free_r+0x2c>
 8002aa2:	6063      	str	r3, [r4, #4]
 8002aa4:	6014      	str	r4, [r2, #0]
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aac:	f000 b8dc 	b.w	8002c68 <__malloc_unlock>
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	d908      	bls.n	8002ac6 <_free_r+0x42>
 8002ab4:	6820      	ldr	r0, [r4, #0]
 8002ab6:	1821      	adds	r1, r4, r0
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	bf01      	itttt	eq
 8002abc:	6819      	ldreq	r1, [r3, #0]
 8002abe:	685b      	ldreq	r3, [r3, #4]
 8002ac0:	1809      	addeq	r1, r1, r0
 8002ac2:	6021      	streq	r1, [r4, #0]
 8002ac4:	e7ed      	b.n	8002aa2 <_free_r+0x1e>
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	b10b      	cbz	r3, 8002ad0 <_free_r+0x4c>
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	d9fa      	bls.n	8002ac6 <_free_r+0x42>
 8002ad0:	6811      	ldr	r1, [r2, #0]
 8002ad2:	1850      	adds	r0, r2, r1
 8002ad4:	42a0      	cmp	r0, r4
 8002ad6:	d10b      	bne.n	8002af0 <_free_r+0x6c>
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	4401      	add	r1, r0
 8002adc:	1850      	adds	r0, r2, r1
 8002ade:	4283      	cmp	r3, r0
 8002ae0:	6011      	str	r1, [r2, #0]
 8002ae2:	d1e0      	bne.n	8002aa6 <_free_r+0x22>
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	6053      	str	r3, [r2, #4]
 8002aea:	4408      	add	r0, r1
 8002aec:	6010      	str	r0, [r2, #0]
 8002aee:	e7da      	b.n	8002aa6 <_free_r+0x22>
 8002af0:	d902      	bls.n	8002af8 <_free_r+0x74>
 8002af2:	230c      	movs	r3, #12
 8002af4:	602b      	str	r3, [r5, #0]
 8002af6:	e7d6      	b.n	8002aa6 <_free_r+0x22>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	1821      	adds	r1, r4, r0
 8002afc:	428b      	cmp	r3, r1
 8002afe:	bf04      	itt	eq
 8002b00:	6819      	ldreq	r1, [r3, #0]
 8002b02:	685b      	ldreq	r3, [r3, #4]
 8002b04:	6063      	str	r3, [r4, #4]
 8002b06:	bf04      	itt	eq
 8002b08:	1809      	addeq	r1, r1, r0
 8002b0a:	6021      	streq	r1, [r4, #0]
 8002b0c:	6054      	str	r4, [r2, #4]
 8002b0e:	e7ca      	b.n	8002aa6 <_free_r+0x22>
 8002b10:	bd38      	pop	{r3, r4, r5, pc}
 8002b12:	bf00      	nop
 8002b14:	200001f0 	.word	0x200001f0

08002b18 <sbrk_aligned>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8002b58 <sbrk_aligned+0x40>)
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	6831      	ldr	r1, [r6, #0]
 8002b20:	4605      	mov	r5, r0
 8002b22:	b911      	cbnz	r1, 8002b2a <sbrk_aligned+0x12>
 8002b24:	f000 fba6 	bl	8003274 <_sbrk_r>
 8002b28:	6030      	str	r0, [r6, #0]
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f000 fba1 	bl	8003274 <_sbrk_r>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	d103      	bne.n	8002b3e <sbrk_aligned+0x26>
 8002b36:	f04f 34ff 	mov.w	r4, #4294967295
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	1cc4      	adds	r4, r0, #3
 8002b40:	f024 0403 	bic.w	r4, r4, #3
 8002b44:	42a0      	cmp	r0, r4
 8002b46:	d0f8      	beq.n	8002b3a <sbrk_aligned+0x22>
 8002b48:	1a21      	subs	r1, r4, r0
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f000 fb92 	bl	8003274 <_sbrk_r>
 8002b50:	3001      	adds	r0, #1
 8002b52:	d1f2      	bne.n	8002b3a <sbrk_aligned+0x22>
 8002b54:	e7ef      	b.n	8002b36 <sbrk_aligned+0x1e>
 8002b56:	bf00      	nop
 8002b58:	200001ec 	.word	0x200001ec

08002b5c <_malloc_r>:
 8002b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b60:	1ccd      	adds	r5, r1, #3
 8002b62:	f025 0503 	bic.w	r5, r5, #3
 8002b66:	3508      	adds	r5, #8
 8002b68:	2d0c      	cmp	r5, #12
 8002b6a:	bf38      	it	cc
 8002b6c:	250c      	movcc	r5, #12
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	4606      	mov	r6, r0
 8002b72:	db01      	blt.n	8002b78 <_malloc_r+0x1c>
 8002b74:	42a9      	cmp	r1, r5
 8002b76:	d904      	bls.n	8002b82 <_malloc_r+0x26>
 8002b78:	230c      	movs	r3, #12
 8002b7a:	6033      	str	r3, [r6, #0]
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c58 <_malloc_r+0xfc>
 8002b86:	f000 f869 	bl	8002c5c <__malloc_lock>
 8002b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b8e:	461c      	mov	r4, r3
 8002b90:	bb44      	cbnz	r4, 8002be4 <_malloc_r+0x88>
 8002b92:	4629      	mov	r1, r5
 8002b94:	4630      	mov	r0, r6
 8002b96:	f7ff ffbf 	bl	8002b18 <sbrk_aligned>
 8002b9a:	1c43      	adds	r3, r0, #1
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	d158      	bne.n	8002c52 <_malloc_r+0xf6>
 8002ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8002ba4:	4627      	mov	r7, r4
 8002ba6:	2f00      	cmp	r7, #0
 8002ba8:	d143      	bne.n	8002c32 <_malloc_r+0xd6>
 8002baa:	2c00      	cmp	r4, #0
 8002bac:	d04b      	beq.n	8002c46 <_malloc_r+0xea>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	4639      	mov	r1, r7
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	eb04 0903 	add.w	r9, r4, r3
 8002bb8:	f000 fb5c 	bl	8003274 <_sbrk_r>
 8002bbc:	4581      	cmp	r9, r0
 8002bbe:	d142      	bne.n	8002c46 <_malloc_r+0xea>
 8002bc0:	6821      	ldr	r1, [r4, #0]
 8002bc2:	1a6d      	subs	r5, r5, r1
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	f7ff ffa6 	bl	8002b18 <sbrk_aligned>
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d03a      	beq.n	8002c46 <_malloc_r+0xea>
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	442b      	add	r3, r5
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	bb62      	cbnz	r2, 8002c38 <_malloc_r+0xdc>
 8002bde:	f8c8 7000 	str.w	r7, [r8]
 8002be2:	e00f      	b.n	8002c04 <_malloc_r+0xa8>
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	1b52      	subs	r2, r2, r5
 8002be8:	d420      	bmi.n	8002c2c <_malloc_r+0xd0>
 8002bea:	2a0b      	cmp	r2, #11
 8002bec:	d917      	bls.n	8002c1e <_malloc_r+0xc2>
 8002bee:	1961      	adds	r1, r4, r5
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	6025      	str	r5, [r4, #0]
 8002bf4:	bf18      	it	ne
 8002bf6:	6059      	strne	r1, [r3, #4]
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	bf08      	it	eq
 8002bfc:	f8c8 1000 	streq.w	r1, [r8]
 8002c00:	5162      	str	r2, [r4, r5]
 8002c02:	604b      	str	r3, [r1, #4]
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 f82f 	bl	8002c68 <__malloc_unlock>
 8002c0a:	f104 000b 	add.w	r0, r4, #11
 8002c0e:	1d23      	adds	r3, r4, #4
 8002c10:	f020 0007 	bic.w	r0, r0, #7
 8002c14:	1ac2      	subs	r2, r0, r3
 8002c16:	bf1c      	itt	ne
 8002c18:	1a1b      	subne	r3, r3, r0
 8002c1a:	50a3      	strne	r3, [r4, r2]
 8002c1c:	e7af      	b.n	8002b7e <_malloc_r+0x22>
 8002c1e:	6862      	ldr	r2, [r4, #4]
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	bf0c      	ite	eq
 8002c24:	f8c8 2000 	streq.w	r2, [r8]
 8002c28:	605a      	strne	r2, [r3, #4]
 8002c2a:	e7eb      	b.n	8002c04 <_malloc_r+0xa8>
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	6864      	ldr	r4, [r4, #4]
 8002c30:	e7ae      	b.n	8002b90 <_malloc_r+0x34>
 8002c32:	463c      	mov	r4, r7
 8002c34:	687f      	ldr	r7, [r7, #4]
 8002c36:	e7b6      	b.n	8002ba6 <_malloc_r+0x4a>
 8002c38:	461a      	mov	r2, r3
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d1fb      	bne.n	8002c38 <_malloc_r+0xdc>
 8002c40:	2300      	movs	r3, #0
 8002c42:	6053      	str	r3, [r2, #4]
 8002c44:	e7de      	b.n	8002c04 <_malloc_r+0xa8>
 8002c46:	230c      	movs	r3, #12
 8002c48:	6033      	str	r3, [r6, #0]
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f000 f80c 	bl	8002c68 <__malloc_unlock>
 8002c50:	e794      	b.n	8002b7c <_malloc_r+0x20>
 8002c52:	6005      	str	r5, [r0, #0]
 8002c54:	e7d6      	b.n	8002c04 <_malloc_r+0xa8>
 8002c56:	bf00      	nop
 8002c58:	200001f0 	.word	0x200001f0

08002c5c <__malloc_lock>:
 8002c5c:	4801      	ldr	r0, [pc, #4]	@ (8002c64 <__malloc_lock+0x8>)
 8002c5e:	f7ff bf01 	b.w	8002a64 <__retarget_lock_acquire_recursive>
 8002c62:	bf00      	nop
 8002c64:	200001e8 	.word	0x200001e8

08002c68 <__malloc_unlock>:
 8002c68:	4801      	ldr	r0, [pc, #4]	@ (8002c70 <__malloc_unlock+0x8>)
 8002c6a:	f7ff befc 	b.w	8002a66 <__retarget_lock_release_recursive>
 8002c6e:	bf00      	nop
 8002c70:	200001e8 	.word	0x200001e8

08002c74 <__ssputs_r>:
 8002c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	461f      	mov	r7, r3
 8002c7c:	42be      	cmp	r6, r7
 8002c7e:	680b      	ldr	r3, [r1, #0]
 8002c80:	4682      	mov	sl, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	4690      	mov	r8, r2
 8002c86:	d82d      	bhi.n	8002ce4 <__ssputs_r+0x70>
 8002c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c90:	d026      	beq.n	8002ce0 <__ssputs_r+0x6c>
 8002c92:	6965      	ldr	r5, [r4, #20]
 8002c94:	6909      	ldr	r1, [r1, #16]
 8002c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c9a:	eba3 0901 	sub.w	r9, r3, r1
 8002c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ca2:	1c7b      	adds	r3, r7, #1
 8002ca4:	444b      	add	r3, r9
 8002ca6:	106d      	asrs	r5, r5, #1
 8002ca8:	429d      	cmp	r5, r3
 8002caa:	bf38      	it	cc
 8002cac:	461d      	movcc	r5, r3
 8002cae:	0553      	lsls	r3, r2, #21
 8002cb0:	d527      	bpl.n	8002d02 <__ssputs_r+0x8e>
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7ff ff52 	bl	8002b5c <_malloc_r>
 8002cb8:	4606      	mov	r6, r0
 8002cba:	b360      	cbz	r0, 8002d16 <__ssputs_r+0xa2>
 8002cbc:	6921      	ldr	r1, [r4, #16]
 8002cbe:	464a      	mov	r2, r9
 8002cc0:	f7ff fed2 	bl	8002a68 <memcpy>
 8002cc4:	89a3      	ldrh	r3, [r4, #12]
 8002cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cce:	81a3      	strh	r3, [r4, #12]
 8002cd0:	6126      	str	r6, [r4, #16]
 8002cd2:	6165      	str	r5, [r4, #20]
 8002cd4:	444e      	add	r6, r9
 8002cd6:	eba5 0509 	sub.w	r5, r5, r9
 8002cda:	6026      	str	r6, [r4, #0]
 8002cdc:	60a5      	str	r5, [r4, #8]
 8002cde:	463e      	mov	r6, r7
 8002ce0:	42be      	cmp	r6, r7
 8002ce2:	d900      	bls.n	8002ce6 <__ssputs_r+0x72>
 8002ce4:	463e      	mov	r6, r7
 8002ce6:	6820      	ldr	r0, [r4, #0]
 8002ce8:	4632      	mov	r2, r6
 8002cea:	4641      	mov	r1, r8
 8002cec:	f000 faa8 	bl	8003240 <memmove>
 8002cf0:	68a3      	ldr	r3, [r4, #8]
 8002cf2:	1b9b      	subs	r3, r3, r6
 8002cf4:	60a3      	str	r3, [r4, #8]
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	4433      	add	r3, r6
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d02:	462a      	mov	r2, r5
 8002d04:	f000 fac6 	bl	8003294 <_realloc_r>
 8002d08:	4606      	mov	r6, r0
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d1e0      	bne.n	8002cd0 <__ssputs_r+0x5c>
 8002d0e:	6921      	ldr	r1, [r4, #16]
 8002d10:	4650      	mov	r0, sl
 8002d12:	f7ff feb7 	bl	8002a84 <_free_r>
 8002d16:	230c      	movs	r3, #12
 8002d18:	f8ca 3000 	str.w	r3, [sl]
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	e7e9      	b.n	8002cfe <__ssputs_r+0x8a>
	...

08002d2c <_svfiprintf_r>:
 8002d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d30:	4698      	mov	r8, r3
 8002d32:	898b      	ldrh	r3, [r1, #12]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	b09d      	sub	sp, #116	@ 0x74
 8002d38:	4607      	mov	r7, r0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	d510      	bpl.n	8002d62 <_svfiprintf_r+0x36>
 8002d40:	690b      	ldr	r3, [r1, #16]
 8002d42:	b973      	cbnz	r3, 8002d62 <_svfiprintf_r+0x36>
 8002d44:	2140      	movs	r1, #64	@ 0x40
 8002d46:	f7ff ff09 	bl	8002b5c <_malloc_r>
 8002d4a:	6028      	str	r0, [r5, #0]
 8002d4c:	6128      	str	r0, [r5, #16]
 8002d4e:	b930      	cbnz	r0, 8002d5e <_svfiprintf_r+0x32>
 8002d50:	230c      	movs	r3, #12
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	b01d      	add	sp, #116	@ 0x74
 8002d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d5e:	2340      	movs	r3, #64	@ 0x40
 8002d60:	616b      	str	r3, [r5, #20]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d66:	2320      	movs	r3, #32
 8002d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d70:	2330      	movs	r3, #48	@ 0x30
 8002d72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002f10 <_svfiprintf_r+0x1e4>
 8002d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d7a:	f04f 0901 	mov.w	r9, #1
 8002d7e:	4623      	mov	r3, r4
 8002d80:	469a      	mov	sl, r3
 8002d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d86:	b10a      	cbz	r2, 8002d8c <_svfiprintf_r+0x60>
 8002d88:	2a25      	cmp	r2, #37	@ 0x25
 8002d8a:	d1f9      	bne.n	8002d80 <_svfiprintf_r+0x54>
 8002d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d90:	d00b      	beq.n	8002daa <_svfiprintf_r+0x7e>
 8002d92:	465b      	mov	r3, fp
 8002d94:	4622      	mov	r2, r4
 8002d96:	4629      	mov	r1, r5
 8002d98:	4638      	mov	r0, r7
 8002d9a:	f7ff ff6b 	bl	8002c74 <__ssputs_r>
 8002d9e:	3001      	adds	r0, #1
 8002da0:	f000 80a7 	beq.w	8002ef2 <_svfiprintf_r+0x1c6>
 8002da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002da6:	445a      	add	r2, fp
 8002da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002daa:	f89a 3000 	ldrb.w	r3, [sl]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 809f 	beq.w	8002ef2 <_svfiprintf_r+0x1c6>
 8002db4:	2300      	movs	r3, #0
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dbe:	f10a 0a01 	add.w	sl, sl, #1
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	9307      	str	r3, [sp, #28]
 8002dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8002dcc:	4654      	mov	r4, sl
 8002dce:	2205      	movs	r2, #5
 8002dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd4:	484e      	ldr	r0, [pc, #312]	@ (8002f10 <_svfiprintf_r+0x1e4>)
 8002dd6:	f7fd fa03 	bl	80001e0 <memchr>
 8002dda:	9a04      	ldr	r2, [sp, #16]
 8002ddc:	b9d8      	cbnz	r0, 8002e16 <_svfiprintf_r+0xea>
 8002dde:	06d0      	lsls	r0, r2, #27
 8002de0:	bf44      	itt	mi
 8002de2:	2320      	movmi	r3, #32
 8002de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002de8:	0711      	lsls	r1, r2, #28
 8002dea:	bf44      	itt	mi
 8002dec:	232b      	movmi	r3, #43	@ 0x2b
 8002dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002df2:	f89a 3000 	ldrb.w	r3, [sl]
 8002df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002df8:	d015      	beq.n	8002e26 <_svfiprintf_r+0xfa>
 8002dfa:	9a07      	ldr	r2, [sp, #28]
 8002dfc:	4654      	mov	r4, sl
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f04f 0c0a 	mov.w	ip, #10
 8002e04:	4621      	mov	r1, r4
 8002e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e0a:	3b30      	subs	r3, #48	@ 0x30
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d94b      	bls.n	8002ea8 <_svfiprintf_r+0x17c>
 8002e10:	b1b0      	cbz	r0, 8002e40 <_svfiprintf_r+0x114>
 8002e12:	9207      	str	r2, [sp, #28]
 8002e14:	e014      	b.n	8002e40 <_svfiprintf_r+0x114>
 8002e16:	eba0 0308 	sub.w	r3, r0, r8
 8002e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	9304      	str	r3, [sp, #16]
 8002e22:	46a2      	mov	sl, r4
 8002e24:	e7d2      	b.n	8002dcc <_svfiprintf_r+0xa0>
 8002e26:	9b03      	ldr	r3, [sp, #12]
 8002e28:	1d19      	adds	r1, r3, #4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	9103      	str	r1, [sp, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfbb      	ittet	lt
 8002e32:	425b      	neglt	r3, r3
 8002e34:	f042 0202 	orrlt.w	r2, r2, #2
 8002e38:	9307      	strge	r3, [sp, #28]
 8002e3a:	9307      	strlt	r3, [sp, #28]
 8002e3c:	bfb8      	it	lt
 8002e3e:	9204      	strlt	r2, [sp, #16]
 8002e40:	7823      	ldrb	r3, [r4, #0]
 8002e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e44:	d10a      	bne.n	8002e5c <_svfiprintf_r+0x130>
 8002e46:	7863      	ldrb	r3, [r4, #1]
 8002e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e4a:	d132      	bne.n	8002eb2 <_svfiprintf_r+0x186>
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	9203      	str	r2, [sp, #12]
 8002e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e58:	3402      	adds	r4, #2
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002f20 <_svfiprintf_r+0x1f4>
 8002e60:	7821      	ldrb	r1, [r4, #0]
 8002e62:	2203      	movs	r2, #3
 8002e64:	4650      	mov	r0, sl
 8002e66:	f7fd f9bb 	bl	80001e0 <memchr>
 8002e6a:	b138      	cbz	r0, 8002e7c <_svfiprintf_r+0x150>
 8002e6c:	9b04      	ldr	r3, [sp, #16]
 8002e6e:	eba0 000a 	sub.w	r0, r0, sl
 8002e72:	2240      	movs	r2, #64	@ 0x40
 8002e74:	4082      	lsls	r2, r0
 8002e76:	4313      	orrs	r3, r2
 8002e78:	3401      	adds	r4, #1
 8002e7a:	9304      	str	r3, [sp, #16]
 8002e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e80:	4824      	ldr	r0, [pc, #144]	@ (8002f14 <_svfiprintf_r+0x1e8>)
 8002e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e86:	2206      	movs	r2, #6
 8002e88:	f7fd f9aa 	bl	80001e0 <memchr>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d036      	beq.n	8002efe <_svfiprintf_r+0x1d2>
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <_svfiprintf_r+0x1ec>)
 8002e92:	bb1b      	cbnz	r3, 8002edc <_svfiprintf_r+0x1b0>
 8002e94:	9b03      	ldr	r3, [sp, #12]
 8002e96:	3307      	adds	r3, #7
 8002e98:	f023 0307 	bic.w	r3, r3, #7
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ea2:	4433      	add	r3, r6
 8002ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea6:	e76a      	b.n	8002d7e <_svfiprintf_r+0x52>
 8002ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eac:	460c      	mov	r4, r1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7a8      	b.n	8002e04 <_svfiprintf_r+0xd8>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	3401      	adds	r4, #1
 8002eb6:	9305      	str	r3, [sp, #20]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0c0a 	mov.w	ip, #10
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec4:	3a30      	subs	r2, #48	@ 0x30
 8002ec6:	2a09      	cmp	r2, #9
 8002ec8:	d903      	bls.n	8002ed2 <_svfiprintf_r+0x1a6>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0c6      	beq.n	8002e5c <_svfiprintf_r+0x130>
 8002ece:	9105      	str	r1, [sp, #20]
 8002ed0:	e7c4      	b.n	8002e5c <_svfiprintf_r+0x130>
 8002ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e7f0      	b.n	8002ebe <_svfiprintf_r+0x192>
 8002edc:	ab03      	add	r3, sp, #12
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	462a      	mov	r2, r5
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <_svfiprintf_r+0x1f0>)
 8002ee4:	a904      	add	r1, sp, #16
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	f3af 8000 	nop.w
 8002eec:	1c42      	adds	r2, r0, #1
 8002eee:	4606      	mov	r6, r0
 8002ef0:	d1d6      	bne.n	8002ea0 <_svfiprintf_r+0x174>
 8002ef2:	89ab      	ldrh	r3, [r5, #12]
 8002ef4:	065b      	lsls	r3, r3, #25
 8002ef6:	f53f af2d 	bmi.w	8002d54 <_svfiprintf_r+0x28>
 8002efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002efc:	e72c      	b.n	8002d58 <_svfiprintf_r+0x2c>
 8002efe:	ab03      	add	r3, sp, #12
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	462a      	mov	r2, r5
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <_svfiprintf_r+0x1f0>)
 8002f06:	a904      	add	r1, sp, #16
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f000 f879 	bl	8003000 <_printf_i>
 8002f0e:	e7ed      	b.n	8002eec <_svfiprintf_r+0x1c0>
 8002f10:	08004064 	.word	0x08004064
 8002f14:	0800406e 	.word	0x0800406e
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	08002c75 	.word	0x08002c75
 8002f20:	0800406a 	.word	0x0800406a

08002f24 <_printf_common>:
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	4616      	mov	r6, r2
 8002f2a:	4698      	mov	r8, r3
 8002f2c:	688a      	ldr	r2, [r1, #8]
 8002f2e:	690b      	ldr	r3, [r1, #16]
 8002f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bfb8      	it	lt
 8002f38:	4613      	movlt	r3, r2
 8002f3a:	6033      	str	r3, [r6, #0]
 8002f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f40:	4607      	mov	r7, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	b10a      	cbz	r2, 8002f4a <_printf_common+0x26>
 8002f46:	3301      	adds	r3, #1
 8002f48:	6033      	str	r3, [r6, #0]
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	0699      	lsls	r1, r3, #26
 8002f4e:	bf42      	ittt	mi
 8002f50:	6833      	ldrmi	r3, [r6, #0]
 8002f52:	3302      	addmi	r3, #2
 8002f54:	6033      	strmi	r3, [r6, #0]
 8002f56:	6825      	ldr	r5, [r4, #0]
 8002f58:	f015 0506 	ands.w	r5, r5, #6
 8002f5c:	d106      	bne.n	8002f6c <_printf_common+0x48>
 8002f5e:	f104 0a19 	add.w	sl, r4, #25
 8002f62:	68e3      	ldr	r3, [r4, #12]
 8002f64:	6832      	ldr	r2, [r6, #0]
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	42ab      	cmp	r3, r5
 8002f6a:	dc26      	bgt.n	8002fba <_printf_common+0x96>
 8002f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	3b00      	subs	r3, #0
 8002f74:	bf18      	it	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	0692      	lsls	r2, r2, #26
 8002f7a:	d42b      	bmi.n	8002fd4 <_printf_common+0xb0>
 8002f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f80:	4641      	mov	r1, r8
 8002f82:	4638      	mov	r0, r7
 8002f84:	47c8      	blx	r9
 8002f86:	3001      	adds	r0, #1
 8002f88:	d01e      	beq.n	8002fc8 <_printf_common+0xa4>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	f003 0306 	and.w	r3, r3, #6
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf02      	ittt	eq
 8002f96:	68e5      	ldreq	r5, [r4, #12]
 8002f98:	6833      	ldreq	r3, [r6, #0]
 8002f9a:	1aed      	subeq	r5, r5, r3
 8002f9c:	68a3      	ldr	r3, [r4, #8]
 8002f9e:	bf0c      	ite	eq
 8002fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fa4:	2500      	movne	r5, #0
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	bfc4      	itt	gt
 8002faa:	1a9b      	subgt	r3, r3, r2
 8002fac:	18ed      	addgt	r5, r5, r3
 8002fae:	2600      	movs	r6, #0
 8002fb0:	341a      	adds	r4, #26
 8002fb2:	42b5      	cmp	r5, r6
 8002fb4:	d11a      	bne.n	8002fec <_printf_common+0xc8>
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	e008      	b.n	8002fcc <_printf_common+0xa8>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	4652      	mov	r2, sl
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	47c8      	blx	r9
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d103      	bne.n	8002fd0 <_printf_common+0xac>
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	e7c6      	b.n	8002f62 <_printf_common+0x3e>
 8002fd4:	18e1      	adds	r1, r4, r3
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	2030      	movs	r0, #48	@ 0x30
 8002fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fde:	4422      	add	r2, r4
 8002fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fe8:	3302      	adds	r3, #2
 8002fea:	e7c7      	b.n	8002f7c <_printf_common+0x58>
 8002fec:	2301      	movs	r3, #1
 8002fee:	4622      	mov	r2, r4
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	47c8      	blx	r9
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d0e6      	beq.n	8002fc8 <_printf_common+0xa4>
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7d9      	b.n	8002fb2 <_printf_common+0x8e>
	...

08003000 <_printf_i>:
 8003000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003004:	7e0f      	ldrb	r7, [r1, #24]
 8003006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003008:	2f78      	cmp	r7, #120	@ 0x78
 800300a:	4691      	mov	r9, r2
 800300c:	4680      	mov	r8, r0
 800300e:	460c      	mov	r4, r1
 8003010:	469a      	mov	sl, r3
 8003012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003016:	d807      	bhi.n	8003028 <_printf_i+0x28>
 8003018:	2f62      	cmp	r7, #98	@ 0x62
 800301a:	d80a      	bhi.n	8003032 <_printf_i+0x32>
 800301c:	2f00      	cmp	r7, #0
 800301e:	f000 80d2 	beq.w	80031c6 <_printf_i+0x1c6>
 8003022:	2f58      	cmp	r7, #88	@ 0x58
 8003024:	f000 80b9 	beq.w	800319a <_printf_i+0x19a>
 8003028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800302c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003030:	e03a      	b.n	80030a8 <_printf_i+0xa8>
 8003032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003036:	2b15      	cmp	r3, #21
 8003038:	d8f6      	bhi.n	8003028 <_printf_i+0x28>
 800303a:	a101      	add	r1, pc, #4	@ (adr r1, 8003040 <_printf_i+0x40>)
 800303c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003040:	08003099 	.word	0x08003099
 8003044:	080030ad 	.word	0x080030ad
 8003048:	08003029 	.word	0x08003029
 800304c:	08003029 	.word	0x08003029
 8003050:	08003029 	.word	0x08003029
 8003054:	08003029 	.word	0x08003029
 8003058:	080030ad 	.word	0x080030ad
 800305c:	08003029 	.word	0x08003029
 8003060:	08003029 	.word	0x08003029
 8003064:	08003029 	.word	0x08003029
 8003068:	08003029 	.word	0x08003029
 800306c:	080031ad 	.word	0x080031ad
 8003070:	080030d7 	.word	0x080030d7
 8003074:	08003167 	.word	0x08003167
 8003078:	08003029 	.word	0x08003029
 800307c:	08003029 	.word	0x08003029
 8003080:	080031cf 	.word	0x080031cf
 8003084:	08003029 	.word	0x08003029
 8003088:	080030d7 	.word	0x080030d7
 800308c:	08003029 	.word	0x08003029
 8003090:	08003029 	.word	0x08003029
 8003094:	0800316f 	.word	0x0800316f
 8003098:	6833      	ldr	r3, [r6, #0]
 800309a:	1d1a      	adds	r2, r3, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6032      	str	r2, [r6, #0]
 80030a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030a8:	2301      	movs	r3, #1
 80030aa:	e09d      	b.n	80031e8 <_printf_i+0x1e8>
 80030ac:	6833      	ldr	r3, [r6, #0]
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	1d19      	adds	r1, r3, #4
 80030b2:	6031      	str	r1, [r6, #0]
 80030b4:	0606      	lsls	r6, r0, #24
 80030b6:	d501      	bpl.n	80030bc <_printf_i+0xbc>
 80030b8:	681d      	ldr	r5, [r3, #0]
 80030ba:	e003      	b.n	80030c4 <_printf_i+0xc4>
 80030bc:	0645      	lsls	r5, r0, #25
 80030be:	d5fb      	bpl.n	80030b8 <_printf_i+0xb8>
 80030c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030c4:	2d00      	cmp	r5, #0
 80030c6:	da03      	bge.n	80030d0 <_printf_i+0xd0>
 80030c8:	232d      	movs	r3, #45	@ 0x2d
 80030ca:	426d      	negs	r5, r5
 80030cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030d0:	4859      	ldr	r0, [pc, #356]	@ (8003238 <_printf_i+0x238>)
 80030d2:	230a      	movs	r3, #10
 80030d4:	e011      	b.n	80030fa <_printf_i+0xfa>
 80030d6:	6821      	ldr	r1, [r4, #0]
 80030d8:	6833      	ldr	r3, [r6, #0]
 80030da:	0608      	lsls	r0, r1, #24
 80030dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80030e0:	d402      	bmi.n	80030e8 <_printf_i+0xe8>
 80030e2:	0649      	lsls	r1, r1, #25
 80030e4:	bf48      	it	mi
 80030e6:	b2ad      	uxthmi	r5, r5
 80030e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80030ea:	4853      	ldr	r0, [pc, #332]	@ (8003238 <_printf_i+0x238>)
 80030ec:	6033      	str	r3, [r6, #0]
 80030ee:	bf14      	ite	ne
 80030f0:	230a      	movne	r3, #10
 80030f2:	2308      	moveq	r3, #8
 80030f4:	2100      	movs	r1, #0
 80030f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030fa:	6866      	ldr	r6, [r4, #4]
 80030fc:	60a6      	str	r6, [r4, #8]
 80030fe:	2e00      	cmp	r6, #0
 8003100:	bfa2      	ittt	ge
 8003102:	6821      	ldrge	r1, [r4, #0]
 8003104:	f021 0104 	bicge.w	r1, r1, #4
 8003108:	6021      	strge	r1, [r4, #0]
 800310a:	b90d      	cbnz	r5, 8003110 <_printf_i+0x110>
 800310c:	2e00      	cmp	r6, #0
 800310e:	d04b      	beq.n	80031a8 <_printf_i+0x1a8>
 8003110:	4616      	mov	r6, r2
 8003112:	fbb5 f1f3 	udiv	r1, r5, r3
 8003116:	fb03 5711 	mls	r7, r3, r1, r5
 800311a:	5dc7      	ldrb	r7, [r0, r7]
 800311c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003120:	462f      	mov	r7, r5
 8003122:	42bb      	cmp	r3, r7
 8003124:	460d      	mov	r5, r1
 8003126:	d9f4      	bls.n	8003112 <_printf_i+0x112>
 8003128:	2b08      	cmp	r3, #8
 800312a:	d10b      	bne.n	8003144 <_printf_i+0x144>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	07df      	lsls	r7, r3, #31
 8003130:	d508      	bpl.n	8003144 <_printf_i+0x144>
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	6861      	ldr	r1, [r4, #4]
 8003136:	4299      	cmp	r1, r3
 8003138:	bfde      	ittt	le
 800313a:	2330      	movle	r3, #48	@ 0x30
 800313c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003144:	1b92      	subs	r2, r2, r6
 8003146:	6122      	str	r2, [r4, #16]
 8003148:	f8cd a000 	str.w	sl, [sp]
 800314c:	464b      	mov	r3, r9
 800314e:	aa03      	add	r2, sp, #12
 8003150:	4621      	mov	r1, r4
 8003152:	4640      	mov	r0, r8
 8003154:	f7ff fee6 	bl	8002f24 <_printf_common>
 8003158:	3001      	adds	r0, #1
 800315a:	d14a      	bne.n	80031f2 <_printf_i+0x1f2>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	b004      	add	sp, #16
 8003162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	4833      	ldr	r0, [pc, #204]	@ (800323c <_printf_i+0x23c>)
 8003170:	2778      	movs	r7, #120	@ 0x78
 8003172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	6831      	ldr	r1, [r6, #0]
 800317a:	061f      	lsls	r7, r3, #24
 800317c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003180:	d402      	bmi.n	8003188 <_printf_i+0x188>
 8003182:	065f      	lsls	r7, r3, #25
 8003184:	bf48      	it	mi
 8003186:	b2ad      	uxthmi	r5, r5
 8003188:	6031      	str	r1, [r6, #0]
 800318a:	07d9      	lsls	r1, r3, #31
 800318c:	bf44      	itt	mi
 800318e:	f043 0320 	orrmi.w	r3, r3, #32
 8003192:	6023      	strmi	r3, [r4, #0]
 8003194:	b11d      	cbz	r5, 800319e <_printf_i+0x19e>
 8003196:	2310      	movs	r3, #16
 8003198:	e7ac      	b.n	80030f4 <_printf_i+0xf4>
 800319a:	4827      	ldr	r0, [pc, #156]	@ (8003238 <_printf_i+0x238>)
 800319c:	e7e9      	b.n	8003172 <_printf_i+0x172>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	f023 0320 	bic.w	r3, r3, #32
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	e7f6      	b.n	8003196 <_printf_i+0x196>
 80031a8:	4616      	mov	r6, r2
 80031aa:	e7bd      	b.n	8003128 <_printf_i+0x128>
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	6825      	ldr	r5, [r4, #0]
 80031b0:	6961      	ldr	r1, [r4, #20]
 80031b2:	1d18      	adds	r0, r3, #4
 80031b4:	6030      	str	r0, [r6, #0]
 80031b6:	062e      	lsls	r6, r5, #24
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	d501      	bpl.n	80031c0 <_printf_i+0x1c0>
 80031bc:	6019      	str	r1, [r3, #0]
 80031be:	e002      	b.n	80031c6 <_printf_i+0x1c6>
 80031c0:	0668      	lsls	r0, r5, #25
 80031c2:	d5fb      	bpl.n	80031bc <_printf_i+0x1bc>
 80031c4:	8019      	strh	r1, [r3, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	6123      	str	r3, [r4, #16]
 80031ca:	4616      	mov	r6, r2
 80031cc:	e7bc      	b.n	8003148 <_printf_i+0x148>
 80031ce:	6833      	ldr	r3, [r6, #0]
 80031d0:	1d1a      	adds	r2, r3, #4
 80031d2:	6032      	str	r2, [r6, #0]
 80031d4:	681e      	ldr	r6, [r3, #0]
 80031d6:	6862      	ldr	r2, [r4, #4]
 80031d8:	2100      	movs	r1, #0
 80031da:	4630      	mov	r0, r6
 80031dc:	f7fd f800 	bl	80001e0 <memchr>
 80031e0:	b108      	cbz	r0, 80031e6 <_printf_i+0x1e6>
 80031e2:	1b80      	subs	r0, r0, r6
 80031e4:	6060      	str	r0, [r4, #4]
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	6123      	str	r3, [r4, #16]
 80031ea:	2300      	movs	r3, #0
 80031ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031f0:	e7aa      	b.n	8003148 <_printf_i+0x148>
 80031f2:	6923      	ldr	r3, [r4, #16]
 80031f4:	4632      	mov	r2, r6
 80031f6:	4649      	mov	r1, r9
 80031f8:	4640      	mov	r0, r8
 80031fa:	47d0      	blx	sl
 80031fc:	3001      	adds	r0, #1
 80031fe:	d0ad      	beq.n	800315c <_printf_i+0x15c>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	079b      	lsls	r3, r3, #30
 8003204:	d413      	bmi.n	800322e <_printf_i+0x22e>
 8003206:	68e0      	ldr	r0, [r4, #12]
 8003208:	9b03      	ldr	r3, [sp, #12]
 800320a:	4298      	cmp	r0, r3
 800320c:	bfb8      	it	lt
 800320e:	4618      	movlt	r0, r3
 8003210:	e7a6      	b.n	8003160 <_printf_i+0x160>
 8003212:	2301      	movs	r3, #1
 8003214:	4632      	mov	r2, r6
 8003216:	4649      	mov	r1, r9
 8003218:	4640      	mov	r0, r8
 800321a:	47d0      	blx	sl
 800321c:	3001      	adds	r0, #1
 800321e:	d09d      	beq.n	800315c <_printf_i+0x15c>
 8003220:	3501      	adds	r5, #1
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	9903      	ldr	r1, [sp, #12]
 8003226:	1a5b      	subs	r3, r3, r1
 8003228:	42ab      	cmp	r3, r5
 800322a:	dcf2      	bgt.n	8003212 <_printf_i+0x212>
 800322c:	e7eb      	b.n	8003206 <_printf_i+0x206>
 800322e:	2500      	movs	r5, #0
 8003230:	f104 0619 	add.w	r6, r4, #25
 8003234:	e7f5      	b.n	8003222 <_printf_i+0x222>
 8003236:	bf00      	nop
 8003238:	08004075 	.word	0x08004075
 800323c:	08004086 	.word	0x08004086

08003240 <memmove>:
 8003240:	4288      	cmp	r0, r1
 8003242:	b510      	push	{r4, lr}
 8003244:	eb01 0402 	add.w	r4, r1, r2
 8003248:	d902      	bls.n	8003250 <memmove+0x10>
 800324a:	4284      	cmp	r4, r0
 800324c:	4623      	mov	r3, r4
 800324e:	d807      	bhi.n	8003260 <memmove+0x20>
 8003250:	1e43      	subs	r3, r0, #1
 8003252:	42a1      	cmp	r1, r4
 8003254:	d008      	beq.n	8003268 <memmove+0x28>
 8003256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800325a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800325e:	e7f8      	b.n	8003252 <memmove+0x12>
 8003260:	4402      	add	r2, r0
 8003262:	4601      	mov	r1, r0
 8003264:	428a      	cmp	r2, r1
 8003266:	d100      	bne.n	800326a <memmove+0x2a>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800326e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003272:	e7f7      	b.n	8003264 <memmove+0x24>

08003274 <_sbrk_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4d06      	ldr	r5, [pc, #24]	@ (8003290 <_sbrk_r+0x1c>)
 8003278:	2300      	movs	r3, #0
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	f7fe fd86 	bl	8001d90 <_sbrk>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_sbrk_r+0x1a>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_sbrk_r+0x1a>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	200001e4 	.word	0x200001e4

08003294 <_realloc_r>:
 8003294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003298:	4680      	mov	r8, r0
 800329a:	4615      	mov	r5, r2
 800329c:	460c      	mov	r4, r1
 800329e:	b921      	cbnz	r1, 80032aa <_realloc_r+0x16>
 80032a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032a4:	4611      	mov	r1, r2
 80032a6:	f7ff bc59 	b.w	8002b5c <_malloc_r>
 80032aa:	b92a      	cbnz	r2, 80032b8 <_realloc_r+0x24>
 80032ac:	f7ff fbea 	bl	8002a84 <_free_r>
 80032b0:	2400      	movs	r4, #0
 80032b2:	4620      	mov	r0, r4
 80032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b8:	f000 f81a 	bl	80032f0 <_malloc_usable_size_r>
 80032bc:	4285      	cmp	r5, r0
 80032be:	4606      	mov	r6, r0
 80032c0:	d802      	bhi.n	80032c8 <_realloc_r+0x34>
 80032c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80032c6:	d8f4      	bhi.n	80032b2 <_realloc_r+0x1e>
 80032c8:	4629      	mov	r1, r5
 80032ca:	4640      	mov	r0, r8
 80032cc:	f7ff fc46 	bl	8002b5c <_malloc_r>
 80032d0:	4607      	mov	r7, r0
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d0ec      	beq.n	80032b0 <_realloc_r+0x1c>
 80032d6:	42b5      	cmp	r5, r6
 80032d8:	462a      	mov	r2, r5
 80032da:	4621      	mov	r1, r4
 80032dc:	bf28      	it	cs
 80032de:	4632      	movcs	r2, r6
 80032e0:	f7ff fbc2 	bl	8002a68 <memcpy>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4640      	mov	r0, r8
 80032e8:	f7ff fbcc 	bl	8002a84 <_free_r>
 80032ec:	463c      	mov	r4, r7
 80032ee:	e7e0      	b.n	80032b2 <_realloc_r+0x1e>

080032f0 <_malloc_usable_size_r>:
 80032f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f4:	1f18      	subs	r0, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bfbc      	itt	lt
 80032fa:	580b      	ldrlt	r3, [r1, r0]
 80032fc:	18c0      	addlt	r0, r0, r3
 80032fe:	4770      	bx	lr

08003300 <log10f>:
 8003300:	b508      	push	{r3, lr}
 8003302:	ed2d 8b02 	vpush	{d8}
 8003306:	eeb0 8a40 	vmov.f32	s16, s0
 800330a:	f000 f88f 	bl	800342c <__ieee754_log10f>
 800330e:	eeb4 8a48 	vcmp.f32	s16, s16
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	d60f      	bvs.n	8003338 <log10f+0x38>
 8003318:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	d80a      	bhi.n	8003338 <log10f+0x38>
 8003322:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	d108      	bne.n	800333e <log10f+0x3e>
 800332c:	f7ff fb70 	bl	8002a10 <__errno>
 8003330:	2322      	movs	r3, #34	@ 0x22
 8003332:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003354 <log10f+0x54>
 8003336:	6003      	str	r3, [r0, #0]
 8003338:	ecbd 8b02 	vpop	{d8}
 800333c:	bd08      	pop	{r3, pc}
 800333e:	f7ff fb67 	bl	8002a10 <__errno>
 8003342:	ecbd 8b02 	vpop	{d8}
 8003346:	2321      	movs	r3, #33	@ 0x21
 8003348:	6003      	str	r3, [r0, #0]
 800334a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800334e:	4802      	ldr	r0, [pc, #8]	@ (8003358 <log10f+0x58>)
 8003350:	f000 b866 	b.w	8003420 <nanf>
 8003354:	ff800000 	.word	0xff800000
 8003358:	08004069 	.word	0x08004069

0800335c <powf>:
 800335c:	b508      	push	{r3, lr}
 800335e:	ed2d 8b04 	vpush	{d8-d9}
 8003362:	eeb0 8a60 	vmov.f32	s16, s1
 8003366:	eeb0 9a40 	vmov.f32	s18, s0
 800336a:	f000 f8b7 	bl	80034dc <__ieee754_powf>
 800336e:	eeb4 8a48 	vcmp.f32	s16, s16
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	eef0 8a40 	vmov.f32	s17, s0
 800337a:	d63e      	bvs.n	80033fa <powf+0x9e>
 800337c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d112      	bne.n	80033ac <powf+0x50>
 8003386:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d039      	beq.n	8003404 <powf+0xa8>
 8003390:	eeb0 0a48 	vmov.f32	s0, s16
 8003394:	f000 f839 	bl	800340a <finitef>
 8003398:	b378      	cbz	r0, 80033fa <powf+0x9e>
 800339a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	d52a      	bpl.n	80033fa <powf+0x9e>
 80033a4:	f7ff fb34 	bl	8002a10 <__errno>
 80033a8:	2322      	movs	r3, #34	@ 0x22
 80033aa:	e014      	b.n	80033d6 <powf+0x7a>
 80033ac:	f000 f82d 	bl	800340a <finitef>
 80033b0:	b998      	cbnz	r0, 80033da <powf+0x7e>
 80033b2:	eeb0 0a49 	vmov.f32	s0, s18
 80033b6:	f000 f828 	bl	800340a <finitef>
 80033ba:	b170      	cbz	r0, 80033da <powf+0x7e>
 80033bc:	eeb0 0a48 	vmov.f32	s0, s16
 80033c0:	f000 f823 	bl	800340a <finitef>
 80033c4:	b148      	cbz	r0, 80033da <powf+0x7e>
 80033c6:	eef4 8a68 	vcmp.f32	s17, s17
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d7e9      	bvc.n	80033a4 <powf+0x48>
 80033d0:	f7ff fb1e 	bl	8002a10 <__errno>
 80033d4:	2321      	movs	r3, #33	@ 0x21
 80033d6:	6003      	str	r3, [r0, #0]
 80033d8:	e00f      	b.n	80033fa <powf+0x9e>
 80033da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80033de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e2:	d10a      	bne.n	80033fa <powf+0x9e>
 80033e4:	eeb0 0a49 	vmov.f32	s0, s18
 80033e8:	f000 f80f 	bl	800340a <finitef>
 80033ec:	b128      	cbz	r0, 80033fa <powf+0x9e>
 80033ee:	eeb0 0a48 	vmov.f32	s0, s16
 80033f2:	f000 f80a 	bl	800340a <finitef>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d1d4      	bne.n	80033a4 <powf+0x48>
 80033fa:	eeb0 0a68 	vmov.f32	s0, s17
 80033fe:	ecbd 8b04 	vpop	{d8-d9}
 8003402:	bd08      	pop	{r3, pc}
 8003404:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8003408:	e7f7      	b.n	80033fa <powf+0x9e>

0800340a <finitef>:
 800340a:	ee10 3a10 	vmov	r3, s0
 800340e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8003412:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003416:	bfac      	ite	ge
 8003418:	2000      	movge	r0, #0
 800341a:	2001      	movlt	r0, #1
 800341c:	4770      	bx	lr
	...

08003420 <nanf>:
 8003420:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003428 <nanf+0x8>
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	7fc00000 	.word	0x7fc00000

0800342c <__ieee754_log10f>:
 800342c:	b508      	push	{r3, lr}
 800342e:	ee10 3a10 	vmov	r3, s0
 8003432:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003436:	ed2d 8b02 	vpush	{d8}
 800343a:	d108      	bne.n	800344e <__ieee754_log10f+0x22>
 800343c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80034c4 <__ieee754_log10f+0x98>
 8003440:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80034c8 <__ieee754_log10f+0x9c>
 8003444:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003448:	ecbd 8b02 	vpop	{d8}
 800344c:	bd08      	pop	{r3, pc}
 800344e:	2b00      	cmp	r3, #0
 8003450:	461a      	mov	r2, r3
 8003452:	da02      	bge.n	800345a <__ieee754_log10f+0x2e>
 8003454:	ee30 7a40 	vsub.f32	s14, s0, s0
 8003458:	e7f2      	b.n	8003440 <__ieee754_log10f+0x14>
 800345a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800345e:	db02      	blt.n	8003466 <__ieee754_log10f+0x3a>
 8003460:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003464:	e7f0      	b.n	8003448 <__ieee754_log10f+0x1c>
 8003466:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800346a:	bfbf      	itttt	lt
 800346c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 80034cc <__ieee754_log10f+0xa0>
 8003470:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8003474:	f06f 0118 	mvnlt.w	r1, #24
 8003478:	ee17 2a90 	vmovlt	r2, s15
 800347c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8003480:	bfa8      	it	ge
 8003482:	2100      	movge	r1, #0
 8003484:	3b7f      	subs	r3, #127	@ 0x7f
 8003486:	440b      	add	r3, r1
 8003488:	0fd9      	lsrs	r1, r3, #31
 800348a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8003496:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800349a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800349e:	ee00 3a10 	vmov	s0, r3
 80034a2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80034a6:	f000 fb81 	bl	8003bac <__ieee754_logf>
 80034aa:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80034d0 <__ieee754_log10f+0xa4>
 80034ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80034b2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80034d4 <__ieee754_log10f+0xa8>
 80034b6:	eea8 0a27 	vfma.f32	s0, s16, s15
 80034ba:	eddf 7a07 	vldr	s15, [pc, #28]	@ 80034d8 <__ieee754_log10f+0xac>
 80034be:	eea8 0a27 	vfma.f32	s0, s16, s15
 80034c2:	e7c1      	b.n	8003448 <__ieee754_log10f+0x1c>
 80034c4:	cc000000 	.word	0xcc000000
 80034c8:	00000000 	.word	0x00000000
 80034cc:	4c000000 	.word	0x4c000000
 80034d0:	3ede5bd9 	.word	0x3ede5bd9
 80034d4:	355427db 	.word	0x355427db
 80034d8:	3e9a2080 	.word	0x3e9a2080

080034dc <__ieee754_powf>:
 80034dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e0:	ee10 4a90 	vmov	r4, s1
 80034e4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80034e8:	ed2d 8b02 	vpush	{d8}
 80034ec:	ee10 6a10 	vmov	r6, s0
 80034f0:	eeb0 8a40 	vmov.f32	s16, s0
 80034f4:	eef0 8a60 	vmov.f32	s17, s1
 80034f8:	d10c      	bne.n	8003514 <__ieee754_powf+0x38>
 80034fa:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80034fe:	0076      	lsls	r6, r6, #1
 8003500:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003504:	f240 829c 	bls.w	8003a40 <__ieee754_powf+0x564>
 8003508:	ee38 0a28 	vadd.f32	s0, s16, s17
 800350c:	ecbd 8b02 	vpop	{d8}
 8003510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003514:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8003518:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800351c:	d802      	bhi.n	8003524 <__ieee754_powf+0x48>
 800351e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8003522:	d908      	bls.n	8003536 <__ieee754_powf+0x5a>
 8003524:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8003528:	d1ee      	bne.n	8003508 <__ieee754_powf+0x2c>
 800352a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800352e:	0064      	lsls	r4, r4, #1
 8003530:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8003534:	e7e6      	b.n	8003504 <__ieee754_powf+0x28>
 8003536:	2e00      	cmp	r6, #0
 8003538:	da1e      	bge.n	8003578 <__ieee754_powf+0x9c>
 800353a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800353e:	d22b      	bcs.n	8003598 <__ieee754_powf+0xbc>
 8003540:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003544:	d332      	bcc.n	80035ac <__ieee754_powf+0xd0>
 8003546:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800354a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800354e:	fa49 f503 	asr.w	r5, r9, r3
 8003552:	fa05 f303 	lsl.w	r3, r5, r3
 8003556:	454b      	cmp	r3, r9
 8003558:	d126      	bne.n	80035a8 <__ieee754_powf+0xcc>
 800355a:	f005 0501 	and.w	r5, r5, #1
 800355e:	f1c5 0502 	rsb	r5, r5, #2
 8003562:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003566:	d122      	bne.n	80035ae <__ieee754_powf+0xd2>
 8003568:	2c00      	cmp	r4, #0
 800356a:	f280 826f 	bge.w	8003a4c <__ieee754_powf+0x570>
 800356e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003572:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003576:	e7c9      	b.n	800350c <__ieee754_powf+0x30>
 8003578:	2500      	movs	r5, #0
 800357a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800357e:	d1f0      	bne.n	8003562 <__ieee754_powf+0x86>
 8003580:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8003584:	f000 825c 	beq.w	8003a40 <__ieee754_powf+0x564>
 8003588:	d908      	bls.n	800359c <__ieee754_powf+0xc0>
 800358a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80038ec <__ieee754_powf+0x410>
 800358e:	2c00      	cmp	r4, #0
 8003590:	bfa8      	it	ge
 8003592:	eeb0 0a68 	vmovge.f32	s0, s17
 8003596:	e7b9      	b.n	800350c <__ieee754_powf+0x30>
 8003598:	2502      	movs	r5, #2
 800359a:	e7ee      	b.n	800357a <__ieee754_powf+0x9e>
 800359c:	2c00      	cmp	r4, #0
 800359e:	f280 8252 	bge.w	8003a46 <__ieee754_powf+0x56a>
 80035a2:	eeb1 0a68 	vneg.f32	s0, s17
 80035a6:	e7b1      	b.n	800350c <__ieee754_powf+0x30>
 80035a8:	2500      	movs	r5, #0
 80035aa:	e7da      	b.n	8003562 <__ieee754_powf+0x86>
 80035ac:	2500      	movs	r5, #0
 80035ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80035b2:	d102      	bne.n	80035ba <__ieee754_powf+0xde>
 80035b4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80035b8:	e7a8      	b.n	800350c <__ieee754_powf+0x30>
 80035ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80035be:	d109      	bne.n	80035d4 <__ieee754_powf+0xf8>
 80035c0:	2e00      	cmp	r6, #0
 80035c2:	db07      	blt.n	80035d4 <__ieee754_powf+0xf8>
 80035c4:	eeb0 0a48 	vmov.f32	s0, s16
 80035c8:	ecbd 8b02 	vpop	{d8}
 80035cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d0:	f000 bae8 	b.w	8003ba4 <__ieee754_sqrtf>
 80035d4:	eeb0 0a48 	vmov.f32	s0, s16
 80035d8:	f000 fa50 	bl	8003a7c <fabsf>
 80035dc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80035e0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80035e4:	4647      	mov	r7, r8
 80035e6:	d002      	beq.n	80035ee <__ieee754_powf+0x112>
 80035e8:	f1b8 0f00 	cmp.w	r8, #0
 80035ec:	d117      	bne.n	800361e <__ieee754_powf+0x142>
 80035ee:	2c00      	cmp	r4, #0
 80035f0:	bfbc      	itt	lt
 80035f2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80035f6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80035fa:	2e00      	cmp	r6, #0
 80035fc:	da86      	bge.n	800350c <__ieee754_powf+0x30>
 80035fe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8003602:	ea58 0805 	orrs.w	r8, r8, r5
 8003606:	d104      	bne.n	8003612 <__ieee754_powf+0x136>
 8003608:	ee70 7a40 	vsub.f32	s15, s0, s0
 800360c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003610:	e77c      	b.n	800350c <__ieee754_powf+0x30>
 8003612:	2d01      	cmp	r5, #1
 8003614:	f47f af7a 	bne.w	800350c <__ieee754_powf+0x30>
 8003618:	eeb1 0a40 	vneg.f32	s0, s0
 800361c:	e776      	b.n	800350c <__ieee754_powf+0x30>
 800361e:	0ff0      	lsrs	r0, r6, #31
 8003620:	3801      	subs	r0, #1
 8003622:	ea55 0300 	orrs.w	r3, r5, r0
 8003626:	d104      	bne.n	8003632 <__ieee754_powf+0x156>
 8003628:	ee38 8a48 	vsub.f32	s16, s16, s16
 800362c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8003630:	e76c      	b.n	800350c <__ieee754_powf+0x30>
 8003632:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8003636:	d973      	bls.n	8003720 <__ieee754_powf+0x244>
 8003638:	4bad      	ldr	r3, [pc, #692]	@ (80038f0 <__ieee754_powf+0x414>)
 800363a:	4598      	cmp	r8, r3
 800363c:	d808      	bhi.n	8003650 <__ieee754_powf+0x174>
 800363e:	2c00      	cmp	r4, #0
 8003640:	da0b      	bge.n	800365a <__ieee754_powf+0x17e>
 8003642:	2000      	movs	r0, #0
 8003644:	ecbd 8b02 	vpop	{d8}
 8003648:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800364c:	f000 baa4 	b.w	8003b98 <__math_oflowf>
 8003650:	4ba8      	ldr	r3, [pc, #672]	@ (80038f4 <__ieee754_powf+0x418>)
 8003652:	4598      	cmp	r8, r3
 8003654:	d908      	bls.n	8003668 <__ieee754_powf+0x18c>
 8003656:	2c00      	cmp	r4, #0
 8003658:	dcf3      	bgt.n	8003642 <__ieee754_powf+0x166>
 800365a:	2000      	movs	r0, #0
 800365c:	ecbd 8b02 	vpop	{d8}
 8003660:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003664:	f000 ba92 	b.w	8003b8c <__math_uflowf>
 8003668:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800366c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003670:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80038f8 <__ieee754_powf+0x41c>
 8003674:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8003678:	eee0 6a67 	vfms.f32	s13, s0, s15
 800367c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003680:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8003684:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800368c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80038fc <__ieee754_powf+0x420>
 8003690:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003694:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8003900 <__ieee754_powf+0x424>
 8003698:	eee0 7a07 	vfma.f32	s15, s0, s14
 800369c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8003904 <__ieee754_powf+0x428>
 80036a0:	eef0 6a67 	vmov.f32	s13, s15
 80036a4:	eee0 6a07 	vfma.f32	s13, s0, s14
 80036a8:	ee16 3a90 	vmov	r3, s13
 80036ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80036b0:	f023 030f 	bic.w	r3, r3, #15
 80036b4:	ee06 3a90 	vmov	s13, r3
 80036b8:	eee0 6a47 	vfms.f32	s13, s0, s14
 80036bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80036c0:	3d01      	subs	r5, #1
 80036c2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80036c6:	4305      	orrs	r5, r0
 80036c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036cc:	f024 040f 	bic.w	r4, r4, #15
 80036d0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80036d4:	bf18      	it	ne
 80036d6:	eeb0 8a47 	vmovne.f32	s16, s14
 80036da:	ee07 4a10 	vmov	s14, r4
 80036de:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80036e2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eee7 0a27 	vfma.f32	s1, s14, s15
 80036ee:	ee07 4a10 	vmov	s14, r4
 80036f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80036fa:	ee17 1a10 	vmov	r1, s14
 80036fe:	2900      	cmp	r1, #0
 8003700:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003704:	f340 80dd 	ble.w	80038c2 <__ieee754_powf+0x3e6>
 8003708:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800370c:	f240 80ca 	bls.w	80038a4 <__ieee754_powf+0x3c8>
 8003710:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	bf4c      	ite	mi
 800371a:	2001      	movmi	r0, #1
 800371c:	2000      	movpl	r0, #0
 800371e:	e791      	b.n	8003644 <__ieee754_powf+0x168>
 8003720:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003724:	bf01      	itttt	eq
 8003726:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8003908 <__ieee754_powf+0x42c>
 800372a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800372e:	f06f 0317 	mvneq.w	r3, #23
 8003732:	ee17 7a90 	vmoveq	r7, s15
 8003736:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800373a:	bf18      	it	ne
 800373c:	2300      	movne	r3, #0
 800373e:	3a7f      	subs	r2, #127	@ 0x7f
 8003740:	441a      	add	r2, r3
 8003742:	4b72      	ldr	r3, [pc, #456]	@ (800390c <__ieee754_powf+0x430>)
 8003744:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8003748:	429f      	cmp	r7, r3
 800374a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800374e:	dd06      	ble.n	800375e <__ieee754_powf+0x282>
 8003750:	4b6f      	ldr	r3, [pc, #444]	@ (8003910 <__ieee754_powf+0x434>)
 8003752:	429f      	cmp	r7, r3
 8003754:	f340 80a4 	ble.w	80038a0 <__ieee754_powf+0x3c4>
 8003758:	3201      	adds	r2, #1
 800375a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800375e:	2600      	movs	r6, #0
 8003760:	4b6c      	ldr	r3, [pc, #432]	@ (8003914 <__ieee754_powf+0x438>)
 8003762:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003766:	ee07 1a10 	vmov	s14, r1
 800376a:	edd3 5a00 	vldr	s11, [r3]
 800376e:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <__ieee754_powf+0x43c>)
 8003770:	ee75 7a87 	vadd.f32	s15, s11, s14
 8003774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003778:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800377c:	1049      	asrs	r1, r1, #1
 800377e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8003782:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8003786:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800378a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800378e:	ee07 1a90 	vmov	s15, r1
 8003792:	ee26 5a24 	vmul.f32	s10, s12, s9
 8003796:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800379a:	ee15 7a10 	vmov	r7, s10
 800379e:	401f      	ands	r7, r3
 80037a0:	ee06 7a90 	vmov	s13, r7
 80037a4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80037a8:	ee37 7a65 	vsub.f32	s14, s14, s11
 80037ac:	ee65 7a05 	vmul.f32	s15, s10, s10
 80037b0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80037b4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800391c <__ieee754_powf+0x440>
 80037b8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003920 <__ieee754_powf+0x444>
 80037bc:	eee7 5a87 	vfma.f32	s11, s15, s14
 80037c0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8003924 <__ieee754_powf+0x448>
 80037c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80037c8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80038f8 <__ieee754_powf+0x41c>
 80037cc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80037d0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003928 <__ieee754_powf+0x44c>
 80037d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80037d8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800392c <__ieee754_powf+0x450>
 80037dc:	ee26 6a24 	vmul.f32	s12, s12, s9
 80037e0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80037e4:	ee35 7a26 	vadd.f32	s14, s10, s13
 80037e8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80037ec:	ee27 7a06 	vmul.f32	s14, s14, s12
 80037f0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80037f4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80037f8:	eef0 5a67 	vmov.f32	s11, s15
 80037fc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8003800:	ee75 5a87 	vadd.f32	s11, s11, s14
 8003804:	ee15 1a90 	vmov	r1, s11
 8003808:	4019      	ands	r1, r3
 800380a:	ee05 1a90 	vmov	s11, r1
 800380e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003812:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8003816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800381e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003822:	eeb0 6a67 	vmov.f32	s12, s15
 8003826:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800382a:	ee16 1a10 	vmov	r1, s12
 800382e:	4019      	ands	r1, r3
 8003830:	ee06 1a10 	vmov	s12, r1
 8003834:	eeb0 7a46 	vmov.f32	s14, s12
 8003838:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800383c:	493c      	ldr	r1, [pc, #240]	@ (8003930 <__ieee754_powf+0x454>)
 800383e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003846:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003934 <__ieee754_powf+0x458>
 800384a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8003938 <__ieee754_powf+0x45c>
 800384e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003852:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800393c <__ieee754_powf+0x460>
 8003856:	eee6 7a07 	vfma.f32	s15, s12, s14
 800385a:	ed91 7a00 	vldr	s14, [r1]
 800385e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003862:	ee07 2a10 	vmov	s14, r2
 8003866:	eef0 6a67 	vmov.f32	s13, s15
 800386a:	4a35      	ldr	r2, [pc, #212]	@ (8003940 <__ieee754_powf+0x464>)
 800386c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003870:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8003874:	ed92 5a00 	vldr	s10, [r2]
 8003878:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800387c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003880:	ee76 6a87 	vadd.f32	s13, s13, s14
 8003884:	ee16 2a90 	vmov	r2, s13
 8003888:	4013      	ands	r3, r2
 800388a:	ee06 3a90 	vmov	s13, r3
 800388e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003892:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003896:	eea6 7a65 	vfms.f32	s14, s12, s11
 800389a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800389e:	e70f      	b.n	80036c0 <__ieee754_powf+0x1e4>
 80038a0:	2601      	movs	r6, #1
 80038a2:	e75d      	b.n	8003760 <__ieee754_powf+0x284>
 80038a4:	d152      	bne.n	800394c <__ieee754_powf+0x470>
 80038a6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003944 <__ieee754_powf+0x468>
 80038aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038ae:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80038b2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80038b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ba:	f73f af29 	bgt.w	8003710 <__ieee754_powf+0x234>
 80038be:	2386      	movs	r3, #134	@ 0x86
 80038c0:	e048      	b.n	8003954 <__ieee754_powf+0x478>
 80038c2:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <__ieee754_powf+0x46c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d907      	bls.n	80038d8 <__ieee754_powf+0x3fc>
 80038c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	bf4c      	ite	mi
 80038d2:	2001      	movmi	r0, #1
 80038d4:	2000      	movpl	r0, #0
 80038d6:	e6c1      	b.n	800365c <__ieee754_powf+0x180>
 80038d8:	d138      	bne.n	800394c <__ieee754_powf+0x470>
 80038da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038de:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80038e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e6:	dbea      	blt.n	80038be <__ieee754_powf+0x3e2>
 80038e8:	e7ee      	b.n	80038c8 <__ieee754_powf+0x3ec>
 80038ea:	bf00      	nop
 80038ec:	00000000 	.word	0x00000000
 80038f0:	3f7ffff3 	.word	0x3f7ffff3
 80038f4:	3f800007 	.word	0x3f800007
 80038f8:	3eaaaaab 	.word	0x3eaaaaab
 80038fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8003900:	36eca570 	.word	0x36eca570
 8003904:	3fb8aa00 	.word	0x3fb8aa00
 8003908:	4b800000 	.word	0x4b800000
 800390c:	001cc471 	.word	0x001cc471
 8003910:	005db3d6 	.word	0x005db3d6
 8003914:	080040a8 	.word	0x080040a8
 8003918:	fffff000 	.word	0xfffff000
 800391c:	3e6c3255 	.word	0x3e6c3255
 8003920:	3e53f142 	.word	0x3e53f142
 8003924:	3e8ba305 	.word	0x3e8ba305
 8003928:	3edb6db7 	.word	0x3edb6db7
 800392c:	3f19999a 	.word	0x3f19999a
 8003930:	08004098 	.word	0x08004098
 8003934:	3f76384f 	.word	0x3f76384f
 8003938:	3f763800 	.word	0x3f763800
 800393c:	369dc3a0 	.word	0x369dc3a0
 8003940:	080040a0 	.word	0x080040a0
 8003944:	3338aa3c 	.word	0x3338aa3c
 8003948:	43160000 	.word	0x43160000
 800394c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8003950:	d971      	bls.n	8003a36 <__ieee754_powf+0x55a>
 8003952:	15db      	asrs	r3, r3, #23
 8003954:	3b7e      	subs	r3, #126	@ 0x7e
 8003956:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800395a:	4118      	asrs	r0, r3
 800395c:	4408      	add	r0, r1
 800395e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003962:	4a3c      	ldr	r2, [pc, #240]	@ (8003a54 <__ieee754_powf+0x578>)
 8003964:	3b7f      	subs	r3, #127	@ 0x7f
 8003966:	411a      	asrs	r2, r3
 8003968:	4002      	ands	r2, r0
 800396a:	ee07 2a10 	vmov	s14, r2
 800396e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8003972:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8003976:	f1c3 0317 	rsb	r3, r3, #23
 800397a:	4118      	asrs	r0, r3
 800397c:	2900      	cmp	r1, #0
 800397e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003982:	bfb8      	it	lt
 8003984:	4240      	neglt	r0, r0
 8003986:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800398a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003a58 <__ieee754_powf+0x57c>
 800398e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8003a5c <__ieee754_powf+0x580>
 8003992:	ee17 3a10 	vmov	r3, s14
 8003996:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800399a:	f023 030f 	bic.w	r3, r3, #15
 800399e:	ee07 3a10 	vmov	s14, r3
 80039a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80039aa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80039ae:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8003a60 <__ieee754_powf+0x584>
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80039ba:	eef0 6a67 	vmov.f32	s13, s15
 80039be:	eee7 6a06 	vfma.f32	s13, s14, s12
 80039c2:	eef0 5a66 	vmov.f32	s11, s13
 80039c6:	eee7 5a46 	vfms.f32	s11, s14, s12
 80039ca:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80039ce:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80039d2:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8003a64 <__ieee754_powf+0x588>
 80039d6:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8003a68 <__ieee754_powf+0x58c>
 80039da:	eea7 6a25 	vfma.f32	s12, s14, s11
 80039de:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8003a6c <__ieee754_powf+0x590>
 80039e2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80039e6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8003a70 <__ieee754_powf+0x594>
 80039ea:	eea5 6a87 	vfma.f32	s12, s11, s14
 80039ee:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8003a74 <__ieee754_powf+0x598>
 80039f2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80039f6:	eeb0 6a66 	vmov.f32	s12, s13
 80039fa:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80039fe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003a02:	ee66 5a86 	vmul.f32	s11, s13, s12
 8003a06:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003a0a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8003a0e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8003a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003a1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003a1e:	ee10 3a10 	vmov	r3, s0
 8003a22:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8003a26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a2a:	da06      	bge.n	8003a3a <__ieee754_powf+0x55e>
 8003a2c:	f000 f82e 	bl	8003a8c <scalbnf>
 8003a30:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003a34:	e56a      	b.n	800350c <__ieee754_powf+0x30>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e7a5      	b.n	8003986 <__ieee754_powf+0x4aa>
 8003a3a:	ee00 3a10 	vmov	s0, r3
 8003a3e:	e7f7      	b.n	8003a30 <__ieee754_powf+0x554>
 8003a40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003a44:	e562      	b.n	800350c <__ieee754_powf+0x30>
 8003a46:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003a78 <__ieee754_powf+0x59c>
 8003a4a:	e55f      	b.n	800350c <__ieee754_powf+0x30>
 8003a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a50:	e55c      	b.n	800350c <__ieee754_powf+0x30>
 8003a52:	bf00      	nop
 8003a54:	ff800000 	.word	0xff800000
 8003a58:	3f317218 	.word	0x3f317218
 8003a5c:	3f317200 	.word	0x3f317200
 8003a60:	35bfbe8c 	.word	0x35bfbe8c
 8003a64:	b5ddea0e 	.word	0xb5ddea0e
 8003a68:	3331bb4c 	.word	0x3331bb4c
 8003a6c:	388ab355 	.word	0x388ab355
 8003a70:	bb360b61 	.word	0xbb360b61
 8003a74:	3e2aaaab 	.word	0x3e2aaaab
 8003a78:	00000000 	.word	0x00000000

08003a7c <fabsf>:
 8003a7c:	ee10 3a10 	vmov	r3, s0
 8003a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a84:	ee00 3a10 	vmov	s0, r3
 8003a88:	4770      	bx	lr
	...

08003a8c <scalbnf>:
 8003a8c:	ee10 3a10 	vmov	r3, s0
 8003a90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003a94:	d02b      	beq.n	8003aee <scalbnf+0x62>
 8003a96:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003a9a:	d302      	bcc.n	8003aa2 <scalbnf+0x16>
 8003a9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003aa0:	4770      	bx	lr
 8003aa2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8003aa6:	d123      	bne.n	8003af0 <scalbnf+0x64>
 8003aa8:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <scalbnf+0xb0>)
 8003aaa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003b40 <scalbnf+0xb4>
 8003aae:	4298      	cmp	r0, r3
 8003ab0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003ab4:	db17      	blt.n	8003ae6 <scalbnf+0x5a>
 8003ab6:	ee10 3a10 	vmov	r3, s0
 8003aba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003abe:	3a19      	subs	r2, #25
 8003ac0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003ac4:	4288      	cmp	r0, r1
 8003ac6:	dd15      	ble.n	8003af4 <scalbnf+0x68>
 8003ac8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003b44 <scalbnf+0xb8>
 8003acc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003b48 <scalbnf+0xbc>
 8003ad0:	ee10 3a10 	vmov	r3, s0
 8003ad4:	eeb0 7a67 	vmov.f32	s14, s15
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bfb8      	it	lt
 8003adc:	eef0 7a66 	vmovlt.f32	s15, s13
 8003ae0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003ae4:	4770      	bx	lr
 8003ae6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003b4c <scalbnf+0xc0>
 8003aea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003aee:	4770      	bx	lr
 8003af0:	0dd2      	lsrs	r2, r2, #23
 8003af2:	e7e5      	b.n	8003ac0 <scalbnf+0x34>
 8003af4:	4410      	add	r0, r2
 8003af6:	28fe      	cmp	r0, #254	@ 0xfe
 8003af8:	dce6      	bgt.n	8003ac8 <scalbnf+0x3c>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	dd06      	ble.n	8003b0c <scalbnf+0x80>
 8003afe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003b02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003b06:	ee00 3a10 	vmov	s0, r3
 8003b0a:	4770      	bx	lr
 8003b0c:	f110 0f16 	cmn.w	r0, #22
 8003b10:	da09      	bge.n	8003b26 <scalbnf+0x9a>
 8003b12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003b4c <scalbnf+0xc0>
 8003b16:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003b50 <scalbnf+0xc4>
 8003b1a:	ee10 3a10 	vmov	r3, s0
 8003b1e:	eeb0 7a67 	vmov.f32	s14, s15
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	e7d9      	b.n	8003ada <scalbnf+0x4e>
 8003b26:	3019      	adds	r0, #25
 8003b28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003b2c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003b30:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003b54 <scalbnf+0xc8>
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	e7d7      	b.n	8003aea <scalbnf+0x5e>
 8003b3a:	bf00      	nop
 8003b3c:	ffff3cb0 	.word	0xffff3cb0
 8003b40:	4c000000 	.word	0x4c000000
 8003b44:	7149f2ca 	.word	0x7149f2ca
 8003b48:	f149f2ca 	.word	0xf149f2ca
 8003b4c:	0da24260 	.word	0x0da24260
 8003b50:	8da24260 	.word	0x8da24260
 8003b54:	33000000 	.word	0x33000000

08003b58 <with_errnof>:
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	ed2d 8b02 	vpush	{d8}
 8003b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8003b62:	4604      	mov	r4, r0
 8003b64:	f7fe ff54 	bl	8002a10 <__errno>
 8003b68:	eeb0 0a48 	vmov.f32	s0, s16
 8003b6c:	ecbd 8b02 	vpop	{d8}
 8003b70:	6004      	str	r4, [r0, #0]
 8003b72:	bd10      	pop	{r4, pc}

08003b74 <xflowf>:
 8003b74:	b130      	cbz	r0, 8003b84 <xflowf+0x10>
 8003b76:	eef1 7a40 	vneg.f32	s15, s0
 8003b7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003b7e:	2022      	movs	r0, #34	@ 0x22
 8003b80:	f7ff bfea 	b.w	8003b58 <with_errnof>
 8003b84:	eef0 7a40 	vmov.f32	s15, s0
 8003b88:	e7f7      	b.n	8003b7a <xflowf+0x6>
	...

08003b8c <__math_uflowf>:
 8003b8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003b94 <__math_uflowf+0x8>
 8003b90:	f7ff bff0 	b.w	8003b74 <xflowf>
 8003b94:	10000000 	.word	0x10000000

08003b98 <__math_oflowf>:
 8003b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003ba0 <__math_oflowf+0x8>
 8003b9c:	f7ff bfea 	b.w	8003b74 <xflowf>
 8003ba0:	70000000 	.word	0x70000000

08003ba4 <__ieee754_sqrtf>:
 8003ba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003ba8:	4770      	bx	lr
	...

08003bac <__ieee754_logf>:
 8003bac:	ee10 3a10 	vmov	r3, s0
 8003bb0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003bb4:	d106      	bne.n	8003bc4 <__ieee754_logf+0x18>
 8003bb6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003d50 <__ieee754_logf+0x1a4>
 8003bba:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8003d54 <__ieee754_logf+0x1a8>
 8003bbe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003bc2:	4770      	bx	lr
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	da02      	bge.n	8003bd0 <__ieee754_logf+0x24>
 8003bca:	ee30 7a40 	vsub.f32	s14, s0, s0
 8003bce:	e7f4      	b.n	8003bba <__ieee754_logf+0xe>
 8003bd0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003bd4:	db02      	blt.n	8003bdc <__ieee754_logf+0x30>
 8003bd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003bda:	4770      	bx	lr
 8003bdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003be0:	bfb8      	it	lt
 8003be2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8003d58 <__ieee754_logf+0x1ac>
 8003be6:	485d      	ldr	r0, [pc, #372]	@ (8003d5c <__ieee754_logf+0x1b0>)
 8003be8:	bfbe      	ittt	lt
 8003bea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8003bee:	f06f 0118 	mvnlt.w	r1, #24
 8003bf2:	ee17 2a90 	vmovlt	r2, s15
 8003bf6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8003bfa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8003bfe:	4410      	add	r0, r2
 8003c00:	bfa8      	it	ge
 8003c02:	2100      	movge	r1, #0
 8003c04:	3b7f      	subs	r3, #127	@ 0x7f
 8003c06:	440b      	add	r3, r1
 8003c08:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8003c0c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8003c10:	4311      	orrs	r1, r2
 8003c12:	ee00 1a10 	vmov	s0, r1
 8003c16:	4952      	ldr	r1, [pc, #328]	@ (8003d60 <__ieee754_logf+0x1b4>)
 8003c18:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8003c1c:	f102 000f 	add.w	r0, r2, #15
 8003c20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003c24:	4001      	ands	r1, r0
 8003c26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003c2a:	bb89      	cbnz	r1, 8003c90 <__ieee754_logf+0xe4>
 8003c2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	d10f      	bne.n	8003c56 <__ieee754_logf+0xaa>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <__ieee754_logf+0x19e>
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8003d64 <__ieee754_logf+0x1b8>
 8003c44:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003d68 <__ieee754_logf+0x1bc>
 8003c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003c50:	eea7 0a87 	vfma.f32	s0, s15, s14
 8003c54:	4770      	bx	lr
 8003c56:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003d6c <__ieee754_logf+0x1c0>
 8003c5a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003c5e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8003c62:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c6a:	b913      	cbnz	r3, 8003c72 <__ieee754_logf+0xc6>
 8003c6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003c70:	4770      	bx	lr
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8003d64 <__ieee754_logf+0x1b8>
 8003c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8003c82:	ee37 0a40 	vsub.f32	s0, s14, s0
 8003c86:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8003d68 <__ieee754_logf+0x1bc>
 8003c8a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8003c8e:	4770      	bx	lr
 8003c90:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8003c94:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003c98:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8003d70 <__ieee754_logf+0x1c4>
 8003c9c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8003d74 <__ieee754_logf+0x1c8>
 8003ca0:	4935      	ldr	r1, [pc, #212]	@ (8003d78 <__ieee754_logf+0x1cc>)
 8003ca2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8003ca6:	4411      	add	r1, r2
 8003ca8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8003cac:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	ee26 5a06 	vmul.f32	s10, s12, s12
 8003cbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cc0:	ee25 7a05 	vmul.f32	s14, s10, s10
 8003cc4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8003d7c <__ieee754_logf+0x1d0>
 8003cc8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003ccc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003d80 <__ieee754_logf+0x1d4>
 8003cd0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003cd4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003d84 <__ieee754_logf+0x1d8>
 8003cd8:	eee7 7a24 	vfma.f32	s15, s14, s9
 8003cdc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8003d88 <__ieee754_logf+0x1dc>
 8003ce0:	eee7 4a87 	vfma.f32	s9, s15, s14
 8003ce4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003d8c <__ieee754_logf+0x1e0>
 8003ce8:	eee4 7a87 	vfma.f32	s15, s9, s14
 8003cec:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003cf0:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003cf4:	dd1a      	ble.n	8003d2c <__ieee754_logf+0x180>
 8003cf6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003cfa:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003cfe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d0a:	b913      	cbnz	r3, 8003d12 <__ieee754_logf+0x166>
 8003d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d10:	e7ac      	b.n	8003c6c <__ieee754_logf+0xc0>
 8003d12:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8003d64 <__ieee754_logf+0x1b8>
 8003d16:	eee6 7a86 	vfma.f32	s15, s13, s12
 8003d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d1e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8003d22:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8003d68 <__ieee754_logf+0x1bc>
 8003d26:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8003d2a:	4770      	bx	lr
 8003d2c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003d30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d34:	b913      	cbnz	r3, 8003d3c <__ieee754_logf+0x190>
 8003d36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003d3a:	4770      	bx	lr
 8003d3c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003d64 <__ieee754_logf+0x1b8>
 8003d40:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8003d44:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003d48:	e7eb      	b.n	8003d22 <__ieee754_logf+0x176>
 8003d4a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8003d54 <__ieee754_logf+0x1a8>
 8003d4e:	4770      	bx	lr
 8003d50:	cc000000 	.word	0xcc000000
 8003d54:	00000000 	.word	0x00000000
 8003d58:	4c000000 	.word	0x4c000000
 8003d5c:	004afb20 	.word	0x004afb20
 8003d60:	007ffff0 	.word	0x007ffff0
 8003d64:	3717f7d1 	.word	0x3717f7d1
 8003d68:	3f317180 	.word	0x3f317180
 8003d6c:	3eaaaaab 	.word	0x3eaaaaab
 8003d70:	3e1cd04f 	.word	0x3e1cd04f
 8003d74:	3e178897 	.word	0x3e178897
 8003d78:	ffcf5c30 	.word	0xffcf5c30
 8003d7c:	3e638e29 	.word	0x3e638e29
 8003d80:	3ecccccd 	.word	0x3ecccccd
 8003d84:	3e3a3325 	.word	0x3e3a3325
 8003d88:	3e924925 	.word	0x3e924925
 8003d8c:	3f2aaaab 	.word	0x3f2aaaab

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
