
BTL_nhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006160  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006300  08006300  00007300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f8  080066f8  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006700  08006700  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006708  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001d8  080068e0  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080068e0  00008358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004661  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f1  00000000  00000000  0000c869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  0000da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003d3  00000000  00000000  0000dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001567c  00000000  00000000  0000e37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000063a2  00000000  00000000  000239f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849a6  00000000  00000000  00029d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae73f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  000ae784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000b0eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062e8 	.word	0x080062e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080062e8 	.word	0x080062e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <delay_ms>:
void lcd_gotoxy(uint8_t col, uint8_t row);



void delay_ms(uint32_t ms)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) __NOP();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e003      	b.n	8000f5e <delay_ms+0x16>
 8000f56:	bf00      	nop
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d3f3      	bcc.n	8000f56 <delay_ms+0xe>
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <I2C1_Init>:

void I2C1_Init(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <I2C1_Init+0x98>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a23      	ldr	r2, [pc, #140]	@ (8001014 <I2C1_Init+0x98>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <I2C1_Init+0x98>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <I2C1_Init+0x98>)
 8000f92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER &= ~(GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <I2C1_Init+0x9c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <I2C1_Init+0x9c>)
 8000f9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000fa2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2 << GPIO_MODER_MODE6_Pos) | (2 << GPIO_MODER_MODE7_Pos); // Alternate function
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <I2C1_Init+0x9c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <I2C1_Init+0x9c>)
 8000faa:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000fae:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos) | (4 << GPIO_AFRL_AFSEL7_Pos); // AF4 for I2C1
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <I2C1_Init+0x9c>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <I2C1_Init+0x9c>)
 8000fb6:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000fba:	6213      	str	r3, [r2, #32]
    GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <I2C1_Init+0x9c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a15      	ldr	r2, [pc, #84]	@ (8001018 <I2C1_Init+0x9c>)
 8000fc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fc6:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk);
 8000fc8:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <I2C1_Init+0x9c>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <I2C1_Init+0x9c>)
 8000fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000fd2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << GPIO_PUPDR_PUPD6_Pos) | (1 << GPIO_PUPDR_PUPD7_Pos); // Pull-up
 8000fd4:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <I2C1_Init+0x9c>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <I2C1_Init+0x9c>)
 8000fda:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000fde:	60d3      	str	r3, [r2, #12]

    I2C1->CR1 &= ~I2C_CR1_PE;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <I2C1_Init+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <I2C1_Init+0xa0>)
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 40;            // APB1 = 42 MHz
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <I2C1_Init+0xa0>)
 8000fee:	2228      	movs	r2, #40	@ 0x28
 8000ff0:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 200;           // Chu kỳ = 42MHz / (2*CCR) = 100kHz
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <I2C1_Init+0xa0>)
 8000ff4:	22c8      	movs	r2, #200	@ 0xc8
 8000ff6:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 41;          // = (1000ns / T) + 1 = (1000ns / 23.81ns) + 1
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <I2C1_Init+0xa0>)
 8000ffa:	2229      	movs	r2, #41	@ 0x29
 8000ffc:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <I2C1_Init+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a06      	ldr	r2, [pc, #24]	@ (800101c <I2C1_Init+0xa0>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40005400 	.word	0x40005400

08001020 <I2C1_Write>:


void I2C1_Write(uint8_t addr, uint8_t *data, uint8_t len)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <I2C1_Write+0x9c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <I2C1_Write+0x9c>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 800103c:	bf00      	nop
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <I2C1_Write+0x9c>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <I2C1_Write+0x1e>
    I2C1->DR = addr & ~0x01;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <I2C1_Write+0x9c>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001054:	bf00      	nop
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <I2C1_Write+0x9c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f9      	beq.n	8001056 <I2C1_Write+0x36>
    (void)I2C1->SR2;
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <I2C1_Write+0x9c>)
 8001064:	699b      	ldr	r3, [r3, #24]

    for (int i = 0; i < len; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e00f      	b.n	800108c <I2C1_Write+0x6c>
        while (!(I2C1->SR1 & I2C_SR1_TXE));
 800106c:	bf00      	nop
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <I2C1_Write+0x9c>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f9      	beq.n	800106e <I2C1_Write+0x4e>
        I2C1->DR = data[i];
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <I2C1_Write+0x9c>)
 8001084:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < len; i++) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	dbeb      	blt.n	800106c <I2C1_Write+0x4c>
    }

    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8001094:	bf00      	nop
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <I2C1_Write+0x9c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f9      	beq.n	8001096 <I2C1_Write+0x76>
    I2C1->CR1 |= I2C_CR1_STOP;
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <I2C1_Write+0x9c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <I2C1_Write+0x9c>)
 80010a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40005400 	.word	0x40005400

080010c0 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    char u = cmd & 0xF0;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	73fb      	strb	r3, [r7, #15]
    char l = (cmd << 4) & 0xF0;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[4] = {
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f043 030c 	orr.w	r3, r3, #12
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	723b      	strb	r3, [r7, #8]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	727b      	strb	r3, [r7, #9]
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	f043 030c 	orr.w	r3, r3, #12
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	72bb      	strb	r3, [r7, #10]
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	72fb      	strb	r3, [r7, #11]
        u | 0x0C, u | 0x08,
        l | 0x0C, l | 0x08
    };
    I2C1_Write(LCD_ADDR, data, 4);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2204      	movs	r2, #4
 8001106:	4619      	mov	r1, r3
 8001108:	204e      	movs	r0, #78	@ 0x4e
 800110a:	f7ff ff89 	bl	8001020 <I2C1_Write>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <lcd_send_data>:

void lcd_send_data(char data_char)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
    char u = data_char & 0xF0;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f023 030f 	bic.w	r3, r3, #15
 8001126:	73fb      	strb	r3, [r7, #15]
    char l = (data_char << 4) & 0xF0;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[4] = {
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f043 030d 	orr.w	r3, r3, #13
 8001134:	b2db      	uxtb	r3, r3
 8001136:	723b      	strb	r3, [r7, #8]
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	f043 0309 	orr.w	r3, r3, #9
 800113e:	b2db      	uxtb	r3, r3
 8001140:	727b      	strb	r3, [r7, #9]
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	f043 030d 	orr.w	r3, r3, #13
 8001148:	b2db      	uxtb	r3, r3
 800114a:	72bb      	strb	r3, [r7, #10]
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	f043 0309 	orr.w	r3, r3, #9
 8001152:	b2db      	uxtb	r3, r3
 8001154:	72fb      	strb	r3, [r7, #11]
        u | 0x0D, u | 0x09,
        l | 0x0D, l | 0x09
    };
    I2C1_Write(LCD_ADDR, data, 4);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2204      	movs	r2, #4
 800115c:	4619      	mov	r1, r3
 800115e:	204e      	movs	r0, #78	@ 0x4e
 8001160:	f7ff ff5e 	bl	8001020 <I2C1_Write>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <lcd_init>:

void lcd_init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    delay_ms(50);
 8001170:	2032      	movs	r0, #50	@ 0x32
 8001172:	f7ff fee9 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x30); delay_ms(5);
 8001176:	2030      	movs	r0, #48	@ 0x30
 8001178:	f7ff ffa2 	bl	80010c0 <lcd_send_cmd>
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff fee3 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x30); delay_ms(1);
 8001182:	2030      	movs	r0, #48	@ 0x30
 8001184:	f7ff ff9c 	bl	80010c0 <lcd_send_cmd>
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff fedd 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x30); delay_ms(10);
 800118e:	2030      	movs	r0, #48	@ 0x30
 8001190:	f7ff ff96 	bl	80010c0 <lcd_send_cmd>
 8001194:	200a      	movs	r0, #10
 8001196:	f7ff fed7 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x20); delay_ms(10);
 800119a:	2020      	movs	r0, #32
 800119c:	f7ff ff90 	bl	80010c0 <lcd_send_cmd>
 80011a0:	200a      	movs	r0, #10
 80011a2:	f7ff fed1 	bl	8000f48 <delay_ms>

    lcd_send_cmd(0x28); delay_ms(1);  // Function set
 80011a6:	2028      	movs	r0, #40	@ 0x28
 80011a8:	f7ff ff8a 	bl	80010c0 <lcd_send_cmd>
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fecb 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x08); delay_ms(1);  // Display off
 80011b2:	2008      	movs	r0, #8
 80011b4:	f7ff ff84 	bl	80010c0 <lcd_send_cmd>
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fec5 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x01); delay_ms(2);  // Clear
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ff7e 	bl	80010c0 <lcd_send_cmd>
 80011c4:	2002      	movs	r0, #2
 80011c6:	f7ff febf 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x06); delay_ms(1);  // Entry mode
 80011ca:	2006      	movs	r0, #6
 80011cc:	f7ff ff78 	bl	80010c0 <lcd_send_cmd>
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff feb9 	bl	8000f48 <delay_ms>
    lcd_send_cmd(0x0C); delay_ms(1);  // Display on
 80011d6:	200c      	movs	r0, #12
 80011d8:	f7ff ff72 	bl	80010c0 <lcd_send_cmd>
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff feb3 	bl	8000f48 <delay_ms>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <lcd_puts>:

void lcd_puts(char *str)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
    while (*str) {
 80011ee:	e006      	b.n	80011fe <lcd_puts+0x18>
        lcd_send_data(*str++);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff8c 	bl	8001116 <lcd_send_data>
    while (*str) {
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f4      	bne.n	80011f0 <lcd_puts+0xa>
    }
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <lcd_gotoxy>:

void lcd_gotoxy(uint8_t col, uint8_t row)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	4613      	mov	r3, r2
 800121e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;

    switch (row)
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d81f      	bhi.n	8001266 <lcd_gotoxy+0x56>
 8001226:	a201      	add	r2, pc, #4	@ (adr r2, 800122c <lcd_gotoxy+0x1c>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	0800123d 	.word	0x0800123d
 8001230:	08001245 	.word	0x08001245
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001255 	.word	0x08001255
    {
        case 0: address = 0x80 + col; break;  // Dòng 1
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	3b80      	subs	r3, #128	@ 0x80
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e00b      	b.n	800125c <lcd_gotoxy+0x4c>
        case 1: address = 0xC0 + col; break;  // Dòng 2
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	3b40      	subs	r3, #64	@ 0x40
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e007      	b.n	800125c <lcd_gotoxy+0x4c>
case 2: address = 0x94 + col; break;  // Dòng 3
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b6c      	subs	r3, #108	@ 0x6c
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e003      	b.n	800125c <lcd_gotoxy+0x4c>
        case 3: address = 0xD4 + col; break;  // Dòng 4
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	3b2c      	subs	r3, #44	@ 0x2c
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	bf00      	nop
        default: return;  // Sai row thì không gửi lệnh
    }

    lcd_send_cmd(address);  // Gửi lệnh set DDRAM address
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff2e 	bl	80010c0 <lcd_send_cmd>
 8001264:	e000      	b.n	8001268 <lcd_gotoxy+0x58>
        default: return;  // Sai row thì không gửi lệnh
 8001266:	bf00      	nop
}
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	@ (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db12      	blt.n	80012e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <__NVIC_DisableIRQ+0x44>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	3320      	adds	r3, #32
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012d8:	f3bf 8f4f 	dsb	sy
}
 80012dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012de:	f3bf 8f6f 	isb	sy
}
 80012e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	@ (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	@ (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <OnOffSwitch_Init>:
 * hàm cấu hình switch 1 : on - off
 * cấu hình pin PA1 : mode input
 * điện trở pull-up ngoài.
 * cấu hình ngắt sườn xuống.
 */
void OnOffSwitch_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <OnOffSwitch_Init+0x70>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <OnOffSwitch_Init+0x70>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3U << (1 * 2));           // Input mode.
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <OnOffSwitch_Init+0x74>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <OnOffSwitch_Init+0x74>)
 800135e:	f023 030c 	bic.w	r3, r3, #12
 8001362:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3U << (1 * 2));           // Clear.
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <OnOffSwitch_Init+0x74>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <OnOffSwitch_Init+0x74>)
 800136a:	f023 030c 	bic.w	r3, r3, #12
 800136e:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		// clock cho ngắt.
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <OnOffSwitch_Init+0x70>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001374:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <OnOffSwitch_Init+0x70>)
 8001376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137a:	6453      	str	r3, [r2, #68]	@ 0x44

	SYSCFG->EXTICR[0] &= ~(0xF << (1 * 4));     // EXTI1 -> PA1.
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <OnOffSwitch_Init+0x78>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <OnOffSwitch_Init+0x78>)
 8001382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001386:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= (1U << 1);						// Unmask EXTI1.
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <OnOffSwitch_Init+0x7c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <OnOffSwitch_Init+0x7c>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= (1U << 1);           			// ngắt sườn xuống.
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <OnOffSwitch_Init+0x7c>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <OnOffSwitch_Init+0x7c>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1U << 1);					// không ngắt sườn lên.
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <OnOffSwitch_Init+0x7c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <OnOffSwitch_Init+0x7c>)
 80013a6:	f023 0302 	bic.w	r3, r3, #2
 80013aa:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI1_IRQn);					// Enable EXTI1 interrupt in NVIC.
 80013ac:	2007      	movs	r0, #7
 80013ae:	f7ff ff5f 	bl	8001270 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <ResetSwitch_Init>:
 * hàm cấu hình switch 2 : reset
 * cấu hình pin PA2 : mode input
 * điện trở pull-up ngoài.
 * cấu hình ngắt sườn xuống.
 */
void ResetSwitch_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <ResetSwitch_Init+0x70>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <ResetSwitch_Init+0x70>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3U << (2 * 2));           // Input mode.
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <ResetSwitch_Init+0x74>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a17      	ldr	r2, [pc, #92]	@ (800143c <ResetSwitch_Init+0x74>)
 80013de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013e2:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3U << (2 * 2));           // Clear.
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <ResetSwitch_Init+0x74>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <ResetSwitch_Init+0x74>)
 80013ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013ee:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		// clock cho ngắt.
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <ResetSwitch_Init+0x70>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f4:	4a10      	ldr	r2, [pc, #64]	@ (8001438 <ResetSwitch_Init+0x70>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fa:	6453      	str	r3, [r2, #68]	@ 0x44

	SYSCFG->EXTICR[0] &= ~(0xF << (2 * 4));     // EXTI2 -> PA2
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <ResetSwitch_Init+0x78>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <ResetSwitch_Init+0x78>)
 8001402:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001406:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= (1U << 2);						// Unmask EXTI2
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <ResetSwitch_Init+0x7c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <ResetSwitch_Init+0x7c>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= (1U << 2);					// ngắt sườn xuống
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <ResetSwitch_Init+0x7c>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <ResetSwitch_Init+0x7c>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1U << 2);
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <ResetSwitch_Init+0x7c>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <ResetSwitch_Init+0x7c>)
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI2_IRQn);					// Enable EXTI2 interrupt in NVIC
 800142c:	2008      	movs	r0, #8
 800142e:	f7ff ff1f 	bl	8001270 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40013800 	.word	0x40013800
 8001444:	40013c00 	.word	0x40013c00

08001448 <system_on_off>:

/**
 * hàm bật tắt hệ thống.
 * state == 1 : system_on.
 */
void system_on_off(int state) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	if (state) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d020      	beq.n	8001498 <system_on_off+0x50>
		ADC1->CR2 |= ADC_CR2_ADON;        // bật adc1.
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <system_on_off+0xa4>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4a24      	ldr	r2, [pc, #144]	@ (80014ec <system_on_off+0xa4>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <system_on_off+0xa4>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <system_on_off+0xa4>)
 8001468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800146c:	6093      	str	r3, [r2, #8]

		TIM1->CR1 |= TIM_CR1_CEN;		  // bật timer cho rgb.
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <system_on_off+0xa8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1f      	ldr	r2, [pc, #124]	@ (80014f0 <system_on_off+0xa8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6013      	str	r3, [r2, #0]

//		ssd1306_goto(0, 0);
//		ssd1306_put_string("sys_status: 1 - on  ");
	    lcd_gotoxy(0, 0);
 800147a:	2100      	movs	r1, #0
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fec7 	bl	8001210 <lcd_gotoxy>
	    lcd_puts("system: on ");
 8001482:	481c      	ldr	r0, [pc, #112]	@ (80014f4 <system_on_off+0xac>)
 8001484:	f7ff feaf 	bl	80011e6 <lcd_puts>
	    lcd_gotoxy(0, 1);
 8001488:	2101      	movs	r1, #1
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fec0 	bl	8001210 <lcd_gotoxy>
	    lcd_puts("gar: 0  ppm: 0");
 8001490:	4819      	ldr	r0, [pc, #100]	@ (80014f8 <system_on_off+0xb0>)
 8001492:	f7ff fea8 	bl	80011e6 <lcd_puts>
	    lcd_gotoxy(0, 1);
	    lcd_puts("gar: -  ppm: ---");

	}

}
 8001496:	e025      	b.n	80014e4 <system_on_off+0x9c>
		ADC1->CR2 &= ~ADC_CR2_ADON;  // tắt adc
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <system_on_off+0xa4>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a13      	ldr	r2, [pc, #76]	@ (80014ec <system_on_off+0xa4>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6093      	str	r3, [r2, #8]
		TIM1->CR1 &= ~TIM_CR1_CEN;	 // tắt timmer.
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <system_on_off+0xa8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <system_on_off+0xa8>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]
		GPIOB->ODR &= ~(1 << 12);	 // tắt relay
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <system_on_off+0xb4>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <system_on_off+0xb4>)
 80014b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014ba:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= (1 << 12);	 // tắt buzzer
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <system_on_off+0xb8>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <system_on_off+0xb8>)
 80014c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c6:	6153      	str	r3, [r2, #20]
	    lcd_gotoxy(0, 0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fea0 	bl	8001210 <lcd_gotoxy>
	    lcd_puts("system: off ----");
 80014d0:	480c      	ldr	r0, [pc, #48]	@ (8001504 <system_on_off+0xbc>)
 80014d2:	f7ff fe88 	bl	80011e6 <lcd_puts>
	    lcd_gotoxy(0, 1);
 80014d6:	2101      	movs	r1, #1
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fe99 	bl	8001210 <lcd_gotoxy>
	    lcd_puts("gar: -  ppm: ---");
 80014de:	480a      	ldr	r0, [pc, #40]	@ (8001508 <system_on_off+0xc0>)
 80014e0:	f7ff fe81 	bl	80011e6 <lcd_puts>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	08006300 	.word	0x08006300
 80014f8:	0800630c 	.word	0x0800630c
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020000 	.word	0x40020000
 8001504:	0800631c 	.word	0x0800631c
 8001508:	08006330 	.word	0x08006330

0800150c <EXTI1_IRQHandler>:

/**
 * xử lý ngắt PA1: on/off hệ thống.
 */
void EXTI1_IRQHandler(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1U << 1)) {
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <EXTI1_IRQHandler+0x38>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d010      	beq.n	800153e <EXTI1_IRQHandler+0x32>
		sys_state ^= 1;				//đổi trạng thái
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <EXTI1_IRQHandler+0x3c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <EXTI1_IRQHandler+0x3c>)
 8001526:	6013      	str	r3, [r2, #0]
		system_on_off(sys_state);	//gọi hàm on-of
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <EXTI1_IRQHandler+0x3c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff8b 	bl	8001448 <system_on_off>
		EXTI->PR |= (1U << 1);      // Clear interrupt pending
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <EXTI1_IRQHandler+0x38>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	4a03      	ldr	r2, [pc, #12]	@ (8001544 <EXTI1_IRQHandler+0x38>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6153      	str	r3, [r2, #20]
	}
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013c00 	.word	0x40013c00
 8001548:	20000000 	.word	0x20000000

0800154c <EXTI2_IRQHandler>:

/**
 * xử lý ngắt PA1: reset.
 */
void EXTI2_IRQHandler(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1U << 2)) {
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <EXTI2_IRQHandler+0x70>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d02d      	beq.n	80015b8 <EXTI2_IRQHandler+0x6c>

//		ssd1306_goto(0, 0);
//		ssd1306_put_string("sys_status: reset ");


		RGB_update(0, 0, 1, 0);		 //set rgb
 800155c:	2300      	movs	r3, #0
 800155e:	2201      	movs	r2, #1
 8001560:	2100      	movs	r1, #0
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f9e6 	bl	8001934 <RGB_update>

		NVIC_DisableIRQ(EXTI1_IRQn);  // Vô hiệu hóa switch 1
 8001568:	2007      	movs	r0, #7
 800156a:	f7ff fe9f 	bl	80012ac <__NVIC_DisableIRQ>
		NVIC_DisableIRQ(EXTI2_IRQn);  // Vô hiệu hóa switch 2
 800156e:	2008      	movs	r0, #8
 8001570:	f7ff fe9c 	bl	80012ac <__NVIC_DisableIRQ>
		//	    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADC1RST;
//	    init_ADC_MQ2();
//	    init_timer1_led_RGB();


		system_on_off(system_off);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ff67 	bl	8001448 <system_on_off>
		warning_state = 0;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <EXTI2_IRQHandler+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
		ppm_value = 0;
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <EXTI2_IRQHandler+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
		adc_value = 0;
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <EXTI2_IRQHandler+0x7c>)
 8001588:	2200      	movs	r2, #0
 800158a:	801a      	strh	r2, [r3, #0]



		while(!(GPIOA->IDR >> 2 & 0x1));    // chờ tới khi nút nhấn được nhả
 800158c:	bf00      	nop
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <EXTI2_IRQHandler+0x80>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f9      	beq.n	800158e <EXTI2_IRQHandler+0x42>
		system_on_off(system_on);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff ff54 	bl	8001448 <system_on_off>

		NVIC_EnableIRQ(EXTI1_IRQn);					// Enable EXTI1 interrupt in NVIC.
 80015a0:	2007      	movs	r0, #7
 80015a2:	f7ff fe65 	bl	8001270 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI2_IRQn);					// Enable EXTI2 interrupt in NVIC.			// Enable EXTI1 interrupt in NVIC.
 80015a6:	2008      	movs	r0, #8
 80015a8:	f7ff fe62 	bl	8001270 <__NVIC_EnableIRQ>

		EXTI->PR |= (1U << 2); // Clear interrupt pending
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <EXTI2_IRQHandler+0x70>)
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4a02      	ldr	r2, [pc, #8]	@ (80015bc <EXTI2_IRQHandler+0x70>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6153      	str	r3, [r2, #20]
	}
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40013c00 	.word	0x40013c00
 80015c0:	200001f4 	.word	0x200001f4
 80015c4:	200001fc 	.word	0x200001fc
 80015c8:	20000200 	.word	0x20000200
 80015cc:	40020000 	.word	0x40020000

080015d0 <init_ADC_MQ2>:

/**
 * Cấu hình PA0 chế độ analog để đọc ADC.
 * Cấu hình ADC1
 */
void init_ADC_MQ2(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  	// Bật clock GPIOA
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <init_ADC_MQ2+0x7c>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <init_ADC_MQ2+0x7c>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(3 << (0 * 2));  		// Xóa cấu hình cũ của PA0
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <init_ADC_MQ2+0x80>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <init_ADC_MQ2+0x80>)
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (3 << (0 * 2)); 		// Chọn chế độ analog cho PA0 (MODER00 = 11)
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <init_ADC_MQ2+0x80>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <init_ADC_MQ2+0x80>)
 80015f2:	f043 0303 	orr.w	r3, r3, #3
 80015f6:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;     // Bật clock cho ADC1
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <init_ADC_MQ2+0x7c>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	4a13      	ldr	r2, [pc, #76]	@ (800164c <init_ADC_MQ2+0x7c>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6453      	str	r3, [r2, #68]	@ 0x44

	ADC1->CR1 &= ~ADC_CR1_RES_Msk;        	// Xóa cấu hình độ phân giải cũ
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <init_ADC_MQ2+0x84>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <init_ADC_MQ2+0x84>)
 800160a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800160e:	6053      	str	r3, [r2, #4]
//	ADC1->CR1 |= 2 << ADC_CR1_RES_Pos; 		// Chọn độ phân giải 8 bit (10 = 8-bit resolution)
	ADC1->CR1 |= ADC_CR1_EOCIE;				// Bật ngắt khi ADC chuyển đổi hoàn tất (EOC)
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <init_ADC_MQ2+0x84>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <init_ADC_MQ2+0x84>)
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	6053      	str	r3, [r2, #4]

	ADC1->SMPR2 |= (7 << (0 * 3)); 			// Cấu hình thời gian lấy mẫu cho kênh 0: 112 cycles
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <init_ADC_MQ2+0x84>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a0c      	ldr	r2, [pc, #48]	@ (8001654 <init_ADC_MQ2+0x84>)
 8001622:	f043 0307 	orr.w	r3, r3, #7
 8001626:	6113      	str	r3, [r2, #16]

	ADC1->SQR3 &= ~(0xF << 0);              // Chọn kênh ADC = kênh 0 (PA0)
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <init_ADC_MQ2+0x84>)
 800162a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162c:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <init_ADC_MQ2+0x84>)
 800162e:	f023 030f 	bic.w	r3, r3, #15
 8001632:	6353      	str	r3, [r2, #52]	@ 0x34

	ADC1->CR2 |= ADC_CR2_ADON;            	// Bật ADC1 (Enable ADC)
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <init_ADC_MQ2+0x84>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <init_ADC_MQ2+0x84>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(ADC_IRQn); 				// Bật ngắt ADC trong NVIC
 8001640:	2012      	movs	r0, #18
 8001642:	f7ff fe15 	bl	8001270 <__NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40012000 	.word	0x40012000

08001658 <ppm_caculator>:

/**
 * hàm tính ppm từ giá trị adc.
 */
int ppm_caculator(uint16_t data) {
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	// Tính điện áp từ giá trị ADC đọc được (độ phân giải 8-bit → 256 mức)
//	double voltage = 5 * data / 256.0;
	// Tính điện trở Rs theo điện áp
	double Rs = 1000.0 * ((4095.0 - data) / data);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff65 	bl	8000534 <__aeabi_i2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	a137      	add	r1, pc, #220	@ (adr r1, 800174c <ppm_caculator+0xf4>)
 8001670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001674:	f7fe fe10 	bl	8000298 <__aeabi_dsub>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4614      	mov	r4, r2
 800167e:	461d      	mov	r5, r3
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff56 	bl	8000534 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7ff f8e4 	bl	800085c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <ppm_caculator+0xf0>)
 80016a2:	f7fe ffb1 	bl	8000608 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// Tỷ số Rs/Ro (Ro = 34123.967 : đo trong không khí sạch)
	double divRsRo = Rs / 15000.0;
 80016ae:	a320      	add	r3, pc, #128	@ (adr r3, 8001730 <ppm_caculator+0xd8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016b8:	f7ff f8d0 	bl	800085c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Tính log10(ppm) từ đường cong đặc trưng
	float log_ppm = -0.47 * log10f(divRsRo) + 1.63;
 80016c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c8:	f7ff fa76 	bl	8000bb8 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	ee00 3a10 	vmov	s0, r3
 80016d2:	f004 f8c1 	bl	8005858 <log10f>
 80016d6:	ee10 3a10 	vmov	r3, s0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff3c 	bl	8000558 <__aeabi_f2d>
 80016e0:	a315      	add	r3, pc, #84	@ (adr r3, 8001738 <ppm_caculator+0xe0>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ff8f 	bl	8000608 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	a313      	add	r3, pc, #76	@ (adr r3, 8001740 <ppm_caculator+0xe8>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe fdd0 	bl	800029c <__adddf3>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa58 	bl	8000bb8 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]
	// Tính ppm bằng cách mũ hóa cơ số 10
	return (int) powf(10.0, log_ppm);
 800170c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001710:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001714:	f004 f8ce 	bl	80058b4 <powf>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001720:	ee17 3a90 	vmov	r3, s15
}
 8001724:	4618      	mov	r0, r3
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	00000000 	.word	0x00000000
 8001734:	40cd4c00 	.word	0x40cd4c00
 8001738:	e147ae14 	.word	0xe147ae14
 800173c:	bfde147a 	.word	0xbfde147a
 8001740:	e147ae14 	.word	0xe147ae14
 8001744:	3ffa147a 	.word	0x3ffa147a
 8001748:	408f4000 	.word	0x408f4000
 800174c:	00000000 	.word	0x00000000
 8001750:	40affe00 	.word	0x40affe00

08001754 <ADC_IRQHandler>:
/**
 * hàm xử lý ngắt từ adc.
 * đọc giá trị, tính ppm
 * kiểm tra trạng thái cảnh báo.
 */
void ADC_IRQHandler(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	if (ADC1->SR & (1 << 1)) 	// Kiểm tra cờ EOC (End Of Conversion)
 8001758:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <ADC_IRQHandler+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d05f      	beq.n	8001824 <ADC_IRQHandler+0xd0>
			{
		adc_value = ADC1->DR;   			// Đọc giá trị ADC
 8001764:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <ADC_IRQHandler+0xd4>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b30      	ldr	r3, [pc, #192]	@ (800182c <ADC_IRQHandler+0xd8>)
 800176c:	801a      	strh	r2, [r3, #0]
		ppm_value = ppm_caculator(adc_value); 	// Tính toán ppm từ giá trị ADC
 800176e:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <ADC_IRQHandler+0xd8>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff70 	bl	8001658 <ppm_caculator>
 8001778:	4603      	mov	r3, r0
 800177a:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <ADC_IRQHandler+0xdc>)
 800177c:	6013      	str	r3, [r2, #0]

		if (ppm_value < low_gar_default_value) {	//kiểm tra mức khí gar
 800177e:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <ADC_IRQHandler+0xdc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b31      	cmp	r3, #49	@ 0x31
 8001784:	dc0a      	bgt.n	800179c <ADC_IRQHandler+0x48>
			if (warning_state == 0)					// so sánh trạng thái trước đó
 8001786:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <ADC_IRQHandler+0xe0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d043      	beq.n	8001816 <ADC_IRQHandler+0xc2>
				return;								//cùng trạng thái trả về
			else {
				warning_state = 0;					// khác trạng thái : cập nhật
 800178e:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <ADC_IRQHandler+0xe0>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
				gar_flag = 1;						// và set flag
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <ADC_IRQHandler+0xe4>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e035      	b.n	8001808 <ADC_IRQHandler+0xb4>
			}
		}
		else if (ppm_value >= low_gar_default_value
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <ADC_IRQHandler+0xdc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b31      	cmp	r3, #49	@ 0x31
 80017a2:	dd0e      	ble.n	80017c2 <ADC_IRQHandler+0x6e>
				&& ppm_value < high_gar_default_value) {
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <ADC_IRQHandler+0xdc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b95      	cmp	r3, #149	@ 0x95
 80017aa:	dc0a      	bgt.n	80017c2 <ADC_IRQHandler+0x6e>
			if (warning_state == 1)
 80017ac:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <ADC_IRQHandler+0xe0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d032      	beq.n	800181a <ADC_IRQHandler+0xc6>
				return;
			else {
				warning_state = 1;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <ADC_IRQHandler+0xe0>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
				gar_flag = 1;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <ADC_IRQHandler+0xe4>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
			if (warning_state == 1)
 80017c0:	e022      	b.n	8001808 <ADC_IRQHandler+0xb4>
			}
		}
		else if (ppm_value >= high_gar_default_value
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <ADC_IRQHandler+0xdc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b95      	cmp	r3, #149	@ 0x95
 80017c8:	dd0f      	ble.n	80017ea <ADC_IRQHandler+0x96>
				&& ppm_value < warning_gar_default_value) {
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <ADC_IRQHandler+0xdc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017d2:	da0a      	bge.n	80017ea <ADC_IRQHandler+0x96>
			if (warning_state == 2)
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <ADC_IRQHandler+0xe0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d020      	beq.n	800181e <ADC_IRQHandler+0xca>
				return;
			else {
				warning_state = 2;
 80017dc:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <ADC_IRQHandler+0xe0>)
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
				gar_flag = 1;
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <ADC_IRQHandler+0xe4>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
			if (warning_state == 2)
 80017e8:	e00e      	b.n	8001808 <ADC_IRQHandler+0xb4>
			}
		}
		else if (ppm_value >= warning_gar_default_value) {
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <ADC_IRQHandler+0xdc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017f2:	db09      	blt.n	8001808 <ADC_IRQHandler+0xb4>
			if (warning_state == 3)
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <ADC_IRQHandler+0xe0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d012      	beq.n	8001822 <ADC_IRQHandler+0xce>
				return;
			else {
				warning_state = 3;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <ADC_IRQHandler+0xe0>)
 80017fe:	2203      	movs	r2, #3
 8001800:	601a      	str	r2, [r3, #0]
				gar_flag = 1;
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <ADC_IRQHandler+0xe4>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
			}
		}

		ADC1->SR &= ~(1 << 1);  			// Xóa cờ EOC
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <ADC_IRQHandler+0xd4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a06      	ldr	r2, [pc, #24]	@ (8001828 <ADC_IRQHandler+0xd4>)
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e006      	b.n	8001824 <ADC_IRQHandler+0xd0>
				return;								//cùng trạng thái trả về
 8001816:	bf00      	nop
 8001818:	e004      	b.n	8001824 <ADC_IRQHandler+0xd0>
				return;
 800181a:	bf00      	nop
 800181c:	e002      	b.n	8001824 <ADC_IRQHandler+0xd0>
				return;
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <ADC_IRQHandler+0xd0>
				return;
 8001822:	bf00      	nop
	}

}
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012000 	.word	0x40012000
 800182c:	20000200 	.word	0x20000200
 8001830:	200001fc 	.word	0x200001fc
 8001834:	200001f4 	.word	0x200001f4
 8001838:	200001f8 	.word	0x200001f8

0800183c <init_timer1_led_RGB>:
 * khởi tạo timer cho led RGB.
 * cấu hình GPIO CH1-PA8-R, CH2-PA9-G, CH3-PA10-B
 * cấu hình PWM mode2 cho cả 3 kênh.
 * mục đích : tạo xung để nhấp nháy led.
 */
void init_timer1_led_RGB(void) {
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	// 1. Bật clock GPIOA và TIM1
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001840:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <init_timer1_led_RGB+0xe8>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	4a37      	ldr	r2, [pc, #220]	@ (8001924 <init_timer1_led_RGB+0xe8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <init_timer1_led_RGB+0xe8>)
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	4a34      	ldr	r2, [pc, #208]	@ (8001924 <init_timer1_led_RGB+0xe8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6453      	str	r3, [r2, #68]	@ 0x44

	// 2. Cấu hình các chân PA8, PA9, PA10 làm Alternate Function (AF1 tương ứng với TIM1)
	GPIOA->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)) | (3 << (10 * 2))); // Xóa cấu hình cũ
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <init_timer1_led_RGB+0xec>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a32      	ldr	r2, [pc, #200]	@ (8001928 <init_timer1_led_RGB+0xec>)
 800185e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001862:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << (8 * 2)) | (2 << (9 * 2)) | (2 << (10 * 2)); // Đặt chế độ AF
 8001864:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <init_timer1_led_RGB+0xec>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <init_timer1_led_RGB+0xec>)
 800186a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800186e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4))
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <init_timer1_led_RGB+0xec>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	4a2c      	ldr	r2, [pc, #176]	@ (8001928 <init_timer1_led_RGB+0xec>)
 8001876:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800187a:	f023 030f 	bic.w	r3, r3, #15
 800187e:	6253      	str	r3, [r2, #36]	@ 0x24
			| (0xF << ((10 - 8) * 4)));
	GPIOA->AFR[1] |= (1 << ((8 - 8) * 4)) | (1 << ((9 - 8) * 4))
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <init_timer1_led_RGB+0xec>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	4a28      	ldr	r2, [pc, #160]	@ (8001928 <init_timer1_led_RGB+0xec>)
 8001886:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6253      	str	r3, [r2, #36]	@ 0x24
			| (1 << ((10 - 8) * 4));  // AF1

	// 3. Cấu hình Timer1
	TIM1->PSC = 79999;        // Prescaler: giảm từ 80 MHz xuống 1 kHz
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <init_timer1_led_RGB+0xf0>)
 8001892:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <init_timer1_led_RGB+0xf4>)
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 999;          // Auto-reload: 1s chu kỳ (1 tick = 1ms)
 8001896:	4b25      	ldr	r3, [pc, #148]	@ (800192c <init_timer1_led_RGB+0xf0>)
 8001898:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// 4. Đặt giá trị so sánh ban đầu cho 3 kênh PWM (CCR)
	TIM1->CCR1 = 0;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 80018a4:	4b21      	ldr	r3, [pc, #132]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	@ 0x3c

	// 5. Cấu hình chế độ PWM cho các kênh (OC1, OC2, OC3)
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);  // Xóa mode cũ
 80018b0:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80018ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018be:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 &= ~(TIM_CCMR2_OC3M);                   // Xóa mode cũ
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a19      	ldr	r2, [pc, #100]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ca:	61d3      	str	r3, [r2, #28]

	TIM1->CCMR1 |= (0b111 << TIM_CCMR1_OC1M_Pos);  // PWM mode 2 cho OC1
 80018cc:	4b17      	ldr	r3, [pc, #92]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a16      	ldr	r2, [pc, #88]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018d2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80018d6:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (0b111 << TIM_CCMR1_OC2M_Pos);  // PWM mode 2 cho OC2
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a13      	ldr	r2, [pc, #76]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018de:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80018e2:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 |= (0b111 << TIM_CCMR2_OC3M_Pos);  // PWM mode 2 cho OC3
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a10      	ldr	r2, [pc, #64]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018ea:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80018ee:	61d3      	str	r3, [r2, #28]

	TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E; // Cho phép xuất tín hiệu trên CH1, CH2, CH3
 80018f0:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <init_timer1_led_RGB+0xf0>)
 80018f6:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]

	// 6. Cho phép output (Main Output Enable)
	TIM1->BDTR |= TIM_BDTR_MOE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <init_timer1_led_RGB+0xf0>)
 8001902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001904:	4a09      	ldr	r2, [pc, #36]	@ (800192c <init_timer1_led_RGB+0xf0>)
 8001906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800190a:	6453      	str	r3, [r2, #68]	@ 0x44

	// 7. Bắt đầu Timer
	TIM1->CR1 |= TIM_CR1_CEN;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <init_timer1_led_RGB+0xf0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a06      	ldr	r2, [pc, #24]	@ (800192c <init_timer1_led_RGB+0xf0>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000
 800192c:	40010000 	.word	0x40010000
 8001930:	0001387f 	.word	0x0001387f

08001934 <RGB_update>:

void RGB_update(int R, int G, int B, int FREQ) {
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;  // Dừng Timer để cập nhật
 8001942:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <RGB_update+0xd4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a30      	ldr	r2, [pc, #192]	@ (8001a08 <RGB_update+0xd4>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6013      	str	r3, [r2, #0]

	if (FREQ == 0)  // Nếu không nhấp nháy
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11f      	bne.n	8001994 <RGB_update+0x60>
			{
		TIM1->ARR = 999;  // Chu kỳ 1 giây
 8001954:	4b2c      	ldr	r3, [pc, #176]	@ (8001a08 <RGB_update+0xd4>)
 8001956:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
		// Cập nhật duty cycle 100% hoặc 0% tùy màu
		TIM1->CCR1 = (R == 0) ? 0 : 999;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <RGB_update+0x32>
 8001962:	2300      	movs	r3, #0
 8001964:	e001      	b.n	800196a <RGB_update+0x36>
 8001966:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800196a:	4a27      	ldr	r2, [pc, #156]	@ (8001a08 <RGB_update+0xd4>)
 800196c:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = (G == 0) ? 0 : 999;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <RGB_update+0x44>
 8001974:	2300      	movs	r3, #0
 8001976:	e001      	b.n	800197c <RGB_update+0x48>
 8001978:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800197c:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <RGB_update+0xd4>)
 800197e:	6393      	str	r3, [r2, #56]	@ 0x38
		TIM1->CCR3 = (B == 0) ? 0 : 999;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <RGB_update+0x56>
 8001986:	2300      	movs	r3, #0
 8001988:	e001      	b.n	800198e <RGB_update+0x5a>
 800198a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800198e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a08 <RGB_update+0xd4>)
 8001990:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001992:	e026      	b.n	80019e2 <RGB_update+0xae>
	} else  // Nếu có nhấp nháy
	{
		int arr_val = (1000 / FREQ) - 1; // Tính chu kỳ mới theo tần số mong muốn
 8001994:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	fb92 f3f3 	sdiv	r3, r2, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
		int duty = arr_val / 2;				// Duty cycle 50%
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	0fda      	lsrs	r2, r3, #31
 80019a6:	4413      	add	r3, r2
 80019a8:	105b      	asrs	r3, r3, #1
 80019aa:	613b      	str	r3, [r7, #16]

		TIM1->ARR = arr_val;				// Cập nhật chu kỳ mới
 80019ac:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <RGB_update+0xd4>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM1->CCR1 = (R == 0) ? 0 : duty;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <RGB_update+0x88>
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	e000      	b.n	80019be <RGB_update+0x8a>
 80019bc:	2300      	movs	r3, #0
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <RGB_update+0xd4>)
 80019c0:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = (G == 0) ? 0 : duty;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <RGB_update+0x98>
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	e000      	b.n	80019ce <RGB_update+0x9a>
 80019cc:	2300      	movs	r3, #0
 80019ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <RGB_update+0xd4>)
 80019d0:	6393      	str	r3, [r2, #56]	@ 0x38
		TIM1->CCR3 = (B == 0) ? 0 : duty;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <RGB_update+0xa8>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	e000      	b.n	80019de <RGB_update+0xaa>
 80019dc:	2300      	movs	r3, #0
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <RGB_update+0xd4>)
 80019e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}

	TIM1->EGR |= TIM_EGR_UG;  				// Tạo sự kiện cập nhật
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <RGB_update+0xd4>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <RGB_update+0xd4>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_CEN; 				// Khởi động lại Timer
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <RGB_update+0xd4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <RGB_update+0xd4>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6013      	str	r3, [r2, #0]
}
 80019fa:	bf00      	nop
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40010000 	.word	0x40010000

08001a0c <init_relay>:

void init_relay(void) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;  // clock cho gpiob
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <init_relay+0x58>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <init_relay+0x58>)
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER &= ~(3 << (12 * 2));   // clear
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <init_relay+0x5c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <init_relay+0x5c>)
 8001a22:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001a26:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (12 * 2));   // PB12: ouput
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <init_relay+0x5c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <init_relay+0x5c>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER &= ~(1 << 12);        // Push-pull
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <init_relay+0x5c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <init_relay+0x5c>)
 8001a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a3e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3 << (12 * 2));	// no pullupp , pulldown
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <init_relay+0x5c>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <init_relay+0x5c>)
 8001a46:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001a4a:	60d3      	str	r3, [r2, #12]

	GPIOB->ODR &= ~(1 << 12);			// set giá trị ban đầu bằng 0.
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <init_relay+0x5c>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <init_relay+0x5c>)
 8001a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a56:	6153      	str	r3, [r2, #20]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020400 	.word	0x40020400

08001a6c <init_buzzer>:

void init_buzzer(void) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	//  clock cho port A
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <init_buzzer+0x58>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	4a13      	ldr	r2, [pc, #76]	@ (8001ac4 <init_buzzer+0x58>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3 << (12 * 2));   // Clear
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <init_buzzer+0x5c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <init_buzzer+0x5c>)
 8001a82:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001a86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << (12 * 2));   // Set PA12 output
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <init_buzzer+0x5c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <init_buzzer+0x5c>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(1 << 12);        // Push-pull
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <init_buzzer+0x5c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac8 <init_buzzer+0x5c>)
 8001a9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a9e:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(3 << (12 * 2));	//No pull-up, no pull-down (PUPDR = 00)
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <init_buzzer+0x5c>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <init_buzzer+0x5c>)
 8001aa6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001aaa:	60d3      	str	r3, [r2, #12]

	GPIOA->ODR |= 1 << 12;			//set giá trị ban đầu = 1: buzzer off.
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <init_buzzer+0x5c>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <init_buzzer+0x5c>)
 8001ab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ab6:	6153      	str	r3, [r2, #20]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <main>:



int main(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0aa      	sub	sp, #168	@ 0xa8
 8001ad0:	af00      	add	r7, sp, #0
	HAL_Init();
 8001ad2:	f000 fafd 	bl	80020d0 <HAL_Init>

	SystemClock_Config();
 8001ad6:	f000 f909 	bl	8001cec <SystemClock_Config>
	MX_GPIO_Init();
 8001ada:	f000 f971 	bl	8001dc0 <MX_GPIO_Init>
//	ssd1306_put_string("ppm: 0");
//
//	ssd1306_goto(0, 7);
//	ssd1306_put_string("adc: 0");

    I2C1_Init();
 8001ade:	f7ff fa4d 	bl	8000f7c <I2C1_Init>
    lcd_init();
 8001ae2:	f7ff fb43 	bl	800116c <lcd_init>
    lcd_gotoxy(0, 0);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fb91 	bl	8001210 <lcd_gotoxy>
    lcd_puts("system: on ");
 8001aee:	486f      	ldr	r0, [pc, #444]	@ (8001cac <main+0x1e0>)
 8001af0:	f7ff fb79 	bl	80011e6 <lcd_puts>
    lcd_gotoxy(0, 1);
 8001af4:	2101      	movs	r1, #1
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fb8a 	bl	8001210 <lcd_gotoxy>
    lcd_puts("gar: 0  ppm: 0");
 8001afc:	486c      	ldr	r0, [pc, #432]	@ (8001cb0 <main+0x1e4>)
 8001afe:	f7ff fb72 	bl	80011e6 <lcd_puts>



	init_ADC_MQ2();
 8001b02:	f7ff fd65 	bl	80015d0 <init_ADC_MQ2>
	init_timer1_led_RGB();
 8001b06:	f7ff fe99 	bl	800183c <init_timer1_led_RGB>

	init_relay();
 8001b0a:	f7ff ff7f 	bl	8001a0c <init_relay>
	init_buzzer();
 8001b0e:	f7ff ffad 	bl	8001a6c <init_buzzer>

	OnOffSwitch_Init();
 8001b12:	f7ff fc19 	bl	8001348 <OnOffSwitch_Init>
	ResetSwitch_Init();
 8001b16:	f7ff fc57 	bl	80013c8 <ResetSwitch_Init>
	RGB_update(0, 0, 1, 0);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff ff07 	bl	8001934 <RGB_update>

	NVIC_SetPriority(EXTI2_IRQn, 1); 			// Ưu tiên mức 1
 8001b26:	2101      	movs	r1, #1
 8001b28:	2008      	movs	r0, #8
 8001b2a:	f7ff fbe3 	bl	80012f4 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn, 2); 			// Ưu tiên mức 2
 8001b2e:	2102      	movs	r1, #2
 8001b30:	2007      	movs	r0, #7
 8001b32:	f7ff fbdf 	bl	80012f4 <__NVIC_SetPriority>
	NVIC_SetPriority(ADC_IRQn, 3); 			// Ưu tiên mức 3 cho ngắt ADC
 8001b36:	2103      	movs	r1, #3
 8001b38:	2012      	movs	r0, #18
 8001b3a:	f7ff fbdb 	bl	80012f4 <__NVIC_SetPriority>

	while (1) {
		//khiểm tra hệ thống on.
		if (sys_state) {
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <main+0x1e8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0fb      	beq.n	8001b3e <main+0x72>
			// kiểm tra gar_flag: được set khi trạng thái cảnh báo thay đổi.
			if (gar_flag) {
 8001b46:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb8 <main+0x1ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d079      	beq.n	8001c42 <main+0x176>
				if (warning_state == 0) {
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <main+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <main+0xbe>
					RGB_update(0, 0, 1, 0);		// cập nhật RGB.
 8001b56:	2300      	movs	r3, #0
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fee9 	bl	8001934 <RGB_update>

					GPIOB->ODR &= ~(1 << 12);	//relay
 8001b62:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <main+0x1f4>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4a56      	ldr	r2, [pc, #344]	@ (8001cc0 <main+0x1f4>)
 8001b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b6c:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1 << 12);	//buzzer
 8001b6e:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <main+0x1f8>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a54      	ldr	r2, [pc, #336]	@ (8001cc4 <main+0x1f8>)
 8001b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b78:	6153      	str	r3, [r2, #20]

//					ssd1306_goto(66, 3);
//					ssd1306_put_string("0 - non     ");
					lcd_gotoxy(5, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f7ff fb47 	bl	8001210 <lcd_gotoxy>
					lcd_puts("0");
 8001b82:	4851      	ldr	r0, [pc, #324]	@ (8001cc8 <main+0x1fc>)
 8001b84:	f7ff fb2f 	bl	80011e6 <lcd_puts>
 8001b88:	e058      	b.n	8001c3c <main+0x170>

				} else if (warning_state == 1) {
 8001b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001cbc <main+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d119      	bne.n	8001bc6 <main+0xfa>
					RGB_update(1, 1, 0, 0);
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	2101      	movs	r1, #1
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fecb 	bl	8001934 <RGB_update>
					GPIOB->ODR &= ~(1 << 12);
 8001b9e:	4b48      	ldr	r3, [pc, #288]	@ (8001cc0 <main+0x1f4>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a47      	ldr	r2, [pc, #284]	@ (8001cc0 <main+0x1f4>)
 8001ba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ba8:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1 << 12);
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <main+0x1f8>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a45      	ldr	r2, [pc, #276]	@ (8001cc4 <main+0x1f8>)
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb4:	6153      	str	r3, [r2, #20]
//
//					ssd1306_goto(66, 3);
//					ssd1306_put_string("1 - low     ");
					lcd_gotoxy(5, 1);
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	2005      	movs	r0, #5
 8001bba:	f7ff fb29 	bl	8001210 <lcd_gotoxy>
					lcd_puts("1");
 8001bbe:	4843      	ldr	r0, [pc, #268]	@ (8001ccc <main+0x200>)
 8001bc0:	f7ff fb11 	bl	80011e6 <lcd_puts>
 8001bc4:	e03a      	b.n	8001c3c <main+0x170>

				} else if (warning_state == 2) {
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cbc <main+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d119      	bne.n	8001c02 <main+0x136>

					RGB_update(1, 0, 0, 1);
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff fead 	bl	8001934 <RGB_update>

					GPIOB->ODR |= 1 << 12;
 8001bda:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <main+0x1f4>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4a38      	ldr	r2, [pc, #224]	@ (8001cc0 <main+0x1f4>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001be4:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= 1 << 12;
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <main+0x1f8>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4a36      	ldr	r2, [pc, #216]	@ (8001cc4 <main+0x1f8>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf0:	6153      	str	r3, [r2, #20]

//					ssd1306_goto(66, 3);
//					ssd1306_put_string("2 - high    ");
					lcd_gotoxy(5, 1);
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	2005      	movs	r0, #5
 8001bf6:	f7ff fb0b 	bl	8001210 <lcd_gotoxy>
					lcd_puts("2");
 8001bfa:	4835      	ldr	r0, [pc, #212]	@ (8001cd0 <main+0x204>)
 8001bfc:	f7ff faf3 	bl	80011e6 <lcd_puts>
 8001c00:	e01c      	b.n	8001c3c <main+0x170>

				} else if (warning_state == 3) {
 8001c02:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <main+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d118      	bne.n	8001c3c <main+0x170>
					RGB_update(1, 0, 0, 5);
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff fe8f 	bl	8001934 <RGB_update>

					GPIOB->ODR |= 1 << 12;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <main+0x1f4>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	4a29      	ldr	r2, [pc, #164]	@ (8001cc0 <main+0x1f4>)
 8001c1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c20:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1 << 12);
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <main+0x1f8>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a27      	ldr	r2, [pc, #156]	@ (8001cc4 <main+0x1f8>)
 8001c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c2c:	6153      	str	r3, [r2, #20]

//					ssd1306_goto(66, 3);
//					ssd1306_put_string("3 - warnning");
					lcd_gotoxy(5, 1);
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2005      	movs	r0, #5
 8001c32:	f7ff faed 	bl	8001210 <lcd_gotoxy>
					lcd_puts("3");
 8001c36:	4827      	ldr	r0, [pc, #156]	@ (8001cd4 <main+0x208>)
 8001c38:	f7ff fad5 	bl	80011e6 <lcd_puts>

				}

				gar_flag = 0;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <main+0x1ec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
//			sprintf(str, "%d   ", adc_value);
//			ssd1306_goto(30, 7);
//			ssd1306_put_string(str);

			char str[161];
			sprintf(str, "%d   ", ppm_value);
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <main+0x20c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	463b      	mov	r3, r7
 8001c48:	4924      	ldr	r1, [pc, #144]	@ (8001cdc <main+0x210>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fcd6 	bl	80035fc <siprintf>
			lcd_gotoxy(13, 1);
 8001c50:	2101      	movs	r1, #1
 8001c52:	200d      	movs	r0, #13
 8001c54:	f7ff fadc 	bl	8001210 <lcd_gotoxy>
			lcd_puts(str);
 8001c58:	463b      	mov	r3, r7
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fac3 	bl	80011e6 <lcd_puts>

			sprintf(str, "%d   ", adc_value);
 8001c60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce0 <main+0x214>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	463b      	mov	r3, r7
 8001c68:	491c      	ldr	r1, [pc, #112]	@ (8001cdc <main+0x210>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fcc6 	bl	80035fc <siprintf>
			lcd_gotoxy(12, 0);
 8001c70:	2100      	movs	r1, #0
 8001c72:	200c      	movs	r0, #12
 8001c74:	f7ff facc 	bl	8001210 <lcd_gotoxy>
			lcd_puts(str);
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fab3 	bl	80011e6 <lcd_puts>

			ADC1->CR2 |= ADC_CR2_SWSTART;         // Bắt đầu chuyển đổi
 8001c80:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <main+0x218>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <main+0x218>)
 8001c86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c8a:	6093      	str	r3, [r2, #8]
			for (int i = 0; i < 2000000; i++);		//delay 2s
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c92:	e004      	b.n	8001c9e <main+0x1d2>
 8001c94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <main+0x21c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	ddf5      	ble.n	8001c94 <main+0x1c8>
		if (sys_state) {
 8001ca8:	e749      	b.n	8001b3e <main+0x72>
 8001caa:	bf00      	nop
 8001cac:	08006300 	.word	0x08006300
 8001cb0:	0800630c 	.word	0x0800630c
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	200001f8 	.word	0x200001f8
 8001cbc:	200001f4 	.word	0x200001f4
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	08006344 	.word	0x08006344
 8001ccc:	08006348 	.word	0x08006348
 8001cd0:	0800634c 	.word	0x0800634c
 8001cd4:	08006350 	.word	0x08006350
 8001cd8:	200001fc 	.word	0x200001fc
 8001cdc:	08006354 	.word	0x08006354
 8001ce0:	20000200 	.word	0x20000200
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	001e847f 	.word	0x001e847f

08001cec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	@ 0x50
 8001cf0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	2230      	movs	r2, #48	@ 0x30
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 fce1 	bl	80036c2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b28      	ldr	r3, [pc, #160]	@ (8001db8 <SystemClock_Config+0xcc>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <SystemClock_Config+0xcc>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <SystemClock_Config+0xcc>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <SystemClock_Config+0xd0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d38:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <SystemClock_Config+0xd0>)
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <SystemClock_Config+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d56:	2302      	movs	r3, #2
 8001d58:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001d60:	230f      	movs	r3, #15
 8001d62:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001d64:	2360      	movs	r3, #96	@ 0x60
 8001d66:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fb03 	bl	8002380 <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x98>
		Error_Handler();
 8001d80:	f000 f846 	bl	8001e10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d84:	230f      	movs	r3, #15
 8001d86:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fd65 	bl	8002870 <HAL_RCC_ClockConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xc4>
		Error_Handler();
 8001dac:	f000 f830 	bl	8001e10 <Error_Handler>
	}
}
 8001db0:	bf00      	nop
 8001db2:	3750      	adds	r7, #80	@ 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_GPIO_Init+0x4c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a0f      	ldr	r2, [pc, #60]	@ (8001e0c <MX_GPIO_Init+0x4c>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <MX_GPIO_Init+0x4c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_GPIO_Init+0x4c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <MX_GPIO_Init+0x4c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_GPIO_Init+0x4c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <Error_Handler+0x8>

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <NMI_Handler+0x4>

08001e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <HardFault_Handler+0x4>

08001e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <MemManage_Handler+0x4>

08001e84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec2:	f000 f957 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  return 1;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_kill>:

int _kill(int pid, int sig)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee4:	f001 fc40 	bl	8003768 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2216      	movs	r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
  return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_exit>:

void _exit (int status)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffe7 	bl	8001eda <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
  }

  return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
  }
  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
  return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f001 fba4 	bl	8003768 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20010000 	.word	0x20010000
 800204c:	00000400 	.word	0x00000400
 8002050:	20000204 	.word	0x20000204
 8002054:	20000358 	.word	0x20000358

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002080:	f7ff ffea 	bl	8002058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f001 fb63 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff fd0d 	bl	8001acc <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80020c0:	08006708 	.word	0x08006708
  ldr r2, =_sbss
 80020c4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80020c8:	20000358 	.word	0x20000358

080020cc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <DMA1_Stream0_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f90d 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fe8a 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f917 	bl	8002366 <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 f8ed 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000004 	.word	0x20000004
 800216c:	2000000c 	.word	0x2000000c
 8002170:	20000008 	.word	0x20000008

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000000c 	.word	0x2000000c
 8002198:	20000208 	.word	0x20000208

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000208 	.word	0x20000208

080021b4 <__NVIC_SetPriorityGrouping>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_SetPriority>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff47 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff5c 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffb0 	bl	80022d4 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e267      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d075      	beq.n	800248a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800239e:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d00c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b85      	ldr	r3, [pc, #532]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b82      	ldr	r3, [pc, #520]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b7e      	ldr	r3, [pc, #504]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d05b      	beq.n	8002488 <HAL_RCC_OscConfig+0x108>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d157      	bne.n	8002488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e242      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x74>
 80023e6:	4b76      	ldr	r3, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a75      	ldr	r2, [pc, #468]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b70      	ldr	r3, [pc, #448]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6f      	ldr	r2, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6d      	ldr	r3, [pc, #436]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6c      	ldr	r2, [pc, #432]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
 8002418:	4b69      	ldr	r3, [pc, #420]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a68      	ldr	r2, [pc, #416]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b66      	ldr	r3, [pc, #408]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a65      	ldr	r2, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff feb0 	bl	800219c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff feac 	bl	800219c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e207      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xc0>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fe9c 	bl	800219c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff fe98 	bl	800219c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	@ 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1f3      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b51      	ldr	r3, [pc, #324]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0xe8>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002496:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b47      	ldr	r3, [pc, #284]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b44      	ldr	r3, [pc, #272]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x152>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1c7      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4937      	ldr	r1, [pc, #220]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b34      	ldr	r3, [pc, #208]	@ (80025c4 <HAL_RCC_OscConfig+0x244>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff fe51 	bl	800219c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff fe4d 	bl	800219c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1a8      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2b      	ldr	r3, [pc, #172]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4925      	ldr	r1, [pc, #148]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_OscConfig+0x244>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fe30 	bl	800219c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff fe2c 	bl	800219c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e187      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_RCC_OscConfig+0x248>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7ff fe10 	bl	800219c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff fe0c 	bl	800219c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e167      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x200>
 800259e:	e01b      	b.n	80025d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_OscConfig+0x248>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fdf9 	bl	800219c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	e00e      	b.n	80025cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ae:	f7ff fdf5 	bl	800219c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d907      	bls.n	80025cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e150      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ea      	bne.n	80025ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8097 	beq.w	8002714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b81      	ldr	r3, [pc, #516]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b7d      	ldr	r3, [pc, #500]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a7c      	ldr	r2, [pc, #496]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b7a      	ldr	r3, [pc, #488]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b77      	ldr	r3, [pc, #476]	@ (80027f4 <HAL_RCC_OscConfig+0x474>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b74      	ldr	r3, [pc, #464]	@ (80027f4 <HAL_RCC_OscConfig+0x474>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a73      	ldr	r2, [pc, #460]	@ (80027f4 <HAL_RCC_OscConfig+0x474>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7ff fdb5 	bl	800219c <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7ff fdb1 	bl	800219c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e10c      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_OscConfig+0x474>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x2ea>
 800265c:	4b64      	ldr	r3, [pc, #400]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	4a63      	ldr	r2, [pc, #396]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	@ 0x70
 8002668:	e01c      	b.n	80026a4 <HAL_RCC_OscConfig+0x324>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x30c>
 8002672:	4b5f      	ldr	r3, [pc, #380]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	4a5e      	ldr	r2, [pc, #376]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6713      	str	r3, [r2, #112]	@ 0x70
 800267e:	4b5c      	ldr	r3, [pc, #368]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	4a5b      	ldr	r2, [pc, #364]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6713      	str	r3, [r2, #112]	@ 0x70
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x324>
 800268c:	4b58      	ldr	r3, [pc, #352]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	4a57      	ldr	r2, [pc, #348]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	@ 0x70
 8002698:	4b55      	ldr	r3, [pc, #340]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a54      	ldr	r2, [pc, #336]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7ff fd76 	bl	800219c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7ff fd72 	bl	800219c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0cb      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ee      	beq.n	80026b4 <HAL_RCC_OscConfig+0x334>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff fd60 	bl	800219c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7ff fd5c 	bl	800219c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0b5      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ee      	bne.n	80026e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	4a38      	ldr	r2, [pc, #224]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002712:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a1 	beq.w	8002860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800271e:	4b34      	ldr	r3, [pc, #208]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d05c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d141      	bne.n	80027b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fd30 	bl	800219c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff fd2c 	bl	800219c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e087      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	019b      	lsls	r3, r3, #6
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	3b01      	subs	r3, #1
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	491b      	ldr	r1, [pc, #108]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <HAL_RCC_OscConfig+0x478>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff fd05 	bl	800219c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff fd01 	bl	800219c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e05c      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x416>
 80027b4:	e054      	b.n	8002860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_RCC_OscConfig+0x478>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fcee 	bl	800219c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7ff fcea 	bl	800219c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e045      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_RCC_OscConfig+0x470>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x444>
 80027e2:	e03d      	b.n	8002860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e038      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40007000 	.word	0x40007000
 80027f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_RCC_OscConfig+0x4ec>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d028      	beq.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d121      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d11a      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	4293      	cmp	r3, r2
 8002836:	d111      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0cc      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d90c      	bls.n	80028ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b65      	ldr	r3, [pc, #404]	@ (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b63      	ldr	r3, [pc, #396]	@ (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4b59      	ldr	r3, [pc, #356]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a58      	ldr	r2, [pc, #352]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028dc:	4b53      	ldr	r3, [pc, #332]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a52      	ldr	r2, [pc, #328]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b50      	ldr	r3, [pc, #320]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	494d      	ldr	r1, [pc, #308]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d044      	beq.n	8002990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d119      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d003      	beq.n	800292e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e067      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4934      	ldr	r1, [pc, #208]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002960:	f7ff fc1c 	bl	800219c <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7ff fc18 	bl	800219c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e04f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d20c      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e032      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4916      	ldr	r1, [pc, #88]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e2:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490e      	ldr	r1, [pc, #56]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f821 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490a      	ldr	r1, [pc, #40]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a09      	ldr	r2, [pc, #36]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fb7c 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	0800635c 	.word	0x0800635c
 8002a34:	20000004 	.word	0x20000004
 8002a38:	20000008 	.word	0x20000008

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b090      	sub	sp, #64	@ 0x40
 8002a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a54:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d00d      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x40>
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	f200 80a1 	bhi.w	8002ba8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6e:	e09b      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b53      	ldr	r3, [pc, #332]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a74:	e09b      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a76:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a7a:	e098      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a86:	4b4d      	ldr	r3, [pc, #308]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	623b      	str	r3, [r7, #32]
 8002a9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4b47      	ldr	r3, [pc, #284]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa8:	fb03 f201 	mul.w	r2, r3, r1
 8002aac:	2300      	movs	r3, #0
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4a43      	ldr	r2, [pc, #268]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab6:	fba0 1202 	umull	r1, r2, r0, r2
 8002aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002abc:	460a      	mov	r2, r1
 8002abe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ac2:	4413      	add	r3, r2
 8002ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ad6:	f7fe f8bf 	bl	8000c58 <__aeabi_uldivmod>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4613      	mov	r3, r2
 8002ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae2:	e053      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae4:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	2200      	movs	r2, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	617a      	str	r2, [r7, #20]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002af6:	f04f 0b00 	mov.w	fp, #0
 8002afa:	4652      	mov	r2, sl
 8002afc:	465b      	mov	r3, fp
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	0159      	lsls	r1, r3, #5
 8002b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0c:	0150      	lsls	r0, r2, #5
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	ebb2 080a 	subs.w	r8, r2, sl
 8002b16:	eb63 090b 	sbc.w	r9, r3, fp
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b32:	eb63 0509 	sbc.w	r5, r3, r9
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	00eb      	lsls	r3, r5, #3
 8002b40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b44:	00e2      	lsls	r2, r4, #3
 8002b46:	4614      	mov	r4, r2
 8002b48:	461d      	mov	r5, r3
 8002b4a:	eb14 030a 	adds.w	r3, r4, sl
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	eb45 030b 	adc.w	r3, r5, fp
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b62:	4629      	mov	r1, r5
 8002b64:	028b      	lsls	r3, r1, #10
 8002b66:	4621      	mov	r1, r4
 8002b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	028a      	lsls	r2, r1, #10
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b76:	2200      	movs	r2, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b80:	f7fe f86a 	bl	8000c58 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ba6:	e002      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002baa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3740      	adds	r7, #64	@ 0x40
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	017d7840 	.word	0x017d7840

08002bc8 <__cvt>:
 8002bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bcc:	ec57 6b10 	vmov	r6, r7, d0
 8002bd0:	2f00      	cmp	r7, #0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	bfbb      	ittet	lt
 8002bda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002bde:	461f      	movlt	r7, r3
 8002be0:	2300      	movge	r3, #0
 8002be2:	232d      	movlt	r3, #45	@ 0x2d
 8002be4:	700b      	strb	r3, [r1, #0]
 8002be6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002be8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002bec:	4691      	mov	r9, r2
 8002bee:	f023 0820 	bic.w	r8, r3, #32
 8002bf2:	bfbc      	itt	lt
 8002bf4:	4632      	movlt	r2, r6
 8002bf6:	4616      	movlt	r6, r2
 8002bf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002bfc:	d005      	beq.n	8002c0a <__cvt+0x42>
 8002bfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002c02:	d100      	bne.n	8002c06 <__cvt+0x3e>
 8002c04:	3401      	adds	r4, #1
 8002c06:	2102      	movs	r1, #2
 8002c08:	e000      	b.n	8002c0c <__cvt+0x44>
 8002c0a:	2103      	movs	r1, #3
 8002c0c:	ab03      	add	r3, sp, #12
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	ab02      	add	r3, sp, #8
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	ec47 6b10 	vmov	d0, r6, r7
 8002c18:	4653      	mov	r3, sl
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	f000 fe5c 	bl	80038d8 <_dtoa_r>
 8002c20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002c24:	4605      	mov	r5, r0
 8002c26:	d119      	bne.n	8002c5c <__cvt+0x94>
 8002c28:	f019 0f01 	tst.w	r9, #1
 8002c2c:	d00e      	beq.n	8002c4c <__cvt+0x84>
 8002c2e:	eb00 0904 	add.w	r9, r0, r4
 8002c32:	2200      	movs	r2, #0
 8002c34:	2300      	movs	r3, #0
 8002c36:	4630      	mov	r0, r6
 8002c38:	4639      	mov	r1, r7
 8002c3a:	f7fd ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c3e:	b108      	cbz	r0, 8002c44 <__cvt+0x7c>
 8002c40:	f8cd 900c 	str.w	r9, [sp, #12]
 8002c44:	2230      	movs	r2, #48	@ 0x30
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	454b      	cmp	r3, r9
 8002c4a:	d31e      	bcc.n	8002c8a <__cvt+0xc2>
 8002c4c:	9b03      	ldr	r3, [sp, #12]
 8002c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002c50:	1b5b      	subs	r3, r3, r5
 8002c52:	4628      	mov	r0, r5
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	b004      	add	sp, #16
 8002c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002c60:	eb00 0904 	add.w	r9, r0, r4
 8002c64:	d1e5      	bne.n	8002c32 <__cvt+0x6a>
 8002c66:	7803      	ldrb	r3, [r0, #0]
 8002c68:	2b30      	cmp	r3, #48	@ 0x30
 8002c6a:	d10a      	bne.n	8002c82 <__cvt+0xba>
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2300      	movs	r3, #0
 8002c70:	4630      	mov	r0, r6
 8002c72:	4639      	mov	r1, r7
 8002c74:	f7fd ff30 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c78:	b918      	cbnz	r0, 8002c82 <__cvt+0xba>
 8002c7a:	f1c4 0401 	rsb	r4, r4, #1
 8002c7e:	f8ca 4000 	str.w	r4, [sl]
 8002c82:	f8da 3000 	ldr.w	r3, [sl]
 8002c86:	4499      	add	r9, r3
 8002c88:	e7d3      	b.n	8002c32 <__cvt+0x6a>
 8002c8a:	1c59      	adds	r1, r3, #1
 8002c8c:	9103      	str	r1, [sp, #12]
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e7d9      	b.n	8002c46 <__cvt+0x7e>

08002c92 <__exponent>:
 8002c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c94:	2900      	cmp	r1, #0
 8002c96:	bfba      	itte	lt
 8002c98:	4249      	neglt	r1, r1
 8002c9a:	232d      	movlt	r3, #45	@ 0x2d
 8002c9c:	232b      	movge	r3, #43	@ 0x2b
 8002c9e:	2909      	cmp	r1, #9
 8002ca0:	7002      	strb	r2, [r0, #0]
 8002ca2:	7043      	strb	r3, [r0, #1]
 8002ca4:	dd29      	ble.n	8002cfa <__exponent+0x68>
 8002ca6:	f10d 0307 	add.w	r3, sp, #7
 8002caa:	461d      	mov	r5, r3
 8002cac:	270a      	movs	r7, #10
 8002cae:	461a      	mov	r2, r3
 8002cb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8002cb4:	fb07 1416 	mls	r4, r7, r6, r1
 8002cb8:	3430      	adds	r4, #48	@ 0x30
 8002cba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	2c63      	cmp	r4, #99	@ 0x63
 8002cc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cc6:	4631      	mov	r1, r6
 8002cc8:	dcf1      	bgt.n	8002cae <__exponent+0x1c>
 8002cca:	3130      	adds	r1, #48	@ 0x30
 8002ccc:	1e94      	subs	r4, r2, #2
 8002cce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002cd2:	1c41      	adds	r1, r0, #1
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	42ab      	cmp	r3, r5
 8002cd8:	d30a      	bcc.n	8002cf0 <__exponent+0x5e>
 8002cda:	f10d 0309 	add.w	r3, sp, #9
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	42ac      	cmp	r4, r5
 8002ce2:	bf88      	it	hi
 8002ce4:	2300      	movhi	r3, #0
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	4403      	add	r3, r0
 8002cea:	1a18      	subs	r0, r3, r0
 8002cec:	b003      	add	sp, #12
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002cf4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002cf8:	e7ed      	b.n	8002cd6 <__exponent+0x44>
 8002cfa:	2330      	movs	r3, #48	@ 0x30
 8002cfc:	3130      	adds	r1, #48	@ 0x30
 8002cfe:	7083      	strb	r3, [r0, #2]
 8002d00:	70c1      	strb	r1, [r0, #3]
 8002d02:	1d03      	adds	r3, r0, #4
 8002d04:	e7f1      	b.n	8002cea <__exponent+0x58>
	...

08002d08 <_printf_float>:
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	b08d      	sub	sp, #52	@ 0x34
 8002d0e:	460c      	mov	r4, r1
 8002d10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002d14:	4616      	mov	r6, r2
 8002d16:	461f      	mov	r7, r3
 8002d18:	4605      	mov	r5, r0
 8002d1a:	f000 fcdb 	bl	80036d4 <_localeconv_r>
 8002d1e:	6803      	ldr	r3, [r0, #0]
 8002d20:	9304      	str	r3, [sp, #16]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd faac 	bl	8000280 <strlen>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d30:	9005      	str	r0, [sp, #20]
 8002d32:	3307      	adds	r3, #7
 8002d34:	f023 0307 	bic.w	r3, r3, #7
 8002d38:	f103 0208 	add.w	r2, r3, #8
 8002d3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002d40:	f8d4 b000 	ldr.w	fp, [r4]
 8002d44:	f8c8 2000 	str.w	r2, [r8]
 8002d48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002d50:	9307      	str	r3, [sp, #28]
 8002d52:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8002fd0 <_printf_float+0x2c8>)
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	f7fd feea 	bl	8000b3c <__aeabi_dcmpun>
 8002d68:	bb70      	cbnz	r0, 8002dc8 <_printf_float+0xc0>
 8002d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d6e:	4b98      	ldr	r3, [pc, #608]	@ (8002fd0 <_printf_float+0x2c8>)
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	f7fd fec4 	bl	8000b00 <__aeabi_dcmple>
 8002d78:	bb30      	cbnz	r0, 8002dc8 <_printf_float+0xc0>
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4640      	mov	r0, r8
 8002d80:	4649      	mov	r1, r9
 8002d82:	f7fd feb3 	bl	8000aec <__aeabi_dcmplt>
 8002d86:	b110      	cbz	r0, 8002d8e <_printf_float+0x86>
 8002d88:	232d      	movs	r3, #45	@ 0x2d
 8002d8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d8e:	4a91      	ldr	r2, [pc, #580]	@ (8002fd4 <_printf_float+0x2cc>)
 8002d90:	4b91      	ldr	r3, [pc, #580]	@ (8002fd8 <_printf_float+0x2d0>)
 8002d92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002d96:	bf94      	ite	ls
 8002d98:	4690      	movls	r8, r2
 8002d9a:	4698      	movhi	r8, r3
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	6123      	str	r3, [r4, #16]
 8002da0:	f02b 0304 	bic.w	r3, fp, #4
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	f04f 0900 	mov.w	r9, #0
 8002daa:	9700      	str	r7, [sp, #0]
 8002dac:	4633      	mov	r3, r6
 8002dae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002db0:	4621      	mov	r1, r4
 8002db2:	4628      	mov	r0, r5
 8002db4:	f000 f9d2 	bl	800315c <_printf_common>
 8002db8:	3001      	adds	r0, #1
 8002dba:	f040 808d 	bne.w	8002ed8 <_printf_float+0x1d0>
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc2:	b00d      	add	sp, #52	@ 0x34
 8002dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	4640      	mov	r0, r8
 8002dce:	4649      	mov	r1, r9
 8002dd0:	f7fd feb4 	bl	8000b3c <__aeabi_dcmpun>
 8002dd4:	b140      	cbz	r0, 8002de8 <_printf_float+0xe0>
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bfbc      	itt	lt
 8002ddc:	232d      	movlt	r3, #45	@ 0x2d
 8002dde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002de2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fdc <_printf_float+0x2d4>)
 8002de4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fe0 <_printf_float+0x2d8>)
 8002de6:	e7d4      	b.n	8002d92 <_printf_float+0x8a>
 8002de8:	6863      	ldr	r3, [r4, #4]
 8002dea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002dee:	9206      	str	r2, [sp, #24]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	d13b      	bne.n	8002e6c <_printf_float+0x164>
 8002df4:	2306      	movs	r3, #6
 8002df6:	6063      	str	r3, [r4, #4]
 8002df8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	6022      	str	r2, [r4, #0]
 8002e00:	9303      	str	r3, [sp, #12]
 8002e02:	ab0a      	add	r3, sp, #40	@ 0x28
 8002e04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002e08:	ab09      	add	r3, sp, #36	@ 0x24
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	6861      	ldr	r1, [r4, #4]
 8002e0e:	ec49 8b10 	vmov	d0, r8, r9
 8002e12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002e16:	4628      	mov	r0, r5
 8002e18:	f7ff fed6 	bl	8002bc8 <__cvt>
 8002e1c:	9b06      	ldr	r3, [sp, #24]
 8002e1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002e20:	2b47      	cmp	r3, #71	@ 0x47
 8002e22:	4680      	mov	r8, r0
 8002e24:	d129      	bne.n	8002e7a <_printf_float+0x172>
 8002e26:	1cc8      	adds	r0, r1, #3
 8002e28:	db02      	blt.n	8002e30 <_printf_float+0x128>
 8002e2a:	6863      	ldr	r3, [r4, #4]
 8002e2c:	4299      	cmp	r1, r3
 8002e2e:	dd41      	ble.n	8002eb4 <_printf_float+0x1ac>
 8002e30:	f1aa 0a02 	sub.w	sl, sl, #2
 8002e34:	fa5f fa8a 	uxtb.w	sl, sl
 8002e38:	3901      	subs	r1, #1
 8002e3a:	4652      	mov	r2, sl
 8002e3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002e40:	9109      	str	r1, [sp, #36]	@ 0x24
 8002e42:	f7ff ff26 	bl	8002c92 <__exponent>
 8002e46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002e48:	1813      	adds	r3, r2, r0
 8002e4a:	2a01      	cmp	r2, #1
 8002e4c:	4681      	mov	r9, r0
 8002e4e:	6123      	str	r3, [r4, #16]
 8002e50:	dc02      	bgt.n	8002e58 <_printf_float+0x150>
 8002e52:	6822      	ldr	r2, [r4, #0]
 8002e54:	07d2      	lsls	r2, r2, #31
 8002e56:	d501      	bpl.n	8002e5c <_printf_float+0x154>
 8002e58:	3301      	adds	r3, #1
 8002e5a:	6123      	str	r3, [r4, #16]
 8002e5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0a2      	beq.n	8002daa <_printf_float+0xa2>
 8002e64:	232d      	movs	r3, #45	@ 0x2d
 8002e66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e6a:	e79e      	b.n	8002daa <_printf_float+0xa2>
 8002e6c:	9a06      	ldr	r2, [sp, #24]
 8002e6e:	2a47      	cmp	r2, #71	@ 0x47
 8002e70:	d1c2      	bne.n	8002df8 <_printf_float+0xf0>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1c0      	bne.n	8002df8 <_printf_float+0xf0>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e7bd      	b.n	8002df6 <_printf_float+0xee>
 8002e7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002e7e:	d9db      	bls.n	8002e38 <_printf_float+0x130>
 8002e80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002e84:	d118      	bne.n	8002eb8 <_printf_float+0x1b0>
 8002e86:	2900      	cmp	r1, #0
 8002e88:	6863      	ldr	r3, [r4, #4]
 8002e8a:	dd0b      	ble.n	8002ea4 <_printf_float+0x19c>
 8002e8c:	6121      	str	r1, [r4, #16]
 8002e8e:	b913      	cbnz	r3, 8002e96 <_printf_float+0x18e>
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	07d0      	lsls	r0, r2, #31
 8002e94:	d502      	bpl.n	8002e9c <_printf_float+0x194>
 8002e96:	3301      	adds	r3, #1
 8002e98:	440b      	add	r3, r1
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002e9e:	f04f 0900 	mov.w	r9, #0
 8002ea2:	e7db      	b.n	8002e5c <_printf_float+0x154>
 8002ea4:	b913      	cbnz	r3, 8002eac <_printf_float+0x1a4>
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	07d2      	lsls	r2, r2, #31
 8002eaa:	d501      	bpl.n	8002eb0 <_printf_float+0x1a8>
 8002eac:	3302      	adds	r3, #2
 8002eae:	e7f4      	b.n	8002e9a <_printf_float+0x192>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e7f2      	b.n	8002e9a <_printf_float+0x192>
 8002eb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002eba:	4299      	cmp	r1, r3
 8002ebc:	db05      	blt.n	8002eca <_printf_float+0x1c2>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	6121      	str	r1, [r4, #16]
 8002ec2:	07d8      	lsls	r0, r3, #31
 8002ec4:	d5ea      	bpl.n	8002e9c <_printf_float+0x194>
 8002ec6:	1c4b      	adds	r3, r1, #1
 8002ec8:	e7e7      	b.n	8002e9a <_printf_float+0x192>
 8002eca:	2900      	cmp	r1, #0
 8002ecc:	bfd4      	ite	le
 8002ece:	f1c1 0202 	rsble	r2, r1, #2
 8002ed2:	2201      	movgt	r2, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	e7e0      	b.n	8002e9a <_printf_float+0x192>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	055a      	lsls	r2, r3, #21
 8002edc:	d407      	bmi.n	8002eee <_printf_float+0x1e6>
 8002ede:	6923      	ldr	r3, [r4, #16]
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	47b8      	blx	r7
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d12b      	bne.n	8002f44 <_printf_float+0x23c>
 8002eec:	e767      	b.n	8002dbe <_printf_float+0xb6>
 8002eee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002ef2:	f240 80dd 	bls.w	80030b0 <_printf_float+0x3a8>
 8002ef6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002efa:	2200      	movs	r2, #0
 8002efc:	2300      	movs	r3, #0
 8002efe:	f7fd fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d033      	beq.n	8002f6e <_printf_float+0x266>
 8002f06:	4a37      	ldr	r2, [pc, #220]	@ (8002fe4 <_printf_float+0x2dc>)
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	47b8      	blx	r7
 8002f10:	3001      	adds	r0, #1
 8002f12:	f43f af54 	beq.w	8002dbe <_printf_float+0xb6>
 8002f16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002f1a:	4543      	cmp	r3, r8
 8002f1c:	db02      	blt.n	8002f24 <_printf_float+0x21c>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	07d8      	lsls	r0, r3, #31
 8002f22:	d50f      	bpl.n	8002f44 <_printf_float+0x23c>
 8002f24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f28:	4631      	mov	r1, r6
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	47b8      	blx	r7
 8002f2e:	3001      	adds	r0, #1
 8002f30:	f43f af45 	beq.w	8002dbe <_printf_float+0xb6>
 8002f34:	f04f 0900 	mov.w	r9, #0
 8002f38:	f108 38ff 	add.w	r8, r8, #4294967295
 8002f3c:	f104 0a1a 	add.w	sl, r4, #26
 8002f40:	45c8      	cmp	r8, r9
 8002f42:	dc09      	bgt.n	8002f58 <_printf_float+0x250>
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	079b      	lsls	r3, r3, #30
 8002f48:	f100 8103 	bmi.w	8003152 <_printf_float+0x44a>
 8002f4c:	68e0      	ldr	r0, [r4, #12]
 8002f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f50:	4298      	cmp	r0, r3
 8002f52:	bfb8      	it	lt
 8002f54:	4618      	movlt	r0, r3
 8002f56:	e734      	b.n	8002dc2 <_printf_float+0xba>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4652      	mov	r2, sl
 8002f5c:	4631      	mov	r1, r6
 8002f5e:	4628      	mov	r0, r5
 8002f60:	47b8      	blx	r7
 8002f62:	3001      	adds	r0, #1
 8002f64:	f43f af2b 	beq.w	8002dbe <_printf_float+0xb6>
 8002f68:	f109 0901 	add.w	r9, r9, #1
 8002f6c:	e7e8      	b.n	8002f40 <_printf_float+0x238>
 8002f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dc39      	bgt.n	8002fe8 <_printf_float+0x2e0>
 8002f74:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <_printf_float+0x2dc>)
 8002f76:	2301      	movs	r3, #1
 8002f78:	4631      	mov	r1, r6
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	47b8      	blx	r7
 8002f7e:	3001      	adds	r0, #1
 8002f80:	f43f af1d 	beq.w	8002dbe <_printf_float+0xb6>
 8002f84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002f88:	ea59 0303 	orrs.w	r3, r9, r3
 8002f8c:	d102      	bne.n	8002f94 <_printf_float+0x28c>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	07d9      	lsls	r1, r3, #31
 8002f92:	d5d7      	bpl.n	8002f44 <_printf_float+0x23c>
 8002f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f98:	4631      	mov	r1, r6
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	47b8      	blx	r7
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	f43f af0d 	beq.w	8002dbe <_printf_float+0xb6>
 8002fa4:	f04f 0a00 	mov.w	sl, #0
 8002fa8:	f104 0b1a 	add.w	fp, r4, #26
 8002fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fae:	425b      	negs	r3, r3
 8002fb0:	4553      	cmp	r3, sl
 8002fb2:	dc01      	bgt.n	8002fb8 <_printf_float+0x2b0>
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	e793      	b.n	8002ee0 <_printf_float+0x1d8>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	465a      	mov	r2, fp
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	47b8      	blx	r7
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	f43f aefb 	beq.w	8002dbe <_printf_float+0xb6>
 8002fc8:	f10a 0a01 	add.w	sl, sl, #1
 8002fcc:	e7ee      	b.n	8002fac <_printf_float+0x2a4>
 8002fce:	bf00      	nop
 8002fd0:	7fefffff 	.word	0x7fefffff
 8002fd4:	0800636c 	.word	0x0800636c
 8002fd8:	08006370 	.word	0x08006370
 8002fdc:	08006374 	.word	0x08006374
 8002fe0:	08006378 	.word	0x08006378
 8002fe4:	0800637c 	.word	0x0800637c
 8002fe8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002fee:	4553      	cmp	r3, sl
 8002ff0:	bfa8      	it	ge
 8002ff2:	4653      	movge	r3, sl
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	4699      	mov	r9, r3
 8002ff8:	dc36      	bgt.n	8003068 <_printf_float+0x360>
 8002ffa:	f04f 0b00 	mov.w	fp, #0
 8002ffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003002:	f104 021a 	add.w	r2, r4, #26
 8003006:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003008:	9306      	str	r3, [sp, #24]
 800300a:	eba3 0309 	sub.w	r3, r3, r9
 800300e:	455b      	cmp	r3, fp
 8003010:	dc31      	bgt.n	8003076 <_printf_float+0x36e>
 8003012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003014:	459a      	cmp	sl, r3
 8003016:	dc3a      	bgt.n	800308e <_printf_float+0x386>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	07da      	lsls	r2, r3, #31
 800301c:	d437      	bmi.n	800308e <_printf_float+0x386>
 800301e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003020:	ebaa 0903 	sub.w	r9, sl, r3
 8003024:	9b06      	ldr	r3, [sp, #24]
 8003026:	ebaa 0303 	sub.w	r3, sl, r3
 800302a:	4599      	cmp	r9, r3
 800302c:	bfa8      	it	ge
 800302e:	4699      	movge	r9, r3
 8003030:	f1b9 0f00 	cmp.w	r9, #0
 8003034:	dc33      	bgt.n	800309e <_printf_float+0x396>
 8003036:	f04f 0800 	mov.w	r8, #0
 800303a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800303e:	f104 0b1a 	add.w	fp, r4, #26
 8003042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003044:	ebaa 0303 	sub.w	r3, sl, r3
 8003048:	eba3 0309 	sub.w	r3, r3, r9
 800304c:	4543      	cmp	r3, r8
 800304e:	f77f af79 	ble.w	8002f44 <_printf_float+0x23c>
 8003052:	2301      	movs	r3, #1
 8003054:	465a      	mov	r2, fp
 8003056:	4631      	mov	r1, r6
 8003058:	4628      	mov	r0, r5
 800305a:	47b8      	blx	r7
 800305c:	3001      	adds	r0, #1
 800305e:	f43f aeae 	beq.w	8002dbe <_printf_float+0xb6>
 8003062:	f108 0801 	add.w	r8, r8, #1
 8003066:	e7ec      	b.n	8003042 <_printf_float+0x33a>
 8003068:	4642      	mov	r2, r8
 800306a:	4631      	mov	r1, r6
 800306c:	4628      	mov	r0, r5
 800306e:	47b8      	blx	r7
 8003070:	3001      	adds	r0, #1
 8003072:	d1c2      	bne.n	8002ffa <_printf_float+0x2f2>
 8003074:	e6a3      	b.n	8002dbe <_printf_float+0xb6>
 8003076:	2301      	movs	r3, #1
 8003078:	4631      	mov	r1, r6
 800307a:	4628      	mov	r0, r5
 800307c:	9206      	str	r2, [sp, #24]
 800307e:	47b8      	blx	r7
 8003080:	3001      	adds	r0, #1
 8003082:	f43f ae9c 	beq.w	8002dbe <_printf_float+0xb6>
 8003086:	9a06      	ldr	r2, [sp, #24]
 8003088:	f10b 0b01 	add.w	fp, fp, #1
 800308c:	e7bb      	b.n	8003006 <_printf_float+0x2fe>
 800308e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003092:	4631      	mov	r1, r6
 8003094:	4628      	mov	r0, r5
 8003096:	47b8      	blx	r7
 8003098:	3001      	adds	r0, #1
 800309a:	d1c0      	bne.n	800301e <_printf_float+0x316>
 800309c:	e68f      	b.n	8002dbe <_printf_float+0xb6>
 800309e:	9a06      	ldr	r2, [sp, #24]
 80030a0:	464b      	mov	r3, r9
 80030a2:	4442      	add	r2, r8
 80030a4:	4631      	mov	r1, r6
 80030a6:	4628      	mov	r0, r5
 80030a8:	47b8      	blx	r7
 80030aa:	3001      	adds	r0, #1
 80030ac:	d1c3      	bne.n	8003036 <_printf_float+0x32e>
 80030ae:	e686      	b.n	8002dbe <_printf_float+0xb6>
 80030b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80030b4:	f1ba 0f01 	cmp.w	sl, #1
 80030b8:	dc01      	bgt.n	80030be <_printf_float+0x3b6>
 80030ba:	07db      	lsls	r3, r3, #31
 80030bc:	d536      	bpl.n	800312c <_printf_float+0x424>
 80030be:	2301      	movs	r3, #1
 80030c0:	4642      	mov	r2, r8
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	47b8      	blx	r7
 80030c8:	3001      	adds	r0, #1
 80030ca:	f43f ae78 	beq.w	8002dbe <_printf_float+0xb6>
 80030ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030d2:	4631      	mov	r1, r6
 80030d4:	4628      	mov	r0, r5
 80030d6:	47b8      	blx	r7
 80030d8:	3001      	adds	r0, #1
 80030da:	f43f ae70 	beq.w	8002dbe <_printf_float+0xb6>
 80030de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80030e2:	2200      	movs	r2, #0
 80030e4:	2300      	movs	r3, #0
 80030e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030ea:	f7fd fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80030ee:	b9c0      	cbnz	r0, 8003122 <_printf_float+0x41a>
 80030f0:	4653      	mov	r3, sl
 80030f2:	f108 0201 	add.w	r2, r8, #1
 80030f6:	4631      	mov	r1, r6
 80030f8:	4628      	mov	r0, r5
 80030fa:	47b8      	blx	r7
 80030fc:	3001      	adds	r0, #1
 80030fe:	d10c      	bne.n	800311a <_printf_float+0x412>
 8003100:	e65d      	b.n	8002dbe <_printf_float+0xb6>
 8003102:	2301      	movs	r3, #1
 8003104:	465a      	mov	r2, fp
 8003106:	4631      	mov	r1, r6
 8003108:	4628      	mov	r0, r5
 800310a:	47b8      	blx	r7
 800310c:	3001      	adds	r0, #1
 800310e:	f43f ae56 	beq.w	8002dbe <_printf_float+0xb6>
 8003112:	f108 0801 	add.w	r8, r8, #1
 8003116:	45d0      	cmp	r8, sl
 8003118:	dbf3      	blt.n	8003102 <_printf_float+0x3fa>
 800311a:	464b      	mov	r3, r9
 800311c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003120:	e6df      	b.n	8002ee2 <_printf_float+0x1da>
 8003122:	f04f 0800 	mov.w	r8, #0
 8003126:	f104 0b1a 	add.w	fp, r4, #26
 800312a:	e7f4      	b.n	8003116 <_printf_float+0x40e>
 800312c:	2301      	movs	r3, #1
 800312e:	4642      	mov	r2, r8
 8003130:	e7e1      	b.n	80030f6 <_printf_float+0x3ee>
 8003132:	2301      	movs	r3, #1
 8003134:	464a      	mov	r2, r9
 8003136:	4631      	mov	r1, r6
 8003138:	4628      	mov	r0, r5
 800313a:	47b8      	blx	r7
 800313c:	3001      	adds	r0, #1
 800313e:	f43f ae3e 	beq.w	8002dbe <_printf_float+0xb6>
 8003142:	f108 0801 	add.w	r8, r8, #1
 8003146:	68e3      	ldr	r3, [r4, #12]
 8003148:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800314a:	1a5b      	subs	r3, r3, r1
 800314c:	4543      	cmp	r3, r8
 800314e:	dcf0      	bgt.n	8003132 <_printf_float+0x42a>
 8003150:	e6fc      	b.n	8002f4c <_printf_float+0x244>
 8003152:	f04f 0800 	mov.w	r8, #0
 8003156:	f104 0919 	add.w	r9, r4, #25
 800315a:	e7f4      	b.n	8003146 <_printf_float+0x43e>

0800315c <_printf_common>:
 800315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003160:	4616      	mov	r6, r2
 8003162:	4698      	mov	r8, r3
 8003164:	688a      	ldr	r2, [r1, #8]
 8003166:	690b      	ldr	r3, [r1, #16]
 8003168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800316c:	4293      	cmp	r3, r2
 800316e:	bfb8      	it	lt
 8003170:	4613      	movlt	r3, r2
 8003172:	6033      	str	r3, [r6, #0]
 8003174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003178:	4607      	mov	r7, r0
 800317a:	460c      	mov	r4, r1
 800317c:	b10a      	cbz	r2, 8003182 <_printf_common+0x26>
 800317e:	3301      	adds	r3, #1
 8003180:	6033      	str	r3, [r6, #0]
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	0699      	lsls	r1, r3, #26
 8003186:	bf42      	ittt	mi
 8003188:	6833      	ldrmi	r3, [r6, #0]
 800318a:	3302      	addmi	r3, #2
 800318c:	6033      	strmi	r3, [r6, #0]
 800318e:	6825      	ldr	r5, [r4, #0]
 8003190:	f015 0506 	ands.w	r5, r5, #6
 8003194:	d106      	bne.n	80031a4 <_printf_common+0x48>
 8003196:	f104 0a19 	add.w	sl, r4, #25
 800319a:	68e3      	ldr	r3, [r4, #12]
 800319c:	6832      	ldr	r2, [r6, #0]
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	42ab      	cmp	r3, r5
 80031a2:	dc26      	bgt.n	80031f2 <_printf_common+0x96>
 80031a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031a8:	6822      	ldr	r2, [r4, #0]
 80031aa:	3b00      	subs	r3, #0
 80031ac:	bf18      	it	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	0692      	lsls	r2, r2, #26
 80031b2:	d42b      	bmi.n	800320c <_printf_common+0xb0>
 80031b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031b8:	4641      	mov	r1, r8
 80031ba:	4638      	mov	r0, r7
 80031bc:	47c8      	blx	r9
 80031be:	3001      	adds	r0, #1
 80031c0:	d01e      	beq.n	8003200 <_printf_common+0xa4>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	f003 0306 	and.w	r3, r3, #6
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf02      	ittt	eq
 80031ce:	68e5      	ldreq	r5, [r4, #12]
 80031d0:	6833      	ldreq	r3, [r6, #0]
 80031d2:	1aed      	subeq	r5, r5, r3
 80031d4:	68a3      	ldr	r3, [r4, #8]
 80031d6:	bf0c      	ite	eq
 80031d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031dc:	2500      	movne	r5, #0
 80031de:	4293      	cmp	r3, r2
 80031e0:	bfc4      	itt	gt
 80031e2:	1a9b      	subgt	r3, r3, r2
 80031e4:	18ed      	addgt	r5, r5, r3
 80031e6:	2600      	movs	r6, #0
 80031e8:	341a      	adds	r4, #26
 80031ea:	42b5      	cmp	r5, r6
 80031ec:	d11a      	bne.n	8003224 <_printf_common+0xc8>
 80031ee:	2000      	movs	r0, #0
 80031f0:	e008      	b.n	8003204 <_printf_common+0xa8>
 80031f2:	2301      	movs	r3, #1
 80031f4:	4652      	mov	r2, sl
 80031f6:	4641      	mov	r1, r8
 80031f8:	4638      	mov	r0, r7
 80031fa:	47c8      	blx	r9
 80031fc:	3001      	adds	r0, #1
 80031fe:	d103      	bne.n	8003208 <_printf_common+0xac>
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003208:	3501      	adds	r5, #1
 800320a:	e7c6      	b.n	800319a <_printf_common+0x3e>
 800320c:	18e1      	adds	r1, r4, r3
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	2030      	movs	r0, #48	@ 0x30
 8003212:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003216:	4422      	add	r2, r4
 8003218:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800321c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003220:	3302      	adds	r3, #2
 8003222:	e7c7      	b.n	80031b4 <_printf_common+0x58>
 8003224:	2301      	movs	r3, #1
 8003226:	4622      	mov	r2, r4
 8003228:	4641      	mov	r1, r8
 800322a:	4638      	mov	r0, r7
 800322c:	47c8      	blx	r9
 800322e:	3001      	adds	r0, #1
 8003230:	d0e6      	beq.n	8003200 <_printf_common+0xa4>
 8003232:	3601      	adds	r6, #1
 8003234:	e7d9      	b.n	80031ea <_printf_common+0x8e>
	...

08003238 <_printf_i>:
 8003238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	7e0f      	ldrb	r7, [r1, #24]
 800323e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003240:	2f78      	cmp	r7, #120	@ 0x78
 8003242:	4691      	mov	r9, r2
 8003244:	4680      	mov	r8, r0
 8003246:	460c      	mov	r4, r1
 8003248:	469a      	mov	sl, r3
 800324a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800324e:	d807      	bhi.n	8003260 <_printf_i+0x28>
 8003250:	2f62      	cmp	r7, #98	@ 0x62
 8003252:	d80a      	bhi.n	800326a <_printf_i+0x32>
 8003254:	2f00      	cmp	r7, #0
 8003256:	f000 80d2 	beq.w	80033fe <_printf_i+0x1c6>
 800325a:	2f58      	cmp	r7, #88	@ 0x58
 800325c:	f000 80b9 	beq.w	80033d2 <_printf_i+0x19a>
 8003260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003264:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003268:	e03a      	b.n	80032e0 <_printf_i+0xa8>
 800326a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800326e:	2b15      	cmp	r3, #21
 8003270:	d8f6      	bhi.n	8003260 <_printf_i+0x28>
 8003272:	a101      	add	r1, pc, #4	@ (adr r1, 8003278 <_printf_i+0x40>)
 8003274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003278:	080032d1 	.word	0x080032d1
 800327c:	080032e5 	.word	0x080032e5
 8003280:	08003261 	.word	0x08003261
 8003284:	08003261 	.word	0x08003261
 8003288:	08003261 	.word	0x08003261
 800328c:	08003261 	.word	0x08003261
 8003290:	080032e5 	.word	0x080032e5
 8003294:	08003261 	.word	0x08003261
 8003298:	08003261 	.word	0x08003261
 800329c:	08003261 	.word	0x08003261
 80032a0:	08003261 	.word	0x08003261
 80032a4:	080033e5 	.word	0x080033e5
 80032a8:	0800330f 	.word	0x0800330f
 80032ac:	0800339f 	.word	0x0800339f
 80032b0:	08003261 	.word	0x08003261
 80032b4:	08003261 	.word	0x08003261
 80032b8:	08003407 	.word	0x08003407
 80032bc:	08003261 	.word	0x08003261
 80032c0:	0800330f 	.word	0x0800330f
 80032c4:	08003261 	.word	0x08003261
 80032c8:	08003261 	.word	0x08003261
 80032cc:	080033a7 	.word	0x080033a7
 80032d0:	6833      	ldr	r3, [r6, #0]
 80032d2:	1d1a      	adds	r2, r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6032      	str	r2, [r6, #0]
 80032d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032e0:	2301      	movs	r3, #1
 80032e2:	e09d      	b.n	8003420 <_printf_i+0x1e8>
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	1d19      	adds	r1, r3, #4
 80032ea:	6031      	str	r1, [r6, #0]
 80032ec:	0606      	lsls	r6, r0, #24
 80032ee:	d501      	bpl.n	80032f4 <_printf_i+0xbc>
 80032f0:	681d      	ldr	r5, [r3, #0]
 80032f2:	e003      	b.n	80032fc <_printf_i+0xc4>
 80032f4:	0645      	lsls	r5, r0, #25
 80032f6:	d5fb      	bpl.n	80032f0 <_printf_i+0xb8>
 80032f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80032fc:	2d00      	cmp	r5, #0
 80032fe:	da03      	bge.n	8003308 <_printf_i+0xd0>
 8003300:	232d      	movs	r3, #45	@ 0x2d
 8003302:	426d      	negs	r5, r5
 8003304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003308:	4859      	ldr	r0, [pc, #356]	@ (8003470 <_printf_i+0x238>)
 800330a:	230a      	movs	r3, #10
 800330c:	e011      	b.n	8003332 <_printf_i+0xfa>
 800330e:	6821      	ldr	r1, [r4, #0]
 8003310:	6833      	ldr	r3, [r6, #0]
 8003312:	0608      	lsls	r0, r1, #24
 8003314:	f853 5b04 	ldr.w	r5, [r3], #4
 8003318:	d402      	bmi.n	8003320 <_printf_i+0xe8>
 800331a:	0649      	lsls	r1, r1, #25
 800331c:	bf48      	it	mi
 800331e:	b2ad      	uxthmi	r5, r5
 8003320:	2f6f      	cmp	r7, #111	@ 0x6f
 8003322:	4853      	ldr	r0, [pc, #332]	@ (8003470 <_printf_i+0x238>)
 8003324:	6033      	str	r3, [r6, #0]
 8003326:	bf14      	ite	ne
 8003328:	230a      	movne	r3, #10
 800332a:	2308      	moveq	r3, #8
 800332c:	2100      	movs	r1, #0
 800332e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003332:	6866      	ldr	r6, [r4, #4]
 8003334:	60a6      	str	r6, [r4, #8]
 8003336:	2e00      	cmp	r6, #0
 8003338:	bfa2      	ittt	ge
 800333a:	6821      	ldrge	r1, [r4, #0]
 800333c:	f021 0104 	bicge.w	r1, r1, #4
 8003340:	6021      	strge	r1, [r4, #0]
 8003342:	b90d      	cbnz	r5, 8003348 <_printf_i+0x110>
 8003344:	2e00      	cmp	r6, #0
 8003346:	d04b      	beq.n	80033e0 <_printf_i+0x1a8>
 8003348:	4616      	mov	r6, r2
 800334a:	fbb5 f1f3 	udiv	r1, r5, r3
 800334e:	fb03 5711 	mls	r7, r3, r1, r5
 8003352:	5dc7      	ldrb	r7, [r0, r7]
 8003354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003358:	462f      	mov	r7, r5
 800335a:	42bb      	cmp	r3, r7
 800335c:	460d      	mov	r5, r1
 800335e:	d9f4      	bls.n	800334a <_printf_i+0x112>
 8003360:	2b08      	cmp	r3, #8
 8003362:	d10b      	bne.n	800337c <_printf_i+0x144>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	07df      	lsls	r7, r3, #31
 8003368:	d508      	bpl.n	800337c <_printf_i+0x144>
 800336a:	6923      	ldr	r3, [r4, #16]
 800336c:	6861      	ldr	r1, [r4, #4]
 800336e:	4299      	cmp	r1, r3
 8003370:	bfde      	ittt	le
 8003372:	2330      	movle	r3, #48	@ 0x30
 8003374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800337c:	1b92      	subs	r2, r2, r6
 800337e:	6122      	str	r2, [r4, #16]
 8003380:	f8cd a000 	str.w	sl, [sp]
 8003384:	464b      	mov	r3, r9
 8003386:	aa03      	add	r2, sp, #12
 8003388:	4621      	mov	r1, r4
 800338a:	4640      	mov	r0, r8
 800338c:	f7ff fee6 	bl	800315c <_printf_common>
 8003390:	3001      	adds	r0, #1
 8003392:	d14a      	bne.n	800342a <_printf_i+0x1f2>
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	b004      	add	sp, #16
 800339a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	f043 0320 	orr.w	r3, r3, #32
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	4833      	ldr	r0, [pc, #204]	@ (8003474 <_printf_i+0x23c>)
 80033a8:	2778      	movs	r7, #120	@ 0x78
 80033aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	6831      	ldr	r1, [r6, #0]
 80033b2:	061f      	lsls	r7, r3, #24
 80033b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80033b8:	d402      	bmi.n	80033c0 <_printf_i+0x188>
 80033ba:	065f      	lsls	r7, r3, #25
 80033bc:	bf48      	it	mi
 80033be:	b2ad      	uxthmi	r5, r5
 80033c0:	6031      	str	r1, [r6, #0]
 80033c2:	07d9      	lsls	r1, r3, #31
 80033c4:	bf44      	itt	mi
 80033c6:	f043 0320 	orrmi.w	r3, r3, #32
 80033ca:	6023      	strmi	r3, [r4, #0]
 80033cc:	b11d      	cbz	r5, 80033d6 <_printf_i+0x19e>
 80033ce:	2310      	movs	r3, #16
 80033d0:	e7ac      	b.n	800332c <_printf_i+0xf4>
 80033d2:	4827      	ldr	r0, [pc, #156]	@ (8003470 <_printf_i+0x238>)
 80033d4:	e7e9      	b.n	80033aa <_printf_i+0x172>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	f023 0320 	bic.w	r3, r3, #32
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	e7f6      	b.n	80033ce <_printf_i+0x196>
 80033e0:	4616      	mov	r6, r2
 80033e2:	e7bd      	b.n	8003360 <_printf_i+0x128>
 80033e4:	6833      	ldr	r3, [r6, #0]
 80033e6:	6825      	ldr	r5, [r4, #0]
 80033e8:	6961      	ldr	r1, [r4, #20]
 80033ea:	1d18      	adds	r0, r3, #4
 80033ec:	6030      	str	r0, [r6, #0]
 80033ee:	062e      	lsls	r6, r5, #24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	d501      	bpl.n	80033f8 <_printf_i+0x1c0>
 80033f4:	6019      	str	r1, [r3, #0]
 80033f6:	e002      	b.n	80033fe <_printf_i+0x1c6>
 80033f8:	0668      	lsls	r0, r5, #25
 80033fa:	d5fb      	bpl.n	80033f4 <_printf_i+0x1bc>
 80033fc:	8019      	strh	r1, [r3, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	6123      	str	r3, [r4, #16]
 8003402:	4616      	mov	r6, r2
 8003404:	e7bc      	b.n	8003380 <_printf_i+0x148>
 8003406:	6833      	ldr	r3, [r6, #0]
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	6032      	str	r2, [r6, #0]
 800340c:	681e      	ldr	r6, [r3, #0]
 800340e:	6862      	ldr	r2, [r4, #4]
 8003410:	2100      	movs	r1, #0
 8003412:	4630      	mov	r0, r6
 8003414:	f7fc fee4 	bl	80001e0 <memchr>
 8003418:	b108      	cbz	r0, 800341e <_printf_i+0x1e6>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	6060      	str	r0, [r4, #4]
 800341e:	6863      	ldr	r3, [r4, #4]
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	2300      	movs	r3, #0
 8003424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003428:	e7aa      	b.n	8003380 <_printf_i+0x148>
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	4632      	mov	r2, r6
 800342e:	4649      	mov	r1, r9
 8003430:	4640      	mov	r0, r8
 8003432:	47d0      	blx	sl
 8003434:	3001      	adds	r0, #1
 8003436:	d0ad      	beq.n	8003394 <_printf_i+0x15c>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	079b      	lsls	r3, r3, #30
 800343c:	d413      	bmi.n	8003466 <_printf_i+0x22e>
 800343e:	68e0      	ldr	r0, [r4, #12]
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	4298      	cmp	r0, r3
 8003444:	bfb8      	it	lt
 8003446:	4618      	movlt	r0, r3
 8003448:	e7a6      	b.n	8003398 <_printf_i+0x160>
 800344a:	2301      	movs	r3, #1
 800344c:	4632      	mov	r2, r6
 800344e:	4649      	mov	r1, r9
 8003450:	4640      	mov	r0, r8
 8003452:	47d0      	blx	sl
 8003454:	3001      	adds	r0, #1
 8003456:	d09d      	beq.n	8003394 <_printf_i+0x15c>
 8003458:	3501      	adds	r5, #1
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	9903      	ldr	r1, [sp, #12]
 800345e:	1a5b      	subs	r3, r3, r1
 8003460:	42ab      	cmp	r3, r5
 8003462:	dcf2      	bgt.n	800344a <_printf_i+0x212>
 8003464:	e7eb      	b.n	800343e <_printf_i+0x206>
 8003466:	2500      	movs	r5, #0
 8003468:	f104 0619 	add.w	r6, r4, #25
 800346c:	e7f5      	b.n	800345a <_printf_i+0x222>
 800346e:	bf00      	nop
 8003470:	0800637e 	.word	0x0800637e
 8003474:	0800638f 	.word	0x0800638f

08003478 <std>:
 8003478:	2300      	movs	r3, #0
 800347a:	b510      	push	{r4, lr}
 800347c:	4604      	mov	r4, r0
 800347e:	e9c0 3300 	strd	r3, r3, [r0]
 8003482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003486:	6083      	str	r3, [r0, #8]
 8003488:	8181      	strh	r1, [r0, #12]
 800348a:	6643      	str	r3, [r0, #100]	@ 0x64
 800348c:	81c2      	strh	r2, [r0, #14]
 800348e:	6183      	str	r3, [r0, #24]
 8003490:	4619      	mov	r1, r3
 8003492:	2208      	movs	r2, #8
 8003494:	305c      	adds	r0, #92	@ 0x5c
 8003496:	f000 f914 	bl	80036c2 <memset>
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <std+0x58>)
 800349c:	6263      	str	r3, [r4, #36]	@ 0x24
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <std+0x5c>)
 80034a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80034a2:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <std+0x60>)
 80034a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <std+0x64>)
 80034a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80034aa:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <std+0x68>)
 80034ac:	6224      	str	r4, [r4, #32]
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d006      	beq.n	80034c0 <std+0x48>
 80034b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034b6:	4294      	cmp	r4, r2
 80034b8:	d002      	beq.n	80034c0 <std+0x48>
 80034ba:	33d0      	adds	r3, #208	@ 0xd0
 80034bc:	429c      	cmp	r4, r3
 80034be:	d105      	bne.n	80034cc <std+0x54>
 80034c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c8:	f000 b978 	b.w	80037bc <__retarget_lock_init_recursive>
 80034cc:	bd10      	pop	{r4, pc}
 80034ce:	bf00      	nop
 80034d0:	0800363d 	.word	0x0800363d
 80034d4:	0800365f 	.word	0x0800365f
 80034d8:	08003697 	.word	0x08003697
 80034dc:	080036bb 	.word	0x080036bb
 80034e0:	2000020c 	.word	0x2000020c

080034e4 <stdio_exit_handler>:
 80034e4:	4a02      	ldr	r2, [pc, #8]	@ (80034f0 <stdio_exit_handler+0xc>)
 80034e6:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <stdio_exit_handler+0x10>)
 80034e8:	4803      	ldr	r0, [pc, #12]	@ (80034f8 <stdio_exit_handler+0x14>)
 80034ea:	f000 b869 	b.w	80035c0 <_fwalk_sglue>
 80034ee:	bf00      	nop
 80034f0:	20000010 	.word	0x20000010
 80034f4:	0800511d 	.word	0x0800511d
 80034f8:	20000020 	.word	0x20000020

080034fc <cleanup_stdio>:
 80034fc:	6841      	ldr	r1, [r0, #4]
 80034fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <cleanup_stdio+0x34>)
 8003500:	4299      	cmp	r1, r3
 8003502:	b510      	push	{r4, lr}
 8003504:	4604      	mov	r4, r0
 8003506:	d001      	beq.n	800350c <cleanup_stdio+0x10>
 8003508:	f001 fe08 	bl	800511c <_fflush_r>
 800350c:	68a1      	ldr	r1, [r4, #8]
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <cleanup_stdio+0x38>)
 8003510:	4299      	cmp	r1, r3
 8003512:	d002      	beq.n	800351a <cleanup_stdio+0x1e>
 8003514:	4620      	mov	r0, r4
 8003516:	f001 fe01 	bl	800511c <_fflush_r>
 800351a:	68e1      	ldr	r1, [r4, #12]
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <cleanup_stdio+0x3c>)
 800351e:	4299      	cmp	r1, r3
 8003520:	d004      	beq.n	800352c <cleanup_stdio+0x30>
 8003522:	4620      	mov	r0, r4
 8003524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003528:	f001 bdf8 	b.w	800511c <_fflush_r>
 800352c:	bd10      	pop	{r4, pc}
 800352e:	bf00      	nop
 8003530:	2000020c 	.word	0x2000020c
 8003534:	20000274 	.word	0x20000274
 8003538:	200002dc 	.word	0x200002dc

0800353c <global_stdio_init.part.0>:
 800353c:	b510      	push	{r4, lr}
 800353e:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <global_stdio_init.part.0+0x30>)
 8003540:	4c0b      	ldr	r4, [pc, #44]	@ (8003570 <global_stdio_init.part.0+0x34>)
 8003542:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <global_stdio_init.part.0+0x38>)
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	4620      	mov	r0, r4
 8003548:	2200      	movs	r2, #0
 800354a:	2104      	movs	r1, #4
 800354c:	f7ff ff94 	bl	8003478 <std>
 8003550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003554:	2201      	movs	r2, #1
 8003556:	2109      	movs	r1, #9
 8003558:	f7ff ff8e 	bl	8003478 <std>
 800355c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003560:	2202      	movs	r2, #2
 8003562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003566:	2112      	movs	r1, #18
 8003568:	f7ff bf86 	b.w	8003478 <std>
 800356c:	20000344 	.word	0x20000344
 8003570:	2000020c 	.word	0x2000020c
 8003574:	080034e5 	.word	0x080034e5

08003578 <__sfp_lock_acquire>:
 8003578:	4801      	ldr	r0, [pc, #4]	@ (8003580 <__sfp_lock_acquire+0x8>)
 800357a:	f000 b920 	b.w	80037be <__retarget_lock_acquire_recursive>
 800357e:	bf00      	nop
 8003580:	2000034d 	.word	0x2000034d

08003584 <__sfp_lock_release>:
 8003584:	4801      	ldr	r0, [pc, #4]	@ (800358c <__sfp_lock_release+0x8>)
 8003586:	f000 b91b 	b.w	80037c0 <__retarget_lock_release_recursive>
 800358a:	bf00      	nop
 800358c:	2000034d 	.word	0x2000034d

08003590 <__sinit>:
 8003590:	b510      	push	{r4, lr}
 8003592:	4604      	mov	r4, r0
 8003594:	f7ff fff0 	bl	8003578 <__sfp_lock_acquire>
 8003598:	6a23      	ldr	r3, [r4, #32]
 800359a:	b11b      	cbz	r3, 80035a4 <__sinit+0x14>
 800359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a0:	f7ff bff0 	b.w	8003584 <__sfp_lock_release>
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <__sinit+0x28>)
 80035a6:	6223      	str	r3, [r4, #32]
 80035a8:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <__sinit+0x2c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f5      	bne.n	800359c <__sinit+0xc>
 80035b0:	f7ff ffc4 	bl	800353c <global_stdio_init.part.0>
 80035b4:	e7f2      	b.n	800359c <__sinit+0xc>
 80035b6:	bf00      	nop
 80035b8:	080034fd 	.word	0x080034fd
 80035bc:	20000344 	.word	0x20000344

080035c0 <_fwalk_sglue>:
 80035c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c4:	4607      	mov	r7, r0
 80035c6:	4688      	mov	r8, r1
 80035c8:	4614      	mov	r4, r2
 80035ca:	2600      	movs	r6, #0
 80035cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035d0:	f1b9 0901 	subs.w	r9, r9, #1
 80035d4:	d505      	bpl.n	80035e2 <_fwalk_sglue+0x22>
 80035d6:	6824      	ldr	r4, [r4, #0]
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d1f7      	bne.n	80035cc <_fwalk_sglue+0xc>
 80035dc:	4630      	mov	r0, r6
 80035de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035e2:	89ab      	ldrh	r3, [r5, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d907      	bls.n	80035f8 <_fwalk_sglue+0x38>
 80035e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035ec:	3301      	adds	r3, #1
 80035ee:	d003      	beq.n	80035f8 <_fwalk_sglue+0x38>
 80035f0:	4629      	mov	r1, r5
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c0      	blx	r8
 80035f6:	4306      	orrs	r6, r0
 80035f8:	3568      	adds	r5, #104	@ 0x68
 80035fa:	e7e9      	b.n	80035d0 <_fwalk_sglue+0x10>

080035fc <siprintf>:
 80035fc:	b40e      	push	{r1, r2, r3}
 80035fe:	b500      	push	{lr}
 8003600:	b09c      	sub	sp, #112	@ 0x70
 8003602:	ab1d      	add	r3, sp, #116	@ 0x74
 8003604:	9002      	str	r0, [sp, #8]
 8003606:	9006      	str	r0, [sp, #24]
 8003608:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800360c:	4809      	ldr	r0, [pc, #36]	@ (8003634 <siprintf+0x38>)
 800360e:	9107      	str	r1, [sp, #28]
 8003610:	9104      	str	r1, [sp, #16]
 8003612:	4909      	ldr	r1, [pc, #36]	@ (8003638 <siprintf+0x3c>)
 8003614:	f853 2b04 	ldr.w	r2, [r3], #4
 8003618:	9105      	str	r1, [sp, #20]
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	a902      	add	r1, sp, #8
 8003620:	f001 fbfc 	bl	8004e1c <_svfiprintf_r>
 8003624:	9b02      	ldr	r3, [sp, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	b01c      	add	sp, #112	@ 0x70
 800362c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003630:	b003      	add	sp, #12
 8003632:	4770      	bx	lr
 8003634:	2000001c 	.word	0x2000001c
 8003638:	ffff0208 	.word	0xffff0208

0800363c <__sread>:
 800363c:	b510      	push	{r4, lr}
 800363e:	460c      	mov	r4, r1
 8003640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003644:	f000 f86c 	bl	8003720 <_read_r>
 8003648:	2800      	cmp	r0, #0
 800364a:	bfab      	itete	ge
 800364c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800364e:	89a3      	ldrhlt	r3, [r4, #12]
 8003650:	181b      	addge	r3, r3, r0
 8003652:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003656:	bfac      	ite	ge
 8003658:	6563      	strge	r3, [r4, #84]	@ 0x54
 800365a:	81a3      	strhlt	r3, [r4, #12]
 800365c:	bd10      	pop	{r4, pc}

0800365e <__swrite>:
 800365e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003662:	461f      	mov	r7, r3
 8003664:	898b      	ldrh	r3, [r1, #12]
 8003666:	05db      	lsls	r3, r3, #23
 8003668:	4605      	mov	r5, r0
 800366a:	460c      	mov	r4, r1
 800366c:	4616      	mov	r6, r2
 800366e:	d505      	bpl.n	800367c <__swrite+0x1e>
 8003670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003674:	2302      	movs	r3, #2
 8003676:	2200      	movs	r2, #0
 8003678:	f000 f840 	bl	80036fc <_lseek_r>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003686:	81a3      	strh	r3, [r4, #12]
 8003688:	4632      	mov	r2, r6
 800368a:	463b      	mov	r3, r7
 800368c:	4628      	mov	r0, r5
 800368e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003692:	f000 b857 	b.w	8003744 <_write_r>

08003696 <__sseek>:
 8003696:	b510      	push	{r4, lr}
 8003698:	460c      	mov	r4, r1
 800369a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369e:	f000 f82d 	bl	80036fc <_lseek_r>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	bf15      	itete	ne
 80036a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036b2:	81a3      	strheq	r3, [r4, #12]
 80036b4:	bf18      	it	ne
 80036b6:	81a3      	strhne	r3, [r4, #12]
 80036b8:	bd10      	pop	{r4, pc}

080036ba <__sclose>:
 80036ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036be:	f000 b80d 	b.w	80036dc <_close_r>

080036c2 <memset>:
 80036c2:	4402      	add	r2, r0
 80036c4:	4603      	mov	r3, r0
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d100      	bne.n	80036cc <memset+0xa>
 80036ca:	4770      	bx	lr
 80036cc:	f803 1b01 	strb.w	r1, [r3], #1
 80036d0:	e7f9      	b.n	80036c6 <memset+0x4>
	...

080036d4 <_localeconv_r>:
 80036d4:	4800      	ldr	r0, [pc, #0]	@ (80036d8 <_localeconv_r+0x4>)
 80036d6:	4770      	bx	lr
 80036d8:	2000015c 	.word	0x2000015c

080036dc <_close_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4d06      	ldr	r5, [pc, #24]	@ (80036f8 <_close_r+0x1c>)
 80036e0:	2300      	movs	r3, #0
 80036e2:	4604      	mov	r4, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	f7fe fc4b 	bl	8001f82 <_close>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_close_r+0x1a>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_close_r+0x1a>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	20000348 	.word	0x20000348

080036fc <_lseek_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d07      	ldr	r5, [pc, #28]	@ (800371c <_lseek_r+0x20>)
 8003700:	4604      	mov	r4, r0
 8003702:	4608      	mov	r0, r1
 8003704:	4611      	mov	r1, r2
 8003706:	2200      	movs	r2, #0
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7fe fc60 	bl	8001fd0 <_lseek>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_lseek_r+0x1e>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_lseek_r+0x1e>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	20000348 	.word	0x20000348

08003720 <_read_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d07      	ldr	r5, [pc, #28]	@ (8003740 <_read_r+0x20>)
 8003724:	4604      	mov	r4, r0
 8003726:	4608      	mov	r0, r1
 8003728:	4611      	mov	r1, r2
 800372a:	2200      	movs	r2, #0
 800372c:	602a      	str	r2, [r5, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	f7fe fbee 	bl	8001f10 <_read>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_read_r+0x1e>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_read_r+0x1e>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	20000348 	.word	0x20000348

08003744 <_write_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d07      	ldr	r5, [pc, #28]	@ (8003764 <_write_r+0x20>)
 8003748:	4604      	mov	r4, r0
 800374a:	4608      	mov	r0, r1
 800374c:	4611      	mov	r1, r2
 800374e:	2200      	movs	r2, #0
 8003750:	602a      	str	r2, [r5, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f7fe fbf9 	bl	8001f4a <_write>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_write_r+0x1e>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b103      	cbz	r3, 8003762 <_write_r+0x1e>
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	20000348 	.word	0x20000348

08003768 <__errno>:
 8003768:	4b01      	ldr	r3, [pc, #4]	@ (8003770 <__errno+0x8>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000001c 	.word	0x2000001c

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4d0d      	ldr	r5, [pc, #52]	@ (80037ac <__libc_init_array+0x38>)
 8003778:	4c0d      	ldr	r4, [pc, #52]	@ (80037b0 <__libc_init_array+0x3c>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	2600      	movs	r6, #0
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	4d0b      	ldr	r5, [pc, #44]	@ (80037b4 <__libc_init_array+0x40>)
 8003786:	4c0c      	ldr	r4, [pc, #48]	@ (80037b8 <__libc_init_array+0x44>)
 8003788:	f002 fdae 	bl	80062e8 <_init>
 800378c:	1b64      	subs	r4, r4, r5
 800378e:	10a4      	asrs	r4, r4, #2
 8003790:	2600      	movs	r6, #0
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f855 3b04 	ldr.w	r3, [r5], #4
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	08006700 	.word	0x08006700
 80037b0:	08006700 	.word	0x08006700
 80037b4:	08006700 	.word	0x08006700
 80037b8:	08006704 	.word	0x08006704

080037bc <__retarget_lock_init_recursive>:
 80037bc:	4770      	bx	lr

080037be <__retarget_lock_acquire_recursive>:
 80037be:	4770      	bx	lr

080037c0 <__retarget_lock_release_recursive>:
 80037c0:	4770      	bx	lr

080037c2 <quorem>:
 80037c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c6:	6903      	ldr	r3, [r0, #16]
 80037c8:	690c      	ldr	r4, [r1, #16]
 80037ca:	42a3      	cmp	r3, r4
 80037cc:	4607      	mov	r7, r0
 80037ce:	db7e      	blt.n	80038ce <quorem+0x10c>
 80037d0:	3c01      	subs	r4, #1
 80037d2:	f101 0814 	add.w	r8, r1, #20
 80037d6:	00a3      	lsls	r3, r4, #2
 80037d8:	f100 0514 	add.w	r5, r0, #20
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80037e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037ec:	3301      	adds	r3, #1
 80037ee:	429a      	cmp	r2, r3
 80037f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80037f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80037f8:	d32e      	bcc.n	8003858 <quorem+0x96>
 80037fa:	f04f 0a00 	mov.w	sl, #0
 80037fe:	46c4      	mov	ip, r8
 8003800:	46ae      	mov	lr, r5
 8003802:	46d3      	mov	fp, sl
 8003804:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003808:	b298      	uxth	r0, r3
 800380a:	fb06 a000 	mla	r0, r6, r0, sl
 800380e:	0c02      	lsrs	r2, r0, #16
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	fb06 2303 	mla	r3, r6, r3, r2
 8003816:	f8de 2000 	ldr.w	r2, [lr]
 800381a:	b280      	uxth	r0, r0
 800381c:	b292      	uxth	r2, r2
 800381e:	1a12      	subs	r2, r2, r0
 8003820:	445a      	add	r2, fp
 8003822:	f8de 0000 	ldr.w	r0, [lr]
 8003826:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800382a:	b29b      	uxth	r3, r3
 800382c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003830:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003834:	b292      	uxth	r2, r2
 8003836:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800383a:	45e1      	cmp	r9, ip
 800383c:	f84e 2b04 	str.w	r2, [lr], #4
 8003840:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003844:	d2de      	bcs.n	8003804 <quorem+0x42>
 8003846:	9b00      	ldr	r3, [sp, #0]
 8003848:	58eb      	ldr	r3, [r5, r3]
 800384a:	b92b      	cbnz	r3, 8003858 <quorem+0x96>
 800384c:	9b01      	ldr	r3, [sp, #4]
 800384e:	3b04      	subs	r3, #4
 8003850:	429d      	cmp	r5, r3
 8003852:	461a      	mov	r2, r3
 8003854:	d32f      	bcc.n	80038b6 <quorem+0xf4>
 8003856:	613c      	str	r4, [r7, #16]
 8003858:	4638      	mov	r0, r7
 800385a:	f001 f97b 	bl	8004b54 <__mcmp>
 800385e:	2800      	cmp	r0, #0
 8003860:	db25      	blt.n	80038ae <quorem+0xec>
 8003862:	4629      	mov	r1, r5
 8003864:	2000      	movs	r0, #0
 8003866:	f858 2b04 	ldr.w	r2, [r8], #4
 800386a:	f8d1 c000 	ldr.w	ip, [r1]
 800386e:	fa1f fe82 	uxth.w	lr, r2
 8003872:	fa1f f38c 	uxth.w	r3, ip
 8003876:	eba3 030e 	sub.w	r3, r3, lr
 800387a:	4403      	add	r3, r0
 800387c:	0c12      	lsrs	r2, r2, #16
 800387e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003882:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003886:	b29b      	uxth	r3, r3
 8003888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800388c:	45c1      	cmp	r9, r8
 800388e:	f841 3b04 	str.w	r3, [r1], #4
 8003892:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003896:	d2e6      	bcs.n	8003866 <quorem+0xa4>
 8003898:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800389c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038a0:	b922      	cbnz	r2, 80038ac <quorem+0xea>
 80038a2:	3b04      	subs	r3, #4
 80038a4:	429d      	cmp	r5, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	d30b      	bcc.n	80038c2 <quorem+0x100>
 80038aa:	613c      	str	r4, [r7, #16]
 80038ac:	3601      	adds	r6, #1
 80038ae:	4630      	mov	r0, r6
 80038b0:	b003      	add	sp, #12
 80038b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	3b04      	subs	r3, #4
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d1cb      	bne.n	8003856 <quorem+0x94>
 80038be:	3c01      	subs	r4, #1
 80038c0:	e7c6      	b.n	8003850 <quorem+0x8e>
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	3b04      	subs	r3, #4
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d1ef      	bne.n	80038aa <quorem+0xe8>
 80038ca:	3c01      	subs	r4, #1
 80038cc:	e7ea      	b.n	80038a4 <quorem+0xe2>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e7ee      	b.n	80038b0 <quorem+0xee>
 80038d2:	0000      	movs	r0, r0
 80038d4:	0000      	movs	r0, r0
	...

080038d8 <_dtoa_r>:
 80038d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	69c7      	ldr	r7, [r0, #28]
 80038de:	b099      	sub	sp, #100	@ 0x64
 80038e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80038e4:	ec55 4b10 	vmov	r4, r5, d0
 80038e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80038ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80038ec:	4683      	mov	fp, r0
 80038ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80038f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80038f2:	b97f      	cbnz	r7, 8003914 <_dtoa_r+0x3c>
 80038f4:	2010      	movs	r0, #16
 80038f6:	f000 fdfd 	bl	80044f4 <malloc>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8003900:	b920      	cbnz	r0, 800390c <_dtoa_r+0x34>
 8003902:	4ba7      	ldr	r3, [pc, #668]	@ (8003ba0 <_dtoa_r+0x2c8>)
 8003904:	21ef      	movs	r1, #239	@ 0xef
 8003906:	48a7      	ldr	r0, [pc, #668]	@ (8003ba4 <_dtoa_r+0x2cc>)
 8003908:	f001 fc68 	bl	80051dc <__assert_func>
 800390c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003910:	6007      	str	r7, [r0, #0]
 8003912:	60c7      	str	r7, [r0, #12]
 8003914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	b159      	cbz	r1, 8003934 <_dtoa_r+0x5c>
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	604a      	str	r2, [r1, #4]
 8003920:	2301      	movs	r3, #1
 8003922:	4093      	lsls	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
 8003926:	4658      	mov	r0, fp
 8003928:	f000 feda 	bl	80046e0 <_Bfree>
 800392c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	1e2b      	subs	r3, r5, #0
 8003936:	bfb9      	ittee	lt
 8003938:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800393c:	9303      	strlt	r3, [sp, #12]
 800393e:	2300      	movge	r3, #0
 8003940:	6033      	strge	r3, [r6, #0]
 8003942:	9f03      	ldr	r7, [sp, #12]
 8003944:	4b98      	ldr	r3, [pc, #608]	@ (8003ba8 <_dtoa_r+0x2d0>)
 8003946:	bfbc      	itt	lt
 8003948:	2201      	movlt	r2, #1
 800394a:	6032      	strlt	r2, [r6, #0]
 800394c:	43bb      	bics	r3, r7
 800394e:	d112      	bne.n	8003976 <_dtoa_r+0x9e>
 8003950:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003952:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800395c:	4323      	orrs	r3, r4
 800395e:	f000 854d 	beq.w	80043fc <_dtoa_r+0xb24>
 8003962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003964:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003bbc <_dtoa_r+0x2e4>
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 854f 	beq.w	800440c <_dtoa_r+0xb34>
 800396e:	f10a 0303 	add.w	r3, sl, #3
 8003972:	f000 bd49 	b.w	8004408 <_dtoa_r+0xb30>
 8003976:	ed9d 7b02 	vldr	d7, [sp, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	ec51 0b17 	vmov	r0, r1, d7
 8003980:	2300      	movs	r3, #0
 8003982:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003986:	f7fd f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800398a:	4680      	mov	r8, r0
 800398c:	b158      	cbz	r0, 80039a6 <_dtoa_r+0xce>
 800398e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003990:	2301      	movs	r3, #1
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003996:	b113      	cbz	r3, 800399e <_dtoa_r+0xc6>
 8003998:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800399a:	4b84      	ldr	r3, [pc, #528]	@ (8003bac <_dtoa_r+0x2d4>)
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003bc0 <_dtoa_r+0x2e8>
 80039a2:	f000 bd33 	b.w	800440c <_dtoa_r+0xb34>
 80039a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80039aa:	aa16      	add	r2, sp, #88	@ 0x58
 80039ac:	a917      	add	r1, sp, #92	@ 0x5c
 80039ae:	4658      	mov	r0, fp
 80039b0:	f001 f980 	bl	8004cb4 <__d2b>
 80039b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80039b8:	4681      	mov	r9, r0
 80039ba:	2e00      	cmp	r6, #0
 80039bc:	d077      	beq.n	8003aae <_dtoa_r+0x1d6>
 80039be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80039c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80039d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80039d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80039d8:	4619      	mov	r1, r3
 80039da:	2200      	movs	r2, #0
 80039dc:	4b74      	ldr	r3, [pc, #464]	@ (8003bb0 <_dtoa_r+0x2d8>)
 80039de:	f7fc fc5b 	bl	8000298 <__aeabi_dsub>
 80039e2:	a369      	add	r3, pc, #420	@ (adr r3, 8003b88 <_dtoa_r+0x2b0>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fe0e 	bl	8000608 <__aeabi_dmul>
 80039ec:	a368      	add	r3, pc, #416	@ (adr r3, 8003b90 <_dtoa_r+0x2b8>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc fc53 	bl	800029c <__adddf3>
 80039f6:	4604      	mov	r4, r0
 80039f8:	4630      	mov	r0, r6
 80039fa:	460d      	mov	r5, r1
 80039fc:	f7fc fd9a 	bl	8000534 <__aeabi_i2d>
 8003a00:	a365      	add	r3, pc, #404	@ (adr r3, 8003b98 <_dtoa_r+0x2c0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fdff 	bl	8000608 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7fc fc43 	bl	800029c <__adddf3>
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
 8003a1a:	f7fd f8a5 	bl	8000b68 <__aeabi_d2iz>
 8003a1e:	2200      	movs	r2, #0
 8003a20:	4607      	mov	r7, r0
 8003a22:	2300      	movs	r3, #0
 8003a24:	4620      	mov	r0, r4
 8003a26:	4629      	mov	r1, r5
 8003a28:	f7fd f860 	bl	8000aec <__aeabi_dcmplt>
 8003a2c:	b140      	cbz	r0, 8003a40 <_dtoa_r+0x168>
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f7fc fd80 	bl	8000534 <__aeabi_i2d>
 8003a34:	4622      	mov	r2, r4
 8003a36:	462b      	mov	r3, r5
 8003a38:	f7fd f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a3c:	b900      	cbnz	r0, 8003a40 <_dtoa_r+0x168>
 8003a3e:	3f01      	subs	r7, #1
 8003a40:	2f16      	cmp	r7, #22
 8003a42:	d851      	bhi.n	8003ae8 <_dtoa_r+0x210>
 8003a44:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb4 <_dtoa_r+0x2dc>)
 8003a46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a52:	f7fd f84b 	bl	8000aec <__aeabi_dcmplt>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d048      	beq.n	8003aec <_dtoa_r+0x214>
 8003a5a:	3f01      	subs	r7, #1
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003a60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003a62:	1b9b      	subs	r3, r3, r6
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	bf44      	itt	mi
 8003a68:	f1c3 0801 	rsbmi	r8, r3, #1
 8003a6c:	2300      	movmi	r3, #0
 8003a6e:	9208      	str	r2, [sp, #32]
 8003a70:	bf54      	ite	pl
 8003a72:	f04f 0800 	movpl.w	r8, #0
 8003a76:	9308      	strmi	r3, [sp, #32]
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	db39      	blt.n	8003af0 <_dtoa_r+0x218>
 8003a7c:	9b08      	ldr	r3, [sp, #32]
 8003a7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003a80:	443b      	add	r3, r7
 8003a82:	9308      	str	r3, [sp, #32]
 8003a84:	2300      	movs	r3, #0
 8003a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a8a:	2b09      	cmp	r3, #9
 8003a8c:	d864      	bhi.n	8003b58 <_dtoa_r+0x280>
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	bfc4      	itt	gt
 8003a92:	3b04      	subgt	r3, #4
 8003a94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a98:	f1a3 0302 	sub.w	r3, r3, #2
 8003a9c:	bfcc      	ite	gt
 8003a9e:	2400      	movgt	r4, #0
 8003aa0:	2401      	movle	r4, #1
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d863      	bhi.n	8003b6e <_dtoa_r+0x296>
 8003aa6:	e8df f003 	tbb	[pc, r3]
 8003aaa:	372a      	.short	0x372a
 8003aac:	5535      	.short	0x5535
 8003aae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003ab2:	441e      	add	r6, r3
 8003ab4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	bfc1      	itttt	gt
 8003abc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003ac0:	409f      	lslgt	r7, r3
 8003ac2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ac6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003aca:	bfd6      	itet	le
 8003acc:	f1c3 0320 	rsble	r3, r3, #32
 8003ad0:	ea47 0003 	orrgt.w	r0, r7, r3
 8003ad4:	fa04 f003 	lslle.w	r0, r4, r3
 8003ad8:	f7fc fd1c 	bl	8000514 <__aeabi_ui2d>
 8003adc:	2201      	movs	r2, #1
 8003ade:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003ae2:	3e01      	subs	r6, #1
 8003ae4:	9214      	str	r2, [sp, #80]	@ 0x50
 8003ae6:	e777      	b.n	80039d8 <_dtoa_r+0x100>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e7b8      	b.n	8003a5e <_dtoa_r+0x186>
 8003aec:	9012      	str	r0, [sp, #72]	@ 0x48
 8003aee:	e7b7      	b.n	8003a60 <_dtoa_r+0x188>
 8003af0:	427b      	negs	r3, r7
 8003af2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003af4:	2300      	movs	r3, #0
 8003af6:	eba8 0807 	sub.w	r8, r8, r7
 8003afa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003afc:	e7c4      	b.n	8003a88 <_dtoa_r+0x1b0>
 8003afe:	2300      	movs	r3, #0
 8003b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	dc35      	bgt.n	8003b74 <_dtoa_r+0x29c>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	9307      	str	r3, [sp, #28]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	920e      	str	r2, [sp, #56]	@ 0x38
 8003b12:	e00b      	b.n	8003b2c <_dtoa_r+0x254>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e7f3      	b.n	8003b00 <_dtoa_r+0x228>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	9307      	str	r3, [sp, #28]
 8003b28:	bfb8      	it	lt
 8003b2a:	2301      	movlt	r3, #1
 8003b2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003b30:	2100      	movs	r1, #0
 8003b32:	2204      	movs	r2, #4
 8003b34:	f102 0514 	add.w	r5, r2, #20
 8003b38:	429d      	cmp	r5, r3
 8003b3a:	d91f      	bls.n	8003b7c <_dtoa_r+0x2a4>
 8003b3c:	6041      	str	r1, [r0, #4]
 8003b3e:	4658      	mov	r0, fp
 8003b40:	f000 fd8e 	bl	8004660 <_Balloc>
 8003b44:	4682      	mov	sl, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d13c      	bne.n	8003bc4 <_dtoa_r+0x2ec>
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <_dtoa_r+0x2e0>)
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003b52:	e6d8      	b.n	8003906 <_dtoa_r+0x2e>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e7e0      	b.n	8003b1a <_dtoa_r+0x242>
 8003b58:	2401      	movs	r4, #1
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	9307      	str	r3, [sp, #28]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	e7d0      	b.n	8003b10 <_dtoa_r+0x238>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b72:	e7f5      	b.n	8003b60 <_dtoa_r+0x288>
 8003b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	9307      	str	r3, [sp, #28]
 8003b7a:	e7d7      	b.n	8003b2c <_dtoa_r+0x254>
 8003b7c:	3101      	adds	r1, #1
 8003b7e:	0052      	lsls	r2, r2, #1
 8003b80:	e7d8      	b.n	8003b34 <_dtoa_r+0x25c>
 8003b82:	bf00      	nop
 8003b84:	f3af 8000 	nop.w
 8003b88:	636f4361 	.word	0x636f4361
 8003b8c:	3fd287a7 	.word	0x3fd287a7
 8003b90:	8b60c8b3 	.word	0x8b60c8b3
 8003b94:	3fc68a28 	.word	0x3fc68a28
 8003b98:	509f79fb 	.word	0x509f79fb
 8003b9c:	3fd34413 	.word	0x3fd34413
 8003ba0:	080063ad 	.word	0x080063ad
 8003ba4:	080063c4 	.word	0x080063c4
 8003ba8:	7ff00000 	.word	0x7ff00000
 8003bac:	0800637d 	.word	0x0800637d
 8003bb0:	3ff80000 	.word	0x3ff80000
 8003bb4:	080064c0 	.word	0x080064c0
 8003bb8:	0800641c 	.word	0x0800641c
 8003bbc:	080063a9 	.word	0x080063a9
 8003bc0:	0800637c 	.word	0x0800637c
 8003bc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003bc8:	6018      	str	r0, [r3, #0]
 8003bca:	9b07      	ldr	r3, [sp, #28]
 8003bcc:	2b0e      	cmp	r3, #14
 8003bce:	f200 80a4 	bhi.w	8003d1a <_dtoa_r+0x442>
 8003bd2:	2c00      	cmp	r4, #0
 8003bd4:	f000 80a1 	beq.w	8003d1a <_dtoa_r+0x442>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	dd33      	ble.n	8003c44 <_dtoa_r+0x36c>
 8003bdc:	4bad      	ldr	r3, [pc, #692]	@ (8003e94 <_dtoa_r+0x5bc>)
 8003bde:	f007 020f 	and.w	r2, r7, #15
 8003be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003be6:	ed93 7b00 	vldr	d7, [r3]
 8003bea:	05f8      	lsls	r0, r7, #23
 8003bec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003bf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003bf4:	d516      	bpl.n	8003c24 <_dtoa_r+0x34c>
 8003bf6:	4ba8      	ldr	r3, [pc, #672]	@ (8003e98 <_dtoa_r+0x5c0>)
 8003bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c00:	f7fc fe2c 	bl	800085c <__aeabi_ddiv>
 8003c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c08:	f004 040f 	and.w	r4, r4, #15
 8003c0c:	2603      	movs	r6, #3
 8003c0e:	4da2      	ldr	r5, [pc, #648]	@ (8003e98 <_dtoa_r+0x5c0>)
 8003c10:	b954      	cbnz	r4, 8003c28 <_dtoa_r+0x350>
 8003c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c1a:	f7fc fe1f 	bl	800085c <__aeabi_ddiv>
 8003c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c22:	e028      	b.n	8003c76 <_dtoa_r+0x39e>
 8003c24:	2602      	movs	r6, #2
 8003c26:	e7f2      	b.n	8003c0e <_dtoa_r+0x336>
 8003c28:	07e1      	lsls	r1, r4, #31
 8003c2a:	d508      	bpl.n	8003c3e <_dtoa_r+0x366>
 8003c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c34:	f7fc fce8 	bl	8000608 <__aeabi_dmul>
 8003c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c3c:	3601      	adds	r6, #1
 8003c3e:	1064      	asrs	r4, r4, #1
 8003c40:	3508      	adds	r5, #8
 8003c42:	e7e5      	b.n	8003c10 <_dtoa_r+0x338>
 8003c44:	f000 80d2 	beq.w	8003dec <_dtoa_r+0x514>
 8003c48:	427c      	negs	r4, r7
 8003c4a:	4b92      	ldr	r3, [pc, #584]	@ (8003e94 <_dtoa_r+0x5bc>)
 8003c4c:	4d92      	ldr	r5, [pc, #584]	@ (8003e98 <_dtoa_r+0x5c0>)
 8003c4e:	f004 020f 	and.w	r2, r4, #15
 8003c52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c5e:	f7fc fcd3 	bl	8000608 <__aeabi_dmul>
 8003c62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c66:	1124      	asrs	r4, r4, #4
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2602      	movs	r6, #2
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	f040 80b2 	bne.w	8003dd6 <_dtoa_r+0x4fe>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1d3      	bne.n	8003c1e <_dtoa_r+0x346>
 8003c76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003c78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80b7 	beq.w	8003df0 <_dtoa_r+0x518>
 8003c82:	4b86      	ldr	r3, [pc, #536]	@ (8003e9c <_dtoa_r+0x5c4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc ff2f 	bl	8000aec <__aeabi_dcmplt>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f000 80ae 	beq.w	8003df0 <_dtoa_r+0x518>
 8003c94:	9b07      	ldr	r3, [sp, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80aa 	beq.w	8003df0 <_dtoa_r+0x518>
 8003c9c:	9b00      	ldr	r3, [sp, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	dd37      	ble.n	8003d12 <_dtoa_r+0x43a>
 8003ca2:	1e7b      	subs	r3, r7, #1
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea0 <_dtoa_r+0x5c8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	4629      	mov	r1, r5
 8003cae:	f7fc fcab 	bl	8000608 <__aeabi_dmul>
 8003cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cb6:	9c00      	ldr	r4, [sp, #0]
 8003cb8:	3601      	adds	r6, #1
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7fc fc3a 	bl	8000534 <__aeabi_i2d>
 8003cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cc4:	f7fc fca0 	bl	8000608 <__aeabi_dmul>
 8003cc8:	4b76      	ldr	r3, [pc, #472]	@ (8003ea4 <_dtoa_r+0x5cc>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f7fc fae6 	bl	800029c <__adddf3>
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003cd6:	2c00      	cmp	r4, #0
 8003cd8:	f040 808d 	bne.w	8003df6 <_dtoa_r+0x51e>
 8003cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ce0:	4b71      	ldr	r3, [pc, #452]	@ (8003ea8 <_dtoa_r+0x5d0>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f7fc fad8 	bl	8000298 <__aeabi_dsub>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	4633      	mov	r3, r6
 8003cf4:	f7fc ff18 	bl	8000b28 <__aeabi_dcmpgt>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	f040 828b 	bne.w	8004214 <_dtoa_r+0x93c>
 8003cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d02:	462a      	mov	r2, r5
 8003d04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003d08:	f7fc fef0 	bl	8000aec <__aeabi_dcmplt>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	f040 8128 	bne.w	8003f62 <_dtoa_r+0x68a>
 8003d12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003d16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003d1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f2c0 815a 	blt.w	8003fd6 <_dtoa_r+0x6fe>
 8003d22:	2f0e      	cmp	r7, #14
 8003d24:	f300 8157 	bgt.w	8003fd6 <_dtoa_r+0x6fe>
 8003d28:	4b5a      	ldr	r3, [pc, #360]	@ (8003e94 <_dtoa_r+0x5bc>)
 8003d2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d2e:	ed93 7b00 	vldr	d7, [r3]
 8003d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	ed8d 7b00 	vstr	d7, [sp]
 8003d3a:	da03      	bge.n	8003d44 <_dtoa_r+0x46c>
 8003d3c:	9b07      	ldr	r3, [sp, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f340 8101 	ble.w	8003f46 <_dtoa_r+0x66e>
 8003d44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003d48:	4656      	mov	r6, sl
 8003d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f7fc fd83 	bl	800085c <__aeabi_ddiv>
 8003d56:	f7fc ff07 	bl	8000b68 <__aeabi_d2iz>
 8003d5a:	4680      	mov	r8, r0
 8003d5c:	f7fc fbea 	bl	8000534 <__aeabi_i2d>
 8003d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d64:	f7fc fc50 	bl	8000608 <__aeabi_dmul>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003d74:	f7fc fa90 	bl	8000298 <__aeabi_dsub>
 8003d78:	f806 4b01 	strb.w	r4, [r6], #1
 8003d7c:	9d07      	ldr	r5, [sp, #28]
 8003d7e:	eba6 040a 	sub.w	r4, r6, sl
 8003d82:	42a5      	cmp	r5, r4
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	f040 8117 	bne.w	8003fba <_dtoa_r+0x6e2>
 8003d8c:	f7fc fa86 	bl	800029c <__adddf3>
 8003d90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d94:	4604      	mov	r4, r0
 8003d96:	460d      	mov	r5, r1
 8003d98:	f7fc fec6 	bl	8000b28 <__aeabi_dcmpgt>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f040 80f9 	bne.w	8003f94 <_dtoa_r+0x6bc>
 8003da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003da6:	4620      	mov	r0, r4
 8003da8:	4629      	mov	r1, r5
 8003daa:	f7fc fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 8003dae:	b118      	cbz	r0, 8003db8 <_dtoa_r+0x4e0>
 8003db0:	f018 0f01 	tst.w	r8, #1
 8003db4:	f040 80ee 	bne.w	8003f94 <_dtoa_r+0x6bc>
 8003db8:	4649      	mov	r1, r9
 8003dba:	4658      	mov	r0, fp
 8003dbc:	f000 fc90 	bl	80046e0 <_Bfree>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	7033      	strb	r3, [r6, #0]
 8003dc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003dc6:	3701      	adds	r7, #1
 8003dc8:	601f      	str	r7, [r3, #0]
 8003dca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 831d 	beq.w	800440c <_dtoa_r+0xb34>
 8003dd2:	601e      	str	r6, [r3, #0]
 8003dd4:	e31a      	b.n	800440c <_dtoa_r+0xb34>
 8003dd6:	07e2      	lsls	r2, r4, #31
 8003dd8:	d505      	bpl.n	8003de6 <_dtoa_r+0x50e>
 8003dda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dde:	f7fc fc13 	bl	8000608 <__aeabi_dmul>
 8003de2:	3601      	adds	r6, #1
 8003de4:	2301      	movs	r3, #1
 8003de6:	1064      	asrs	r4, r4, #1
 8003de8:	3508      	adds	r5, #8
 8003dea:	e73f      	b.n	8003c6c <_dtoa_r+0x394>
 8003dec:	2602      	movs	r6, #2
 8003dee:	e742      	b.n	8003c76 <_dtoa_r+0x39e>
 8003df0:	9c07      	ldr	r4, [sp, #28]
 8003df2:	9704      	str	r7, [sp, #16]
 8003df4:	e761      	b.n	8003cba <_dtoa_r+0x3e2>
 8003df6:	4b27      	ldr	r3, [pc, #156]	@ (8003e94 <_dtoa_r+0x5bc>)
 8003df8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003dfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003dfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e02:	4454      	add	r4, sl
 8003e04:	2900      	cmp	r1, #0
 8003e06:	d053      	beq.n	8003eb0 <_dtoa_r+0x5d8>
 8003e08:	4928      	ldr	r1, [pc, #160]	@ (8003eac <_dtoa_r+0x5d4>)
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7fc fd26 	bl	800085c <__aeabi_ddiv>
 8003e10:	4633      	mov	r3, r6
 8003e12:	462a      	mov	r2, r5
 8003e14:	f7fc fa40 	bl	8000298 <__aeabi_dsub>
 8003e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e1c:	4656      	mov	r6, sl
 8003e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e22:	f7fc fea1 	bl	8000b68 <__aeabi_d2iz>
 8003e26:	4605      	mov	r5, r0
 8003e28:	f7fc fb84 	bl	8000534 <__aeabi_i2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e34:	f7fc fa30 	bl	8000298 <__aeabi_dsub>
 8003e38:	3530      	adds	r5, #48	@ 0x30
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e42:	f806 5b01 	strb.w	r5, [r6], #1
 8003e46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e4a:	f7fc fe4f 	bl	8000aec <__aeabi_dcmplt>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d171      	bne.n	8003f36 <_dtoa_r+0x65e>
 8003e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e56:	4911      	ldr	r1, [pc, #68]	@ (8003e9c <_dtoa_r+0x5c4>)
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fc fa1d 	bl	8000298 <__aeabi_dsub>
 8003e5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e62:	f7fc fe43 	bl	8000aec <__aeabi_dcmplt>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	f040 8095 	bne.w	8003f96 <_dtoa_r+0x6be>
 8003e6c:	42a6      	cmp	r6, r4
 8003e6e:	f43f af50 	beq.w	8003d12 <_dtoa_r+0x43a>
 8003e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003e76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <_dtoa_r+0x5c8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f7fc fbc5 	bl	8000608 <__aeabi_dmul>
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <_dtoa_r+0x5c8>)
 8003e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e84:	2200      	movs	r2, #0
 8003e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e8a:	f7fc fbbd 	bl	8000608 <__aeabi_dmul>
 8003e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e92:	e7c4      	b.n	8003e1e <_dtoa_r+0x546>
 8003e94:	080064c0 	.word	0x080064c0
 8003e98:	08006498 	.word	0x08006498
 8003e9c:	3ff00000 	.word	0x3ff00000
 8003ea0:	40240000 	.word	0x40240000
 8003ea4:	401c0000 	.word	0x401c0000
 8003ea8:	40140000 	.word	0x40140000
 8003eac:	3fe00000 	.word	0x3fe00000
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f7fc fba8 	bl	8000608 <__aeabi_dmul>
 8003eb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ebc:	9415      	str	r4, [sp, #84]	@ 0x54
 8003ebe:	4656      	mov	r6, sl
 8003ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec4:	f7fc fe50 	bl	8000b68 <__aeabi_d2iz>
 8003ec8:	4605      	mov	r5, r0
 8003eca:	f7fc fb33 	bl	8000534 <__aeabi_i2d>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed6:	f7fc f9df 	bl	8000298 <__aeabi_dsub>
 8003eda:	3530      	adds	r5, #48	@ 0x30
 8003edc:	f806 5b01 	strb.w	r5, [r6], #1
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	42a6      	cmp	r6, r4
 8003ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	d124      	bne.n	8003f3a <_dtoa_r+0x662>
 8003ef0:	4bac      	ldr	r3, [pc, #688]	@ (80041a4 <_dtoa_r+0x8cc>)
 8003ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ef6:	f7fc f9d1 	bl	800029c <__adddf3>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f02:	f7fc fe11 	bl	8000b28 <__aeabi_dcmpgt>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d145      	bne.n	8003f96 <_dtoa_r+0x6be>
 8003f0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f0e:	49a5      	ldr	r1, [pc, #660]	@ (80041a4 <_dtoa_r+0x8cc>)
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fc f9c1 	bl	8000298 <__aeabi_dsub>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f1e:	f7fc fde5 	bl	8000aec <__aeabi_dcmplt>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f43f aef5 	beq.w	8003d12 <_dtoa_r+0x43a>
 8003f28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003f2a:	1e73      	subs	r3, r6, #1
 8003f2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8003f2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003f32:	2b30      	cmp	r3, #48	@ 0x30
 8003f34:	d0f8      	beq.n	8003f28 <_dtoa_r+0x650>
 8003f36:	9f04      	ldr	r7, [sp, #16]
 8003f38:	e73e      	b.n	8003db8 <_dtoa_r+0x4e0>
 8003f3a:	4b9b      	ldr	r3, [pc, #620]	@ (80041a8 <_dtoa_r+0x8d0>)
 8003f3c:	f7fc fb64 	bl	8000608 <__aeabi_dmul>
 8003f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f44:	e7bc      	b.n	8003ec0 <_dtoa_r+0x5e8>
 8003f46:	d10c      	bne.n	8003f62 <_dtoa_r+0x68a>
 8003f48:	4b98      	ldr	r3, [pc, #608]	@ (80041ac <_dtoa_r+0x8d4>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f50:	f7fc fb5a 	bl	8000608 <__aeabi_dmul>
 8003f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f58:	f7fc fddc 	bl	8000b14 <__aeabi_dcmpge>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f000 8157 	beq.w	8004210 <_dtoa_r+0x938>
 8003f62:	2400      	movs	r4, #0
 8003f64:	4625      	mov	r5, r4
 8003f66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	4656      	mov	r6, sl
 8003f6e:	2700      	movs	r7, #0
 8003f70:	4621      	mov	r1, r4
 8003f72:	4658      	mov	r0, fp
 8003f74:	f000 fbb4 	bl	80046e0 <_Bfree>
 8003f78:	2d00      	cmp	r5, #0
 8003f7a:	d0dc      	beq.n	8003f36 <_dtoa_r+0x65e>
 8003f7c:	b12f      	cbz	r7, 8003f8a <_dtoa_r+0x6b2>
 8003f7e:	42af      	cmp	r7, r5
 8003f80:	d003      	beq.n	8003f8a <_dtoa_r+0x6b2>
 8003f82:	4639      	mov	r1, r7
 8003f84:	4658      	mov	r0, fp
 8003f86:	f000 fbab 	bl	80046e0 <_Bfree>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	f000 fba7 	bl	80046e0 <_Bfree>
 8003f92:	e7d0      	b.n	8003f36 <_dtoa_r+0x65e>
 8003f94:	9704      	str	r7, [sp, #16]
 8003f96:	4633      	mov	r3, r6
 8003f98:	461e      	mov	r6, r3
 8003f9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f9e:	2a39      	cmp	r2, #57	@ 0x39
 8003fa0:	d107      	bne.n	8003fb2 <_dtoa_r+0x6da>
 8003fa2:	459a      	cmp	sl, r3
 8003fa4:	d1f8      	bne.n	8003f98 <_dtoa_r+0x6c0>
 8003fa6:	9a04      	ldr	r2, [sp, #16]
 8003fa8:	3201      	adds	r2, #1
 8003faa:	9204      	str	r2, [sp, #16]
 8003fac:	2230      	movs	r2, #48	@ 0x30
 8003fae:	f88a 2000 	strb.w	r2, [sl]
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	3201      	adds	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e7bd      	b.n	8003f36 <_dtoa_r+0x65e>
 8003fba:	4b7b      	ldr	r3, [pc, #492]	@ (80041a8 <_dtoa_r+0x8d0>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f7fc fb23 	bl	8000608 <__aeabi_dmul>
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460d      	mov	r5, r1
 8003fca:	f7fc fd85 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f43f aebb 	beq.w	8003d4a <_dtoa_r+0x472>
 8003fd4:	e6f0      	b.n	8003db8 <_dtoa_r+0x4e0>
 8003fd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003fd8:	2a00      	cmp	r2, #0
 8003fda:	f000 80db 	beq.w	8004194 <_dtoa_r+0x8bc>
 8003fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fe0:	2a01      	cmp	r2, #1
 8003fe2:	f300 80bf 	bgt.w	8004164 <_dtoa_r+0x88c>
 8003fe6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	f000 80b7 	beq.w	800415c <_dtoa_r+0x884>
 8003fee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003ff2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003ff4:	4646      	mov	r6, r8
 8003ff6:	9a08      	ldr	r2, [sp, #32]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	441a      	add	r2, r3
 8003ffc:	4658      	mov	r0, fp
 8003ffe:	4498      	add	r8, r3
 8004000:	9208      	str	r2, [sp, #32]
 8004002:	f000 fc21 	bl	8004848 <__i2b>
 8004006:	4605      	mov	r5, r0
 8004008:	b15e      	cbz	r6, 8004022 <_dtoa_r+0x74a>
 800400a:	9b08      	ldr	r3, [sp, #32]
 800400c:	2b00      	cmp	r3, #0
 800400e:	dd08      	ble.n	8004022 <_dtoa_r+0x74a>
 8004010:	42b3      	cmp	r3, r6
 8004012:	9a08      	ldr	r2, [sp, #32]
 8004014:	bfa8      	it	ge
 8004016:	4633      	movge	r3, r6
 8004018:	eba8 0803 	sub.w	r8, r8, r3
 800401c:	1af6      	subs	r6, r6, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	9308      	str	r3, [sp, #32]
 8004022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004024:	b1f3      	cbz	r3, 8004064 <_dtoa_r+0x78c>
 8004026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80b7 	beq.w	800419c <_dtoa_r+0x8c4>
 800402e:	b18c      	cbz	r4, 8004054 <_dtoa_r+0x77c>
 8004030:	4629      	mov	r1, r5
 8004032:	4622      	mov	r2, r4
 8004034:	4658      	mov	r0, fp
 8004036:	f000 fcc7 	bl	80049c8 <__pow5mult>
 800403a:	464a      	mov	r2, r9
 800403c:	4601      	mov	r1, r0
 800403e:	4605      	mov	r5, r0
 8004040:	4658      	mov	r0, fp
 8004042:	f000 fc17 	bl	8004874 <__multiply>
 8004046:	4649      	mov	r1, r9
 8004048:	9004      	str	r0, [sp, #16]
 800404a:	4658      	mov	r0, fp
 800404c:	f000 fb48 	bl	80046e0 <_Bfree>
 8004050:	9b04      	ldr	r3, [sp, #16]
 8004052:	4699      	mov	r9, r3
 8004054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004056:	1b1a      	subs	r2, r3, r4
 8004058:	d004      	beq.n	8004064 <_dtoa_r+0x78c>
 800405a:	4649      	mov	r1, r9
 800405c:	4658      	mov	r0, fp
 800405e:	f000 fcb3 	bl	80049c8 <__pow5mult>
 8004062:	4681      	mov	r9, r0
 8004064:	2101      	movs	r1, #1
 8004066:	4658      	mov	r0, fp
 8004068:	f000 fbee 	bl	8004848 <__i2b>
 800406c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800406e:	4604      	mov	r4, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 81cf 	beq.w	8004414 <_dtoa_r+0xb3c>
 8004076:	461a      	mov	r2, r3
 8004078:	4601      	mov	r1, r0
 800407a:	4658      	mov	r0, fp
 800407c:	f000 fca4 	bl	80049c8 <__pow5mult>
 8004080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004082:	2b01      	cmp	r3, #1
 8004084:	4604      	mov	r4, r0
 8004086:	f300 8095 	bgt.w	80041b4 <_dtoa_r+0x8dc>
 800408a:	9b02      	ldr	r3, [sp, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 8087 	bne.w	80041a0 <_dtoa_r+0x8c8>
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8089 	bne.w	80041b0 <_dtoa_r+0x8d8>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040a4:	0d1b      	lsrs	r3, r3, #20
 80040a6:	051b      	lsls	r3, r3, #20
 80040a8:	b12b      	cbz	r3, 80040b6 <_dtoa_r+0x7de>
 80040aa:	9b08      	ldr	r3, [sp, #32]
 80040ac:	3301      	adds	r3, #1
 80040ae:	9308      	str	r3, [sp, #32]
 80040b0:	f108 0801 	add.w	r8, r8, #1
 80040b4:	2301      	movs	r3, #1
 80040b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80040b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 81b0 	beq.w	8004420 <_dtoa_r+0xb48>
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80040c6:	6918      	ldr	r0, [r3, #16]
 80040c8:	f000 fb72 	bl	80047b0 <__hi0bits>
 80040cc:	f1c0 0020 	rsb	r0, r0, #32
 80040d0:	9b08      	ldr	r3, [sp, #32]
 80040d2:	4418      	add	r0, r3
 80040d4:	f010 001f 	ands.w	r0, r0, #31
 80040d8:	d077      	beq.n	80041ca <_dtoa_r+0x8f2>
 80040da:	f1c0 0320 	rsb	r3, r0, #32
 80040de:	2b04      	cmp	r3, #4
 80040e0:	dd6b      	ble.n	80041ba <_dtoa_r+0x8e2>
 80040e2:	9b08      	ldr	r3, [sp, #32]
 80040e4:	f1c0 001c 	rsb	r0, r0, #28
 80040e8:	4403      	add	r3, r0
 80040ea:	4480      	add	r8, r0
 80040ec:	4406      	add	r6, r0
 80040ee:	9308      	str	r3, [sp, #32]
 80040f0:	f1b8 0f00 	cmp.w	r8, #0
 80040f4:	dd05      	ble.n	8004102 <_dtoa_r+0x82a>
 80040f6:	4649      	mov	r1, r9
 80040f8:	4642      	mov	r2, r8
 80040fa:	4658      	mov	r0, fp
 80040fc:	f000 fcbe 	bl	8004a7c <__lshift>
 8004100:	4681      	mov	r9, r0
 8004102:	9b08      	ldr	r3, [sp, #32]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dd05      	ble.n	8004114 <_dtoa_r+0x83c>
 8004108:	4621      	mov	r1, r4
 800410a:	461a      	mov	r2, r3
 800410c:	4658      	mov	r0, fp
 800410e:	f000 fcb5 	bl	8004a7c <__lshift>
 8004112:	4604      	mov	r4, r0
 8004114:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004116:	2b00      	cmp	r3, #0
 8004118:	d059      	beq.n	80041ce <_dtoa_r+0x8f6>
 800411a:	4621      	mov	r1, r4
 800411c:	4648      	mov	r0, r9
 800411e:	f000 fd19 	bl	8004b54 <__mcmp>
 8004122:	2800      	cmp	r0, #0
 8004124:	da53      	bge.n	80041ce <_dtoa_r+0x8f6>
 8004126:	1e7b      	subs	r3, r7, #1
 8004128:	9304      	str	r3, [sp, #16]
 800412a:	4649      	mov	r1, r9
 800412c:	2300      	movs	r3, #0
 800412e:	220a      	movs	r2, #10
 8004130:	4658      	mov	r0, fp
 8004132:	f000 faf7 	bl	8004724 <__multadd>
 8004136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004138:	4681      	mov	r9, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8172 	beq.w	8004424 <_dtoa_r+0xb4c>
 8004140:	2300      	movs	r3, #0
 8004142:	4629      	mov	r1, r5
 8004144:	220a      	movs	r2, #10
 8004146:	4658      	mov	r0, fp
 8004148:	f000 faec 	bl	8004724 <__multadd>
 800414c:	9b00      	ldr	r3, [sp, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	4605      	mov	r5, r0
 8004152:	dc67      	bgt.n	8004224 <_dtoa_r+0x94c>
 8004154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004156:	2b02      	cmp	r3, #2
 8004158:	dc41      	bgt.n	80041de <_dtoa_r+0x906>
 800415a:	e063      	b.n	8004224 <_dtoa_r+0x94c>
 800415c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800415e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004162:	e746      	b.n	8003ff2 <_dtoa_r+0x71a>
 8004164:	9b07      	ldr	r3, [sp, #28]
 8004166:	1e5c      	subs	r4, r3, #1
 8004168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800416a:	42a3      	cmp	r3, r4
 800416c:	bfbf      	itttt	lt
 800416e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004170:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004172:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004174:	1ae3      	sublt	r3, r4, r3
 8004176:	bfb4      	ite	lt
 8004178:	18d2      	addlt	r2, r2, r3
 800417a:	1b1c      	subge	r4, r3, r4
 800417c:	9b07      	ldr	r3, [sp, #28]
 800417e:	bfbc      	itt	lt
 8004180:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004182:	2400      	movlt	r4, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	bfb5      	itete	lt
 8004188:	eba8 0603 	sublt.w	r6, r8, r3
 800418c:	9b07      	ldrge	r3, [sp, #28]
 800418e:	2300      	movlt	r3, #0
 8004190:	4646      	movge	r6, r8
 8004192:	e730      	b.n	8003ff6 <_dtoa_r+0x71e>
 8004194:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004196:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004198:	4646      	mov	r6, r8
 800419a:	e735      	b.n	8004008 <_dtoa_r+0x730>
 800419c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800419e:	e75c      	b.n	800405a <_dtoa_r+0x782>
 80041a0:	2300      	movs	r3, #0
 80041a2:	e788      	b.n	80040b6 <_dtoa_r+0x7de>
 80041a4:	3fe00000 	.word	0x3fe00000
 80041a8:	40240000 	.word	0x40240000
 80041ac:	40140000 	.word	0x40140000
 80041b0:	9b02      	ldr	r3, [sp, #8]
 80041b2:	e780      	b.n	80040b6 <_dtoa_r+0x7de>
 80041b4:	2300      	movs	r3, #0
 80041b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80041b8:	e782      	b.n	80040c0 <_dtoa_r+0x7e8>
 80041ba:	d099      	beq.n	80040f0 <_dtoa_r+0x818>
 80041bc:	9a08      	ldr	r2, [sp, #32]
 80041be:	331c      	adds	r3, #28
 80041c0:	441a      	add	r2, r3
 80041c2:	4498      	add	r8, r3
 80041c4:	441e      	add	r6, r3
 80041c6:	9208      	str	r2, [sp, #32]
 80041c8:	e792      	b.n	80040f0 <_dtoa_r+0x818>
 80041ca:	4603      	mov	r3, r0
 80041cc:	e7f6      	b.n	80041bc <_dtoa_r+0x8e4>
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	9704      	str	r7, [sp, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc20      	bgt.n	8004218 <_dtoa_r+0x940>
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041da:	2b02      	cmp	r3, #2
 80041dc:	dd1e      	ble.n	800421c <_dtoa_r+0x944>
 80041de:	9b00      	ldr	r3, [sp, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f aec0 	bne.w	8003f66 <_dtoa_r+0x68e>
 80041e6:	4621      	mov	r1, r4
 80041e8:	2205      	movs	r2, #5
 80041ea:	4658      	mov	r0, fp
 80041ec:	f000 fa9a 	bl	8004724 <__multadd>
 80041f0:	4601      	mov	r1, r0
 80041f2:	4604      	mov	r4, r0
 80041f4:	4648      	mov	r0, r9
 80041f6:	f000 fcad 	bl	8004b54 <__mcmp>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f77f aeb3 	ble.w	8003f66 <_dtoa_r+0x68e>
 8004200:	4656      	mov	r6, sl
 8004202:	2331      	movs	r3, #49	@ 0x31
 8004204:	f806 3b01 	strb.w	r3, [r6], #1
 8004208:	9b04      	ldr	r3, [sp, #16]
 800420a:	3301      	adds	r3, #1
 800420c:	9304      	str	r3, [sp, #16]
 800420e:	e6ae      	b.n	8003f6e <_dtoa_r+0x696>
 8004210:	9c07      	ldr	r4, [sp, #28]
 8004212:	9704      	str	r7, [sp, #16]
 8004214:	4625      	mov	r5, r4
 8004216:	e7f3      	b.n	8004200 <_dtoa_r+0x928>
 8004218:	9b07      	ldr	r3, [sp, #28]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8104 	beq.w	800442c <_dtoa_r+0xb54>
 8004224:	2e00      	cmp	r6, #0
 8004226:	dd05      	ble.n	8004234 <_dtoa_r+0x95c>
 8004228:	4629      	mov	r1, r5
 800422a:	4632      	mov	r2, r6
 800422c:	4658      	mov	r0, fp
 800422e:	f000 fc25 	bl	8004a7c <__lshift>
 8004232:	4605      	mov	r5, r0
 8004234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d05a      	beq.n	80042f0 <_dtoa_r+0xa18>
 800423a:	6869      	ldr	r1, [r5, #4]
 800423c:	4658      	mov	r0, fp
 800423e:	f000 fa0f 	bl	8004660 <_Balloc>
 8004242:	4606      	mov	r6, r0
 8004244:	b928      	cbnz	r0, 8004252 <_dtoa_r+0x97a>
 8004246:	4b84      	ldr	r3, [pc, #528]	@ (8004458 <_dtoa_r+0xb80>)
 8004248:	4602      	mov	r2, r0
 800424a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800424e:	f7ff bb5a 	b.w	8003906 <_dtoa_r+0x2e>
 8004252:	692a      	ldr	r2, [r5, #16]
 8004254:	3202      	adds	r2, #2
 8004256:	0092      	lsls	r2, r2, #2
 8004258:	f105 010c 	add.w	r1, r5, #12
 800425c:	300c      	adds	r0, #12
 800425e:	f000 ffaf 	bl	80051c0 <memcpy>
 8004262:	2201      	movs	r2, #1
 8004264:	4631      	mov	r1, r6
 8004266:	4658      	mov	r0, fp
 8004268:	f000 fc08 	bl	8004a7c <__lshift>
 800426c:	f10a 0301 	add.w	r3, sl, #1
 8004270:	9307      	str	r3, [sp, #28]
 8004272:	9b00      	ldr	r3, [sp, #0]
 8004274:	4453      	add	r3, sl
 8004276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	462f      	mov	r7, r5
 8004280:	930a      	str	r3, [sp, #40]	@ 0x28
 8004282:	4605      	mov	r5, r0
 8004284:	9b07      	ldr	r3, [sp, #28]
 8004286:	4621      	mov	r1, r4
 8004288:	3b01      	subs	r3, #1
 800428a:	4648      	mov	r0, r9
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	f7ff fa98 	bl	80037c2 <quorem>
 8004292:	4639      	mov	r1, r7
 8004294:	9002      	str	r0, [sp, #8]
 8004296:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800429a:	4648      	mov	r0, r9
 800429c:	f000 fc5a 	bl	8004b54 <__mcmp>
 80042a0:	462a      	mov	r2, r5
 80042a2:	9008      	str	r0, [sp, #32]
 80042a4:	4621      	mov	r1, r4
 80042a6:	4658      	mov	r0, fp
 80042a8:	f000 fc70 	bl	8004b8c <__mdiff>
 80042ac:	68c2      	ldr	r2, [r0, #12]
 80042ae:	4606      	mov	r6, r0
 80042b0:	bb02      	cbnz	r2, 80042f4 <_dtoa_r+0xa1c>
 80042b2:	4601      	mov	r1, r0
 80042b4:	4648      	mov	r0, r9
 80042b6:	f000 fc4d 	bl	8004b54 <__mcmp>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4631      	mov	r1, r6
 80042be:	4658      	mov	r0, fp
 80042c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80042c2:	f000 fa0d 	bl	80046e0 <_Bfree>
 80042c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042ca:	9e07      	ldr	r6, [sp, #28]
 80042cc:	ea43 0102 	orr.w	r1, r3, r2
 80042d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042d2:	4319      	orrs	r1, r3
 80042d4:	d110      	bne.n	80042f8 <_dtoa_r+0xa20>
 80042d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80042da:	d029      	beq.n	8004330 <_dtoa_r+0xa58>
 80042dc:	9b08      	ldr	r3, [sp, #32]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	dd02      	ble.n	80042e8 <_dtoa_r+0xa10>
 80042e2:	9b02      	ldr	r3, [sp, #8]
 80042e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80042e8:	9b00      	ldr	r3, [sp, #0]
 80042ea:	f883 8000 	strb.w	r8, [r3]
 80042ee:	e63f      	b.n	8003f70 <_dtoa_r+0x698>
 80042f0:	4628      	mov	r0, r5
 80042f2:	e7bb      	b.n	800426c <_dtoa_r+0x994>
 80042f4:	2201      	movs	r2, #1
 80042f6:	e7e1      	b.n	80042bc <_dtoa_r+0x9e4>
 80042f8:	9b08      	ldr	r3, [sp, #32]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db04      	blt.n	8004308 <_dtoa_r+0xa30>
 80042fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004304:	430b      	orrs	r3, r1
 8004306:	d120      	bne.n	800434a <_dtoa_r+0xa72>
 8004308:	2a00      	cmp	r2, #0
 800430a:	dded      	ble.n	80042e8 <_dtoa_r+0xa10>
 800430c:	4649      	mov	r1, r9
 800430e:	2201      	movs	r2, #1
 8004310:	4658      	mov	r0, fp
 8004312:	f000 fbb3 	bl	8004a7c <__lshift>
 8004316:	4621      	mov	r1, r4
 8004318:	4681      	mov	r9, r0
 800431a:	f000 fc1b 	bl	8004b54 <__mcmp>
 800431e:	2800      	cmp	r0, #0
 8004320:	dc03      	bgt.n	800432a <_dtoa_r+0xa52>
 8004322:	d1e1      	bne.n	80042e8 <_dtoa_r+0xa10>
 8004324:	f018 0f01 	tst.w	r8, #1
 8004328:	d0de      	beq.n	80042e8 <_dtoa_r+0xa10>
 800432a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800432e:	d1d8      	bne.n	80042e2 <_dtoa_r+0xa0a>
 8004330:	9a00      	ldr	r2, [sp, #0]
 8004332:	2339      	movs	r3, #57	@ 0x39
 8004334:	7013      	strb	r3, [r2, #0]
 8004336:	4633      	mov	r3, r6
 8004338:	461e      	mov	r6, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004340:	2a39      	cmp	r2, #57	@ 0x39
 8004342:	d052      	beq.n	80043ea <_dtoa_r+0xb12>
 8004344:	3201      	adds	r2, #1
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e612      	b.n	8003f70 <_dtoa_r+0x698>
 800434a:	2a00      	cmp	r2, #0
 800434c:	dd07      	ble.n	800435e <_dtoa_r+0xa86>
 800434e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004352:	d0ed      	beq.n	8004330 <_dtoa_r+0xa58>
 8004354:	9a00      	ldr	r2, [sp, #0]
 8004356:	f108 0301 	add.w	r3, r8, #1
 800435a:	7013      	strb	r3, [r2, #0]
 800435c:	e608      	b.n	8003f70 <_dtoa_r+0x698>
 800435e:	9b07      	ldr	r3, [sp, #28]
 8004360:	9a07      	ldr	r2, [sp, #28]
 8004362:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004368:	4293      	cmp	r3, r2
 800436a:	d028      	beq.n	80043be <_dtoa_r+0xae6>
 800436c:	4649      	mov	r1, r9
 800436e:	2300      	movs	r3, #0
 8004370:	220a      	movs	r2, #10
 8004372:	4658      	mov	r0, fp
 8004374:	f000 f9d6 	bl	8004724 <__multadd>
 8004378:	42af      	cmp	r7, r5
 800437a:	4681      	mov	r9, r0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f04f 020a 	mov.w	r2, #10
 8004384:	4639      	mov	r1, r7
 8004386:	4658      	mov	r0, fp
 8004388:	d107      	bne.n	800439a <_dtoa_r+0xac2>
 800438a:	f000 f9cb 	bl	8004724 <__multadd>
 800438e:	4607      	mov	r7, r0
 8004390:	4605      	mov	r5, r0
 8004392:	9b07      	ldr	r3, [sp, #28]
 8004394:	3301      	adds	r3, #1
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	e774      	b.n	8004284 <_dtoa_r+0x9ac>
 800439a:	f000 f9c3 	bl	8004724 <__multadd>
 800439e:	4629      	mov	r1, r5
 80043a0:	4607      	mov	r7, r0
 80043a2:	2300      	movs	r3, #0
 80043a4:	220a      	movs	r2, #10
 80043a6:	4658      	mov	r0, fp
 80043a8:	f000 f9bc 	bl	8004724 <__multadd>
 80043ac:	4605      	mov	r5, r0
 80043ae:	e7f0      	b.n	8004392 <_dtoa_r+0xaba>
 80043b0:	9b00      	ldr	r3, [sp, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfcc      	ite	gt
 80043b6:	461e      	movgt	r6, r3
 80043b8:	2601      	movle	r6, #1
 80043ba:	4456      	add	r6, sl
 80043bc:	2700      	movs	r7, #0
 80043be:	4649      	mov	r1, r9
 80043c0:	2201      	movs	r2, #1
 80043c2:	4658      	mov	r0, fp
 80043c4:	f000 fb5a 	bl	8004a7c <__lshift>
 80043c8:	4621      	mov	r1, r4
 80043ca:	4681      	mov	r9, r0
 80043cc:	f000 fbc2 	bl	8004b54 <__mcmp>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	dcb0      	bgt.n	8004336 <_dtoa_r+0xa5e>
 80043d4:	d102      	bne.n	80043dc <_dtoa_r+0xb04>
 80043d6:	f018 0f01 	tst.w	r8, #1
 80043da:	d1ac      	bne.n	8004336 <_dtoa_r+0xa5e>
 80043dc:	4633      	mov	r3, r6
 80043de:	461e      	mov	r6, r3
 80043e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043e4:	2a30      	cmp	r2, #48	@ 0x30
 80043e6:	d0fa      	beq.n	80043de <_dtoa_r+0xb06>
 80043e8:	e5c2      	b.n	8003f70 <_dtoa_r+0x698>
 80043ea:	459a      	cmp	sl, r3
 80043ec:	d1a4      	bne.n	8004338 <_dtoa_r+0xa60>
 80043ee:	9b04      	ldr	r3, [sp, #16]
 80043f0:	3301      	adds	r3, #1
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	2331      	movs	r3, #49	@ 0x31
 80043f6:	f88a 3000 	strb.w	r3, [sl]
 80043fa:	e5b9      	b.n	8003f70 <_dtoa_r+0x698>
 80043fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80043fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800445c <_dtoa_r+0xb84>
 8004402:	b11b      	cbz	r3, 800440c <_dtoa_r+0xb34>
 8004404:	f10a 0308 	add.w	r3, sl, #8
 8004408:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4650      	mov	r0, sl
 800440e:	b019      	add	sp, #100	@ 0x64
 8004410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004416:	2b01      	cmp	r3, #1
 8004418:	f77f ae37 	ble.w	800408a <_dtoa_r+0x7b2>
 800441c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800441e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004420:	2001      	movs	r0, #1
 8004422:	e655      	b.n	80040d0 <_dtoa_r+0x7f8>
 8004424:	9b00      	ldr	r3, [sp, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f77f aed6 	ble.w	80041d8 <_dtoa_r+0x900>
 800442c:	4656      	mov	r6, sl
 800442e:	4621      	mov	r1, r4
 8004430:	4648      	mov	r0, r9
 8004432:	f7ff f9c6 	bl	80037c2 <quorem>
 8004436:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800443a:	f806 8b01 	strb.w	r8, [r6], #1
 800443e:	9b00      	ldr	r3, [sp, #0]
 8004440:	eba6 020a 	sub.w	r2, r6, sl
 8004444:	4293      	cmp	r3, r2
 8004446:	ddb3      	ble.n	80043b0 <_dtoa_r+0xad8>
 8004448:	4649      	mov	r1, r9
 800444a:	2300      	movs	r3, #0
 800444c:	220a      	movs	r2, #10
 800444e:	4658      	mov	r0, fp
 8004450:	f000 f968 	bl	8004724 <__multadd>
 8004454:	4681      	mov	r9, r0
 8004456:	e7ea      	b.n	800442e <_dtoa_r+0xb56>
 8004458:	0800641c 	.word	0x0800641c
 800445c:	080063a0 	.word	0x080063a0

08004460 <_free_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4605      	mov	r5, r0
 8004464:	2900      	cmp	r1, #0
 8004466:	d041      	beq.n	80044ec <_free_r+0x8c>
 8004468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800446c:	1f0c      	subs	r4, r1, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfb8      	it	lt
 8004472:	18e4      	addlt	r4, r4, r3
 8004474:	f000 f8e8 	bl	8004648 <__malloc_lock>
 8004478:	4a1d      	ldr	r2, [pc, #116]	@ (80044f0 <_free_r+0x90>)
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	b933      	cbnz	r3, 800448c <_free_r+0x2c>
 800447e:	6063      	str	r3, [r4, #4]
 8004480:	6014      	str	r4, [r2, #0]
 8004482:	4628      	mov	r0, r5
 8004484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004488:	f000 b8e4 	b.w	8004654 <__malloc_unlock>
 800448c:	42a3      	cmp	r3, r4
 800448e:	d908      	bls.n	80044a2 <_free_r+0x42>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	1821      	adds	r1, r4, r0
 8004494:	428b      	cmp	r3, r1
 8004496:	bf01      	itttt	eq
 8004498:	6819      	ldreq	r1, [r3, #0]
 800449a:	685b      	ldreq	r3, [r3, #4]
 800449c:	1809      	addeq	r1, r1, r0
 800449e:	6021      	streq	r1, [r4, #0]
 80044a0:	e7ed      	b.n	800447e <_free_r+0x1e>
 80044a2:	461a      	mov	r2, r3
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	b10b      	cbz	r3, 80044ac <_free_r+0x4c>
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	d9fa      	bls.n	80044a2 <_free_r+0x42>
 80044ac:	6811      	ldr	r1, [r2, #0]
 80044ae:	1850      	adds	r0, r2, r1
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d10b      	bne.n	80044cc <_free_r+0x6c>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	4401      	add	r1, r0
 80044b8:	1850      	adds	r0, r2, r1
 80044ba:	4283      	cmp	r3, r0
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	d1e0      	bne.n	8004482 <_free_r+0x22>
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	6053      	str	r3, [r2, #4]
 80044c6:	4408      	add	r0, r1
 80044c8:	6010      	str	r0, [r2, #0]
 80044ca:	e7da      	b.n	8004482 <_free_r+0x22>
 80044cc:	d902      	bls.n	80044d4 <_free_r+0x74>
 80044ce:	230c      	movs	r3, #12
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	e7d6      	b.n	8004482 <_free_r+0x22>
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	1821      	adds	r1, r4, r0
 80044d8:	428b      	cmp	r3, r1
 80044da:	bf04      	itt	eq
 80044dc:	6819      	ldreq	r1, [r3, #0]
 80044de:	685b      	ldreq	r3, [r3, #4]
 80044e0:	6063      	str	r3, [r4, #4]
 80044e2:	bf04      	itt	eq
 80044e4:	1809      	addeq	r1, r1, r0
 80044e6:	6021      	streq	r1, [r4, #0]
 80044e8:	6054      	str	r4, [r2, #4]
 80044ea:	e7ca      	b.n	8004482 <_free_r+0x22>
 80044ec:	bd38      	pop	{r3, r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	20000354 	.word	0x20000354

080044f4 <malloc>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	@ (8004500 <malloc+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f000 b825 	b.w	8004548 <_malloc_r>
 80044fe:	bf00      	nop
 8004500:	2000001c 	.word	0x2000001c

08004504 <sbrk_aligned>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4e0f      	ldr	r6, [pc, #60]	@ (8004544 <sbrk_aligned+0x40>)
 8004508:	460c      	mov	r4, r1
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	4605      	mov	r5, r0
 800450e:	b911      	cbnz	r1, 8004516 <sbrk_aligned+0x12>
 8004510:	f000 fe46 	bl	80051a0 <_sbrk_r>
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fe41 	bl	80051a0 <_sbrk_r>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d103      	bne.n	800452a <sbrk_aligned+0x26>
 8004522:	f04f 34ff 	mov.w	r4, #4294967295
 8004526:	4620      	mov	r0, r4
 8004528:	bd70      	pop	{r4, r5, r6, pc}
 800452a:	1cc4      	adds	r4, r0, #3
 800452c:	f024 0403 	bic.w	r4, r4, #3
 8004530:	42a0      	cmp	r0, r4
 8004532:	d0f8      	beq.n	8004526 <sbrk_aligned+0x22>
 8004534:	1a21      	subs	r1, r4, r0
 8004536:	4628      	mov	r0, r5
 8004538:	f000 fe32 	bl	80051a0 <_sbrk_r>
 800453c:	3001      	adds	r0, #1
 800453e:	d1f2      	bne.n	8004526 <sbrk_aligned+0x22>
 8004540:	e7ef      	b.n	8004522 <sbrk_aligned+0x1e>
 8004542:	bf00      	nop
 8004544:	20000350 	.word	0x20000350

08004548 <_malloc_r>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	1ccd      	adds	r5, r1, #3
 800454e:	f025 0503 	bic.w	r5, r5, #3
 8004552:	3508      	adds	r5, #8
 8004554:	2d0c      	cmp	r5, #12
 8004556:	bf38      	it	cc
 8004558:	250c      	movcc	r5, #12
 800455a:	2d00      	cmp	r5, #0
 800455c:	4606      	mov	r6, r0
 800455e:	db01      	blt.n	8004564 <_malloc_r+0x1c>
 8004560:	42a9      	cmp	r1, r5
 8004562:	d904      	bls.n	800456e <_malloc_r+0x26>
 8004564:	230c      	movs	r3, #12
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	2000      	movs	r0, #0
 800456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004644 <_malloc_r+0xfc>
 8004572:	f000 f869 	bl	8004648 <__malloc_lock>
 8004576:	f8d8 3000 	ldr.w	r3, [r8]
 800457a:	461c      	mov	r4, r3
 800457c:	bb44      	cbnz	r4, 80045d0 <_malloc_r+0x88>
 800457e:	4629      	mov	r1, r5
 8004580:	4630      	mov	r0, r6
 8004582:	f7ff ffbf 	bl	8004504 <sbrk_aligned>
 8004586:	1c43      	adds	r3, r0, #1
 8004588:	4604      	mov	r4, r0
 800458a:	d158      	bne.n	800463e <_malloc_r+0xf6>
 800458c:	f8d8 4000 	ldr.w	r4, [r8]
 8004590:	4627      	mov	r7, r4
 8004592:	2f00      	cmp	r7, #0
 8004594:	d143      	bne.n	800461e <_malloc_r+0xd6>
 8004596:	2c00      	cmp	r4, #0
 8004598:	d04b      	beq.n	8004632 <_malloc_r+0xea>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	4639      	mov	r1, r7
 800459e:	4630      	mov	r0, r6
 80045a0:	eb04 0903 	add.w	r9, r4, r3
 80045a4:	f000 fdfc 	bl	80051a0 <_sbrk_r>
 80045a8:	4581      	cmp	r9, r0
 80045aa:	d142      	bne.n	8004632 <_malloc_r+0xea>
 80045ac:	6821      	ldr	r1, [r4, #0]
 80045ae:	1a6d      	subs	r5, r5, r1
 80045b0:	4629      	mov	r1, r5
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff ffa6 	bl	8004504 <sbrk_aligned>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d03a      	beq.n	8004632 <_malloc_r+0xea>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	442b      	add	r3, r5
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	f8d8 3000 	ldr.w	r3, [r8]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	bb62      	cbnz	r2, 8004624 <_malloc_r+0xdc>
 80045ca:	f8c8 7000 	str.w	r7, [r8]
 80045ce:	e00f      	b.n	80045f0 <_malloc_r+0xa8>
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	1b52      	subs	r2, r2, r5
 80045d4:	d420      	bmi.n	8004618 <_malloc_r+0xd0>
 80045d6:	2a0b      	cmp	r2, #11
 80045d8:	d917      	bls.n	800460a <_malloc_r+0xc2>
 80045da:	1961      	adds	r1, r4, r5
 80045dc:	42a3      	cmp	r3, r4
 80045de:	6025      	str	r5, [r4, #0]
 80045e0:	bf18      	it	ne
 80045e2:	6059      	strne	r1, [r3, #4]
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	bf08      	it	eq
 80045e8:	f8c8 1000 	streq.w	r1, [r8]
 80045ec:	5162      	str	r2, [r4, r5]
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f82f 	bl	8004654 <__malloc_unlock>
 80045f6:	f104 000b 	add.w	r0, r4, #11
 80045fa:	1d23      	adds	r3, r4, #4
 80045fc:	f020 0007 	bic.w	r0, r0, #7
 8004600:	1ac2      	subs	r2, r0, r3
 8004602:	bf1c      	itt	ne
 8004604:	1a1b      	subne	r3, r3, r0
 8004606:	50a3      	strne	r3, [r4, r2]
 8004608:	e7af      	b.n	800456a <_malloc_r+0x22>
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	42a3      	cmp	r3, r4
 800460e:	bf0c      	ite	eq
 8004610:	f8c8 2000 	streq.w	r2, [r8]
 8004614:	605a      	strne	r2, [r3, #4]
 8004616:	e7eb      	b.n	80045f0 <_malloc_r+0xa8>
 8004618:	4623      	mov	r3, r4
 800461a:	6864      	ldr	r4, [r4, #4]
 800461c:	e7ae      	b.n	800457c <_malloc_r+0x34>
 800461e:	463c      	mov	r4, r7
 8004620:	687f      	ldr	r7, [r7, #4]
 8004622:	e7b6      	b.n	8004592 <_malloc_r+0x4a>
 8004624:	461a      	mov	r2, r3
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	42a3      	cmp	r3, r4
 800462a:	d1fb      	bne.n	8004624 <_malloc_r+0xdc>
 800462c:	2300      	movs	r3, #0
 800462e:	6053      	str	r3, [r2, #4]
 8004630:	e7de      	b.n	80045f0 <_malloc_r+0xa8>
 8004632:	230c      	movs	r3, #12
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f80c 	bl	8004654 <__malloc_unlock>
 800463c:	e794      	b.n	8004568 <_malloc_r+0x20>
 800463e:	6005      	str	r5, [r0, #0]
 8004640:	e7d6      	b.n	80045f0 <_malloc_r+0xa8>
 8004642:	bf00      	nop
 8004644:	20000354 	.word	0x20000354

08004648 <__malloc_lock>:
 8004648:	4801      	ldr	r0, [pc, #4]	@ (8004650 <__malloc_lock+0x8>)
 800464a:	f7ff b8b8 	b.w	80037be <__retarget_lock_acquire_recursive>
 800464e:	bf00      	nop
 8004650:	2000034c 	.word	0x2000034c

08004654 <__malloc_unlock>:
 8004654:	4801      	ldr	r0, [pc, #4]	@ (800465c <__malloc_unlock+0x8>)
 8004656:	f7ff b8b3 	b.w	80037c0 <__retarget_lock_release_recursive>
 800465a:	bf00      	nop
 800465c:	2000034c 	.word	0x2000034c

08004660 <_Balloc>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	69c6      	ldr	r6, [r0, #28]
 8004664:	4604      	mov	r4, r0
 8004666:	460d      	mov	r5, r1
 8004668:	b976      	cbnz	r6, 8004688 <_Balloc+0x28>
 800466a:	2010      	movs	r0, #16
 800466c:	f7ff ff42 	bl	80044f4 <malloc>
 8004670:	4602      	mov	r2, r0
 8004672:	61e0      	str	r0, [r4, #28]
 8004674:	b920      	cbnz	r0, 8004680 <_Balloc+0x20>
 8004676:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <_Balloc+0x78>)
 8004678:	4818      	ldr	r0, [pc, #96]	@ (80046dc <_Balloc+0x7c>)
 800467a:	216b      	movs	r1, #107	@ 0x6b
 800467c:	f000 fdae 	bl	80051dc <__assert_func>
 8004680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004684:	6006      	str	r6, [r0, #0]
 8004686:	60c6      	str	r6, [r0, #12]
 8004688:	69e6      	ldr	r6, [r4, #28]
 800468a:	68f3      	ldr	r3, [r6, #12]
 800468c:	b183      	cbz	r3, 80046b0 <_Balloc+0x50>
 800468e:	69e3      	ldr	r3, [r4, #28]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004696:	b9b8      	cbnz	r0, 80046c8 <_Balloc+0x68>
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f605 	lsl.w	r6, r1, r5
 800469e:	1d72      	adds	r2, r6, #5
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fdb8 	bl	8005218 <_calloc_r>
 80046a8:	b160      	cbz	r0, 80046c4 <_Balloc+0x64>
 80046aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046ae:	e00e      	b.n	80046ce <_Balloc+0x6e>
 80046b0:	2221      	movs	r2, #33	@ 0x21
 80046b2:	2104      	movs	r1, #4
 80046b4:	4620      	mov	r0, r4
 80046b6:	f000 fdaf 	bl	8005218 <_calloc_r>
 80046ba:	69e3      	ldr	r3, [r4, #28]
 80046bc:	60f0      	str	r0, [r6, #12]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e4      	bne.n	800468e <_Balloc+0x2e>
 80046c4:	2000      	movs	r0, #0
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	6802      	ldr	r2, [r0, #0]
 80046ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80046ce:	2300      	movs	r3, #0
 80046d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80046d4:	e7f7      	b.n	80046c6 <_Balloc+0x66>
 80046d6:	bf00      	nop
 80046d8:	080063ad 	.word	0x080063ad
 80046dc:	0800642d 	.word	0x0800642d

080046e0 <_Bfree>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	69c6      	ldr	r6, [r0, #28]
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	b976      	cbnz	r6, 8004708 <_Bfree+0x28>
 80046ea:	2010      	movs	r0, #16
 80046ec:	f7ff ff02 	bl	80044f4 <malloc>
 80046f0:	4602      	mov	r2, r0
 80046f2:	61e8      	str	r0, [r5, #28]
 80046f4:	b920      	cbnz	r0, 8004700 <_Bfree+0x20>
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <_Bfree+0x3c>)
 80046f8:	4809      	ldr	r0, [pc, #36]	@ (8004720 <_Bfree+0x40>)
 80046fa:	218f      	movs	r1, #143	@ 0x8f
 80046fc:	f000 fd6e 	bl	80051dc <__assert_func>
 8004700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004704:	6006      	str	r6, [r0, #0]
 8004706:	60c6      	str	r6, [r0, #12]
 8004708:	b13c      	cbz	r4, 800471a <_Bfree+0x3a>
 800470a:	69eb      	ldr	r3, [r5, #28]
 800470c:	6862      	ldr	r2, [r4, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004714:	6021      	str	r1, [r4, #0]
 8004716:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	080063ad 	.word	0x080063ad
 8004720:	0800642d 	.word	0x0800642d

08004724 <__multadd>:
 8004724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004728:	690d      	ldr	r5, [r1, #16]
 800472a:	4607      	mov	r7, r0
 800472c:	460c      	mov	r4, r1
 800472e:	461e      	mov	r6, r3
 8004730:	f101 0c14 	add.w	ip, r1, #20
 8004734:	2000      	movs	r0, #0
 8004736:	f8dc 3000 	ldr.w	r3, [ip]
 800473a:	b299      	uxth	r1, r3
 800473c:	fb02 6101 	mla	r1, r2, r1, r6
 8004740:	0c1e      	lsrs	r6, r3, #16
 8004742:	0c0b      	lsrs	r3, r1, #16
 8004744:	fb02 3306 	mla	r3, r2, r6, r3
 8004748:	b289      	uxth	r1, r1
 800474a:	3001      	adds	r0, #1
 800474c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004750:	4285      	cmp	r5, r0
 8004752:	f84c 1b04 	str.w	r1, [ip], #4
 8004756:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800475a:	dcec      	bgt.n	8004736 <__multadd+0x12>
 800475c:	b30e      	cbz	r6, 80047a2 <__multadd+0x7e>
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	42ab      	cmp	r3, r5
 8004762:	dc19      	bgt.n	8004798 <__multadd+0x74>
 8004764:	6861      	ldr	r1, [r4, #4]
 8004766:	4638      	mov	r0, r7
 8004768:	3101      	adds	r1, #1
 800476a:	f7ff ff79 	bl	8004660 <_Balloc>
 800476e:	4680      	mov	r8, r0
 8004770:	b928      	cbnz	r0, 800477e <__multadd+0x5a>
 8004772:	4602      	mov	r2, r0
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <__multadd+0x84>)
 8004776:	480d      	ldr	r0, [pc, #52]	@ (80047ac <__multadd+0x88>)
 8004778:	21ba      	movs	r1, #186	@ 0xba
 800477a:	f000 fd2f 	bl	80051dc <__assert_func>
 800477e:	6922      	ldr	r2, [r4, #16]
 8004780:	3202      	adds	r2, #2
 8004782:	f104 010c 	add.w	r1, r4, #12
 8004786:	0092      	lsls	r2, r2, #2
 8004788:	300c      	adds	r0, #12
 800478a:	f000 fd19 	bl	80051c0 <memcpy>
 800478e:	4621      	mov	r1, r4
 8004790:	4638      	mov	r0, r7
 8004792:	f7ff ffa5 	bl	80046e0 <_Bfree>
 8004796:	4644      	mov	r4, r8
 8004798:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800479c:	3501      	adds	r5, #1
 800479e:	615e      	str	r6, [r3, #20]
 80047a0:	6125      	str	r5, [r4, #16]
 80047a2:	4620      	mov	r0, r4
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	0800641c 	.word	0x0800641c
 80047ac:	0800642d 	.word	0x0800642d

080047b0 <__hi0bits>:
 80047b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80047b4:	4603      	mov	r3, r0
 80047b6:	bf36      	itet	cc
 80047b8:	0403      	lslcc	r3, r0, #16
 80047ba:	2000      	movcs	r0, #0
 80047bc:	2010      	movcc	r0, #16
 80047be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047c2:	bf3c      	itt	cc
 80047c4:	021b      	lslcc	r3, r3, #8
 80047c6:	3008      	addcc	r0, #8
 80047c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047cc:	bf3c      	itt	cc
 80047ce:	011b      	lslcc	r3, r3, #4
 80047d0:	3004      	addcc	r0, #4
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d6:	bf3c      	itt	cc
 80047d8:	009b      	lslcc	r3, r3, #2
 80047da:	3002      	addcc	r0, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db05      	blt.n	80047ec <__hi0bits+0x3c>
 80047e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80047e4:	f100 0001 	add.w	r0, r0, #1
 80047e8:	bf08      	it	eq
 80047ea:	2020      	moveq	r0, #32
 80047ec:	4770      	bx	lr

080047ee <__lo0bits>:
 80047ee:	6803      	ldr	r3, [r0, #0]
 80047f0:	4602      	mov	r2, r0
 80047f2:	f013 0007 	ands.w	r0, r3, #7
 80047f6:	d00b      	beq.n	8004810 <__lo0bits+0x22>
 80047f8:	07d9      	lsls	r1, r3, #31
 80047fa:	d421      	bmi.n	8004840 <__lo0bits+0x52>
 80047fc:	0798      	lsls	r0, r3, #30
 80047fe:	bf49      	itett	mi
 8004800:	085b      	lsrmi	r3, r3, #1
 8004802:	089b      	lsrpl	r3, r3, #2
 8004804:	2001      	movmi	r0, #1
 8004806:	6013      	strmi	r3, [r2, #0]
 8004808:	bf5c      	itt	pl
 800480a:	6013      	strpl	r3, [r2, #0]
 800480c:	2002      	movpl	r0, #2
 800480e:	4770      	bx	lr
 8004810:	b299      	uxth	r1, r3
 8004812:	b909      	cbnz	r1, 8004818 <__lo0bits+0x2a>
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	2010      	movs	r0, #16
 8004818:	b2d9      	uxtb	r1, r3
 800481a:	b909      	cbnz	r1, 8004820 <__lo0bits+0x32>
 800481c:	3008      	adds	r0, #8
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	0719      	lsls	r1, r3, #28
 8004822:	bf04      	itt	eq
 8004824:	091b      	lsreq	r3, r3, #4
 8004826:	3004      	addeq	r0, #4
 8004828:	0799      	lsls	r1, r3, #30
 800482a:	bf04      	itt	eq
 800482c:	089b      	lsreq	r3, r3, #2
 800482e:	3002      	addeq	r0, #2
 8004830:	07d9      	lsls	r1, r3, #31
 8004832:	d403      	bmi.n	800483c <__lo0bits+0x4e>
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	f100 0001 	add.w	r0, r0, #1
 800483a:	d003      	beq.n	8004844 <__lo0bits+0x56>
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4770      	bx	lr
 8004840:	2000      	movs	r0, #0
 8004842:	4770      	bx	lr
 8004844:	2020      	movs	r0, #32
 8004846:	4770      	bx	lr

08004848 <__i2b>:
 8004848:	b510      	push	{r4, lr}
 800484a:	460c      	mov	r4, r1
 800484c:	2101      	movs	r1, #1
 800484e:	f7ff ff07 	bl	8004660 <_Balloc>
 8004852:	4602      	mov	r2, r0
 8004854:	b928      	cbnz	r0, 8004862 <__i2b+0x1a>
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <__i2b+0x24>)
 8004858:	4805      	ldr	r0, [pc, #20]	@ (8004870 <__i2b+0x28>)
 800485a:	f240 1145 	movw	r1, #325	@ 0x145
 800485e:	f000 fcbd 	bl	80051dc <__assert_func>
 8004862:	2301      	movs	r3, #1
 8004864:	6144      	str	r4, [r0, #20]
 8004866:	6103      	str	r3, [r0, #16]
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	0800641c 	.word	0x0800641c
 8004870:	0800642d 	.word	0x0800642d

08004874 <__multiply>:
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004878:	4614      	mov	r4, r2
 800487a:	690a      	ldr	r2, [r1, #16]
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	bfa8      	it	ge
 8004882:	4623      	movge	r3, r4
 8004884:	460f      	mov	r7, r1
 8004886:	bfa4      	itt	ge
 8004888:	460c      	movge	r4, r1
 800488a:	461f      	movge	r7, r3
 800488c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004890:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004894:	68a3      	ldr	r3, [r4, #8]
 8004896:	6861      	ldr	r1, [r4, #4]
 8004898:	eb0a 0609 	add.w	r6, sl, r9
 800489c:	42b3      	cmp	r3, r6
 800489e:	b085      	sub	sp, #20
 80048a0:	bfb8      	it	lt
 80048a2:	3101      	addlt	r1, #1
 80048a4:	f7ff fedc 	bl	8004660 <_Balloc>
 80048a8:	b930      	cbnz	r0, 80048b8 <__multiply+0x44>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b44      	ldr	r3, [pc, #272]	@ (80049c0 <__multiply+0x14c>)
 80048ae:	4845      	ldr	r0, [pc, #276]	@ (80049c4 <__multiply+0x150>)
 80048b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80048b4:	f000 fc92 	bl	80051dc <__assert_func>
 80048b8:	f100 0514 	add.w	r5, r0, #20
 80048bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80048c0:	462b      	mov	r3, r5
 80048c2:	2200      	movs	r2, #0
 80048c4:	4543      	cmp	r3, r8
 80048c6:	d321      	bcc.n	800490c <__multiply+0x98>
 80048c8:	f107 0114 	add.w	r1, r7, #20
 80048cc:	f104 0214 	add.w	r2, r4, #20
 80048d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80048d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	1b13      	subs	r3, r2, r4
 80048dc:	3b15      	subs	r3, #21
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	3304      	adds	r3, #4
 80048e4:	f104 0715 	add.w	r7, r4, #21
 80048e8:	42ba      	cmp	r2, r7
 80048ea:	bf38      	it	cc
 80048ec:	2304      	movcc	r3, #4
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	9b02      	ldr	r3, [sp, #8]
 80048f2:	9103      	str	r1, [sp, #12]
 80048f4:	428b      	cmp	r3, r1
 80048f6:	d80c      	bhi.n	8004912 <__multiply+0x9e>
 80048f8:	2e00      	cmp	r6, #0
 80048fa:	dd03      	ble.n	8004904 <__multiply+0x90>
 80048fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <__multiply+0x148>
 8004904:	6106      	str	r6, [r0, #16]
 8004906:	b005      	add	sp, #20
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	f843 2b04 	str.w	r2, [r3], #4
 8004910:	e7d8      	b.n	80048c4 <__multiply+0x50>
 8004912:	f8b1 a000 	ldrh.w	sl, [r1]
 8004916:	f1ba 0f00 	cmp.w	sl, #0
 800491a:	d024      	beq.n	8004966 <__multiply+0xf2>
 800491c:	f104 0e14 	add.w	lr, r4, #20
 8004920:	46a9      	mov	r9, r5
 8004922:	f04f 0c00 	mov.w	ip, #0
 8004926:	f85e 7b04 	ldr.w	r7, [lr], #4
 800492a:	f8d9 3000 	ldr.w	r3, [r9]
 800492e:	fa1f fb87 	uxth.w	fp, r7
 8004932:	b29b      	uxth	r3, r3
 8004934:	fb0a 330b 	mla	r3, sl, fp, r3
 8004938:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800493c:	f8d9 7000 	ldr.w	r7, [r9]
 8004940:	4463      	add	r3, ip
 8004942:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004946:	fb0a c70b 	mla	r7, sl, fp, ip
 800494a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800494e:	b29b      	uxth	r3, r3
 8004950:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004954:	4572      	cmp	r2, lr
 8004956:	f849 3b04 	str.w	r3, [r9], #4
 800495a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800495e:	d8e2      	bhi.n	8004926 <__multiply+0xb2>
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	f845 c003 	str.w	ip, [r5, r3]
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800496c:	3104      	adds	r1, #4
 800496e:	f1b9 0f00 	cmp.w	r9, #0
 8004972:	d021      	beq.n	80049b8 <__multiply+0x144>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	f104 0c14 	add.w	ip, r4, #20
 800497a:	46ae      	mov	lr, r5
 800497c:	f04f 0a00 	mov.w	sl, #0
 8004980:	f8bc b000 	ldrh.w	fp, [ip]
 8004984:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004988:	fb09 770b 	mla	r7, r9, fp, r7
 800498c:	4457      	add	r7, sl
 800498e:	b29b      	uxth	r3, r3
 8004990:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004994:	f84e 3b04 	str.w	r3, [lr], #4
 8004998:	f85c 3b04 	ldr.w	r3, [ip], #4
 800499c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049a0:	f8be 3000 	ldrh.w	r3, [lr]
 80049a4:	fb09 330a 	mla	r3, r9, sl, r3
 80049a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80049ac:	4562      	cmp	r2, ip
 80049ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049b2:	d8e5      	bhi.n	8004980 <__multiply+0x10c>
 80049b4:	9f01      	ldr	r7, [sp, #4]
 80049b6:	51eb      	str	r3, [r5, r7]
 80049b8:	3504      	adds	r5, #4
 80049ba:	e799      	b.n	80048f0 <__multiply+0x7c>
 80049bc:	3e01      	subs	r6, #1
 80049be:	e79b      	b.n	80048f8 <__multiply+0x84>
 80049c0:	0800641c 	.word	0x0800641c
 80049c4:	0800642d 	.word	0x0800642d

080049c8 <__pow5mult>:
 80049c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049cc:	4615      	mov	r5, r2
 80049ce:	f012 0203 	ands.w	r2, r2, #3
 80049d2:	4607      	mov	r7, r0
 80049d4:	460e      	mov	r6, r1
 80049d6:	d007      	beq.n	80049e8 <__pow5mult+0x20>
 80049d8:	4c25      	ldr	r4, [pc, #148]	@ (8004a70 <__pow5mult+0xa8>)
 80049da:	3a01      	subs	r2, #1
 80049dc:	2300      	movs	r3, #0
 80049de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80049e2:	f7ff fe9f 	bl	8004724 <__multadd>
 80049e6:	4606      	mov	r6, r0
 80049e8:	10ad      	asrs	r5, r5, #2
 80049ea:	d03d      	beq.n	8004a68 <__pow5mult+0xa0>
 80049ec:	69fc      	ldr	r4, [r7, #28]
 80049ee:	b97c      	cbnz	r4, 8004a10 <__pow5mult+0x48>
 80049f0:	2010      	movs	r0, #16
 80049f2:	f7ff fd7f 	bl	80044f4 <malloc>
 80049f6:	4602      	mov	r2, r0
 80049f8:	61f8      	str	r0, [r7, #28]
 80049fa:	b928      	cbnz	r0, 8004a08 <__pow5mult+0x40>
 80049fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <__pow5mult+0xac>)
 80049fe:	481e      	ldr	r0, [pc, #120]	@ (8004a78 <__pow5mult+0xb0>)
 8004a00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004a04:	f000 fbea 	bl	80051dc <__assert_func>
 8004a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a0c:	6004      	str	r4, [r0, #0]
 8004a0e:	60c4      	str	r4, [r0, #12]
 8004a10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a18:	b94c      	cbnz	r4, 8004a2e <__pow5mult+0x66>
 8004a1a:	f240 2171 	movw	r1, #625	@ 0x271
 8004a1e:	4638      	mov	r0, r7
 8004a20:	f7ff ff12 	bl	8004848 <__i2b>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	6003      	str	r3, [r0, #0]
 8004a2e:	f04f 0900 	mov.w	r9, #0
 8004a32:	07eb      	lsls	r3, r5, #31
 8004a34:	d50a      	bpl.n	8004a4c <__pow5mult+0x84>
 8004a36:	4631      	mov	r1, r6
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f7ff ff1a 	bl	8004874 <__multiply>
 8004a40:	4631      	mov	r1, r6
 8004a42:	4680      	mov	r8, r0
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7ff fe4b 	bl	80046e0 <_Bfree>
 8004a4a:	4646      	mov	r6, r8
 8004a4c:	106d      	asrs	r5, r5, #1
 8004a4e:	d00b      	beq.n	8004a68 <__pow5mult+0xa0>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	b938      	cbnz	r0, 8004a64 <__pow5mult+0x9c>
 8004a54:	4622      	mov	r2, r4
 8004a56:	4621      	mov	r1, r4
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f7ff ff0b 	bl	8004874 <__multiply>
 8004a5e:	6020      	str	r0, [r4, #0]
 8004a60:	f8c0 9000 	str.w	r9, [r0]
 8004a64:	4604      	mov	r4, r0
 8004a66:	e7e4      	b.n	8004a32 <__pow5mult+0x6a>
 8004a68:	4630      	mov	r0, r6
 8004a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6e:	bf00      	nop
 8004a70:	08006488 	.word	0x08006488
 8004a74:	080063ad 	.word	0x080063ad
 8004a78:	0800642d 	.word	0x0800642d

08004a7c <__lshift>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	460c      	mov	r4, r1
 8004a82:	6849      	ldr	r1, [r1, #4]
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a8a:	68a3      	ldr	r3, [r4, #8]
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	4691      	mov	r9, r2
 8004a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a94:	f108 0601 	add.w	r6, r8, #1
 8004a98:	42b3      	cmp	r3, r6
 8004a9a:	db0b      	blt.n	8004ab4 <__lshift+0x38>
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7ff fddf 	bl	8004660 <_Balloc>
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	b948      	cbnz	r0, 8004aba <__lshift+0x3e>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <__lshift+0xd0>)
 8004aaa:	4829      	ldr	r0, [pc, #164]	@ (8004b50 <__lshift+0xd4>)
 8004aac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004ab0:	f000 fb94 	bl	80051dc <__assert_func>
 8004ab4:	3101      	adds	r1, #1
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	e7ee      	b.n	8004a98 <__lshift+0x1c>
 8004aba:	2300      	movs	r3, #0
 8004abc:	f100 0114 	add.w	r1, r0, #20
 8004ac0:	f100 0210 	add.w	r2, r0, #16
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	4553      	cmp	r3, sl
 8004ac8:	db33      	blt.n	8004b32 <__lshift+0xb6>
 8004aca:	6920      	ldr	r0, [r4, #16]
 8004acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ad0:	f104 0314 	add.w	r3, r4, #20
 8004ad4:	f019 091f 	ands.w	r9, r9, #31
 8004ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004adc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ae0:	d02b      	beq.n	8004b3a <__lshift+0xbe>
 8004ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ae6:	468a      	mov	sl, r1
 8004ae8:	2200      	movs	r2, #0
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	fa00 f009 	lsl.w	r0, r0, r9
 8004af0:	4310      	orrs	r0, r2
 8004af2:	f84a 0b04 	str.w	r0, [sl], #4
 8004af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004afa:	459c      	cmp	ip, r3
 8004afc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b00:	d8f3      	bhi.n	8004aea <__lshift+0x6e>
 8004b02:	ebac 0304 	sub.w	r3, ip, r4
 8004b06:	3b15      	subs	r3, #21
 8004b08:	f023 0303 	bic.w	r3, r3, #3
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	f104 0015 	add.w	r0, r4, #21
 8004b12:	4584      	cmp	ip, r0
 8004b14:	bf38      	it	cc
 8004b16:	2304      	movcc	r3, #4
 8004b18:	50ca      	str	r2, [r1, r3]
 8004b1a:	b10a      	cbz	r2, 8004b20 <__lshift+0xa4>
 8004b1c:	f108 0602 	add.w	r6, r8, #2
 8004b20:	3e01      	subs	r6, #1
 8004b22:	4638      	mov	r0, r7
 8004b24:	612e      	str	r6, [r5, #16]
 8004b26:	4621      	mov	r1, r4
 8004b28:	f7ff fdda 	bl	80046e0 <_Bfree>
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b36:	3301      	adds	r3, #1
 8004b38:	e7c5      	b.n	8004ac6 <__lshift+0x4a>
 8004b3a:	3904      	subs	r1, #4
 8004b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b44:	459c      	cmp	ip, r3
 8004b46:	d8f9      	bhi.n	8004b3c <__lshift+0xc0>
 8004b48:	e7ea      	b.n	8004b20 <__lshift+0xa4>
 8004b4a:	bf00      	nop
 8004b4c:	0800641c 	.word	0x0800641c
 8004b50:	0800642d 	.word	0x0800642d

08004b54 <__mcmp>:
 8004b54:	690a      	ldr	r2, [r1, #16]
 8004b56:	4603      	mov	r3, r0
 8004b58:	6900      	ldr	r0, [r0, #16]
 8004b5a:	1a80      	subs	r0, r0, r2
 8004b5c:	b530      	push	{r4, r5, lr}
 8004b5e:	d10e      	bne.n	8004b7e <__mcmp+0x2a>
 8004b60:	3314      	adds	r3, #20
 8004b62:	3114      	adds	r1, #20
 8004b64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004b68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004b6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b74:	4295      	cmp	r5, r2
 8004b76:	d003      	beq.n	8004b80 <__mcmp+0x2c>
 8004b78:	d205      	bcs.n	8004b86 <__mcmp+0x32>
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	bd30      	pop	{r4, r5, pc}
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d3f3      	bcc.n	8004b6c <__mcmp+0x18>
 8004b84:	e7fb      	b.n	8004b7e <__mcmp+0x2a>
 8004b86:	2001      	movs	r0, #1
 8004b88:	e7f9      	b.n	8004b7e <__mcmp+0x2a>
	...

08004b8c <__mdiff>:
 8004b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b90:	4689      	mov	r9, r1
 8004b92:	4606      	mov	r6, r0
 8004b94:	4611      	mov	r1, r2
 8004b96:	4648      	mov	r0, r9
 8004b98:	4614      	mov	r4, r2
 8004b9a:	f7ff ffdb 	bl	8004b54 <__mcmp>
 8004b9e:	1e05      	subs	r5, r0, #0
 8004ba0:	d112      	bne.n	8004bc8 <__mdiff+0x3c>
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f7ff fd5b 	bl	8004660 <_Balloc>
 8004baa:	4602      	mov	r2, r0
 8004bac:	b928      	cbnz	r0, 8004bba <__mdiff+0x2e>
 8004bae:	4b3f      	ldr	r3, [pc, #252]	@ (8004cac <__mdiff+0x120>)
 8004bb0:	f240 2137 	movw	r1, #567	@ 0x237
 8004bb4:	483e      	ldr	r0, [pc, #248]	@ (8004cb0 <__mdiff+0x124>)
 8004bb6:	f000 fb11 	bl	80051dc <__assert_func>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	b003      	add	sp, #12
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	bfbc      	itt	lt
 8004bca:	464b      	movlt	r3, r9
 8004bcc:	46a1      	movlt	r9, r4
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004bd4:	bfba      	itte	lt
 8004bd6:	461c      	movlt	r4, r3
 8004bd8:	2501      	movlt	r5, #1
 8004bda:	2500      	movge	r5, #0
 8004bdc:	f7ff fd40 	bl	8004660 <_Balloc>
 8004be0:	4602      	mov	r2, r0
 8004be2:	b918      	cbnz	r0, 8004bec <__mdiff+0x60>
 8004be4:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <__mdiff+0x120>)
 8004be6:	f240 2145 	movw	r1, #581	@ 0x245
 8004bea:	e7e3      	b.n	8004bb4 <__mdiff+0x28>
 8004bec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004bf0:	6926      	ldr	r6, [r4, #16]
 8004bf2:	60c5      	str	r5, [r0, #12]
 8004bf4:	f109 0310 	add.w	r3, r9, #16
 8004bf8:	f109 0514 	add.w	r5, r9, #20
 8004bfc:	f104 0e14 	add.w	lr, r4, #20
 8004c00:	f100 0b14 	add.w	fp, r0, #20
 8004c04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004c08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	46d9      	mov	r9, fp
 8004c10:	f04f 0c00 	mov.w	ip, #0
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004c1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	fa1f f38a 	uxth.w	r3, sl
 8004c24:	4619      	mov	r1, r3
 8004c26:	b283      	uxth	r3, r0
 8004c28:	1acb      	subs	r3, r1, r3
 8004c2a:	0c00      	lsrs	r0, r0, #16
 8004c2c:	4463      	add	r3, ip
 8004c2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004c32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004c3c:	4576      	cmp	r6, lr
 8004c3e:	f849 3b04 	str.w	r3, [r9], #4
 8004c42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004c46:	d8e5      	bhi.n	8004c14 <__mdiff+0x88>
 8004c48:	1b33      	subs	r3, r6, r4
 8004c4a:	3b15      	subs	r3, #21
 8004c4c:	f023 0303 	bic.w	r3, r3, #3
 8004c50:	3415      	adds	r4, #21
 8004c52:	3304      	adds	r3, #4
 8004c54:	42a6      	cmp	r6, r4
 8004c56:	bf38      	it	cc
 8004c58:	2304      	movcc	r3, #4
 8004c5a:	441d      	add	r5, r3
 8004c5c:	445b      	add	r3, fp
 8004c5e:	461e      	mov	r6, r3
 8004c60:	462c      	mov	r4, r5
 8004c62:	4544      	cmp	r4, r8
 8004c64:	d30e      	bcc.n	8004c84 <__mdiff+0xf8>
 8004c66:	f108 0103 	add.w	r1, r8, #3
 8004c6a:	1b49      	subs	r1, r1, r5
 8004c6c:	f021 0103 	bic.w	r1, r1, #3
 8004c70:	3d03      	subs	r5, #3
 8004c72:	45a8      	cmp	r8, r5
 8004c74:	bf38      	it	cc
 8004c76:	2100      	movcc	r1, #0
 8004c78:	440b      	add	r3, r1
 8004c7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c7e:	b191      	cbz	r1, 8004ca6 <__mdiff+0x11a>
 8004c80:	6117      	str	r7, [r2, #16]
 8004c82:	e79d      	b.n	8004bc0 <__mdiff+0x34>
 8004c84:	f854 1b04 	ldr.w	r1, [r4], #4
 8004c88:	46e6      	mov	lr, ip
 8004c8a:	0c08      	lsrs	r0, r1, #16
 8004c8c:	fa1c fc81 	uxtah	ip, ip, r1
 8004c90:	4471      	add	r1, lr
 8004c92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004c96:	b289      	uxth	r1, r1
 8004c98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004c9c:	f846 1b04 	str.w	r1, [r6], #4
 8004ca0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ca4:	e7dd      	b.n	8004c62 <__mdiff+0xd6>
 8004ca6:	3f01      	subs	r7, #1
 8004ca8:	e7e7      	b.n	8004c7a <__mdiff+0xee>
 8004caa:	bf00      	nop
 8004cac:	0800641c 	.word	0x0800641c
 8004cb0:	0800642d 	.word	0x0800642d

08004cb4 <__d2b>:
 8004cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cb8:	460f      	mov	r7, r1
 8004cba:	2101      	movs	r1, #1
 8004cbc:	ec59 8b10 	vmov	r8, r9, d0
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	f7ff fccd 	bl	8004660 <_Balloc>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	b930      	cbnz	r0, 8004cd8 <__d2b+0x24>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b23      	ldr	r3, [pc, #140]	@ (8004d5c <__d2b+0xa8>)
 8004cce:	4824      	ldr	r0, [pc, #144]	@ (8004d60 <__d2b+0xac>)
 8004cd0:	f240 310f 	movw	r1, #783	@ 0x30f
 8004cd4:	f000 fa82 	bl	80051dc <__assert_func>
 8004cd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004cdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ce0:	b10d      	cbz	r5, 8004ce6 <__d2b+0x32>
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	f1b8 0300 	subs.w	r3, r8, #0
 8004cec:	d023      	beq.n	8004d36 <__d2b+0x82>
 8004cee:	4668      	mov	r0, sp
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	f7ff fd7c 	bl	80047ee <__lo0bits>
 8004cf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004cfa:	b1d0      	cbz	r0, 8004d32 <__d2b+0x7e>
 8004cfc:	f1c0 0320 	rsb	r3, r0, #32
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	430b      	orrs	r3, r1
 8004d06:	40c2      	lsrs	r2, r0
 8004d08:	6163      	str	r3, [r4, #20]
 8004d0a:	9201      	str	r2, [sp, #4]
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	61a3      	str	r3, [r4, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2201      	moveq	r2, #1
 8004d16:	2202      	movne	r2, #2
 8004d18:	6122      	str	r2, [r4, #16]
 8004d1a:	b1a5      	cbz	r5, 8004d46 <__d2b+0x92>
 8004d1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004d20:	4405      	add	r5, r0
 8004d22:	603d      	str	r5, [r7, #0]
 8004d24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004d28:	6030      	str	r0, [r6, #0]
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	b003      	add	sp, #12
 8004d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d32:	6161      	str	r1, [r4, #20]
 8004d34:	e7ea      	b.n	8004d0c <__d2b+0x58>
 8004d36:	a801      	add	r0, sp, #4
 8004d38:	f7ff fd59 	bl	80047ee <__lo0bits>
 8004d3c:	9b01      	ldr	r3, [sp, #4]
 8004d3e:	6163      	str	r3, [r4, #20]
 8004d40:	3020      	adds	r0, #32
 8004d42:	2201      	movs	r2, #1
 8004d44:	e7e8      	b.n	8004d18 <__d2b+0x64>
 8004d46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004d4e:	6038      	str	r0, [r7, #0]
 8004d50:	6918      	ldr	r0, [r3, #16]
 8004d52:	f7ff fd2d 	bl	80047b0 <__hi0bits>
 8004d56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004d5a:	e7e5      	b.n	8004d28 <__d2b+0x74>
 8004d5c:	0800641c 	.word	0x0800641c
 8004d60:	0800642d 	.word	0x0800642d

08004d64 <__ssputs_r>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	688e      	ldr	r6, [r1, #8]
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	42be      	cmp	r6, r7
 8004d6e:	680b      	ldr	r3, [r1, #0]
 8004d70:	4682      	mov	sl, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	4690      	mov	r8, r2
 8004d76:	d82d      	bhi.n	8004dd4 <__ssputs_r+0x70>
 8004d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d80:	d026      	beq.n	8004dd0 <__ssputs_r+0x6c>
 8004d82:	6965      	ldr	r5, [r4, #20]
 8004d84:	6909      	ldr	r1, [r1, #16]
 8004d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d8a:	eba3 0901 	sub.w	r9, r3, r1
 8004d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d92:	1c7b      	adds	r3, r7, #1
 8004d94:	444b      	add	r3, r9
 8004d96:	106d      	asrs	r5, r5, #1
 8004d98:	429d      	cmp	r5, r3
 8004d9a:	bf38      	it	cc
 8004d9c:	461d      	movcc	r5, r3
 8004d9e:	0553      	lsls	r3, r2, #21
 8004da0:	d527      	bpl.n	8004df2 <__ssputs_r+0x8e>
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7ff fbd0 	bl	8004548 <_malloc_r>
 8004da8:	4606      	mov	r6, r0
 8004daa:	b360      	cbz	r0, 8004e06 <__ssputs_r+0xa2>
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	464a      	mov	r2, r9
 8004db0:	f000 fa06 	bl	80051c0 <memcpy>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	6126      	str	r6, [r4, #16]
 8004dc2:	6165      	str	r5, [r4, #20]
 8004dc4:	444e      	add	r6, r9
 8004dc6:	eba5 0509 	sub.w	r5, r5, r9
 8004dca:	6026      	str	r6, [r4, #0]
 8004dcc:	60a5      	str	r5, [r4, #8]
 8004dce:	463e      	mov	r6, r7
 8004dd0:	42be      	cmp	r6, r7
 8004dd2:	d900      	bls.n	8004dd6 <__ssputs_r+0x72>
 8004dd4:	463e      	mov	r6, r7
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4641      	mov	r1, r8
 8004ddc:	f000 f9c6 	bl	800516c <memmove>
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	1b9b      	subs	r3, r3, r6
 8004de4:	60a3      	str	r3, [r4, #8]
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	4433      	add	r3, r6
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df2:	462a      	mov	r2, r5
 8004df4:	f000 fa36 	bl	8005264 <_realloc_r>
 8004df8:	4606      	mov	r6, r0
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d1e0      	bne.n	8004dc0 <__ssputs_r+0x5c>
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	4650      	mov	r0, sl
 8004e02:	f7ff fb2d 	bl	8004460 <_free_r>
 8004e06:	230c      	movs	r3, #12
 8004e08:	f8ca 3000 	str.w	r3, [sl]
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	e7e9      	b.n	8004dee <__ssputs_r+0x8a>
	...

08004e1c <_svfiprintf_r>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	4698      	mov	r8, r3
 8004e22:	898b      	ldrh	r3, [r1, #12]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	b09d      	sub	sp, #116	@ 0x74
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	d510      	bpl.n	8004e52 <_svfiprintf_r+0x36>
 8004e30:	690b      	ldr	r3, [r1, #16]
 8004e32:	b973      	cbnz	r3, 8004e52 <_svfiprintf_r+0x36>
 8004e34:	2140      	movs	r1, #64	@ 0x40
 8004e36:	f7ff fb87 	bl	8004548 <_malloc_r>
 8004e3a:	6028      	str	r0, [r5, #0]
 8004e3c:	6128      	str	r0, [r5, #16]
 8004e3e:	b930      	cbnz	r0, 8004e4e <_svfiprintf_r+0x32>
 8004e40:	230c      	movs	r3, #12
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b01d      	add	sp, #116	@ 0x74
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	2340      	movs	r3, #64	@ 0x40
 8004e50:	616b      	str	r3, [r5, #20]
 8004e52:	2300      	movs	r3, #0
 8004e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e56:	2320      	movs	r3, #32
 8004e58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e60:	2330      	movs	r3, #48	@ 0x30
 8004e62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005000 <_svfiprintf_r+0x1e4>
 8004e66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e6a:	f04f 0901 	mov.w	r9, #1
 8004e6e:	4623      	mov	r3, r4
 8004e70:	469a      	mov	sl, r3
 8004e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e76:	b10a      	cbz	r2, 8004e7c <_svfiprintf_r+0x60>
 8004e78:	2a25      	cmp	r2, #37	@ 0x25
 8004e7a:	d1f9      	bne.n	8004e70 <_svfiprintf_r+0x54>
 8004e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e80:	d00b      	beq.n	8004e9a <_svfiprintf_r+0x7e>
 8004e82:	465b      	mov	r3, fp
 8004e84:	4622      	mov	r2, r4
 8004e86:	4629      	mov	r1, r5
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff ff6b 	bl	8004d64 <__ssputs_r>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f000 80a7 	beq.w	8004fe2 <_svfiprintf_r+0x1c6>
 8004e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e96:	445a      	add	r2, fp
 8004e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 809f 	beq.w	8004fe2 <_svfiprintf_r+0x1c6>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eae:	f10a 0a01 	add.w	sl, sl, #1
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ebc:	4654      	mov	r4, sl
 8004ebe:	2205      	movs	r2, #5
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	484e      	ldr	r0, [pc, #312]	@ (8005000 <_svfiprintf_r+0x1e4>)
 8004ec6:	f7fb f98b 	bl	80001e0 <memchr>
 8004eca:	9a04      	ldr	r2, [sp, #16]
 8004ecc:	b9d8      	cbnz	r0, 8004f06 <_svfiprintf_r+0xea>
 8004ece:	06d0      	lsls	r0, r2, #27
 8004ed0:	bf44      	itt	mi
 8004ed2:	2320      	movmi	r3, #32
 8004ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed8:	0711      	lsls	r1, r2, #28
 8004eda:	bf44      	itt	mi
 8004edc:	232b      	movmi	r3, #43	@ 0x2b
 8004ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ee8:	d015      	beq.n	8004f16 <_svfiprintf_r+0xfa>
 8004eea:	9a07      	ldr	r2, [sp, #28]
 8004eec:	4654      	mov	r4, sl
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f04f 0c0a 	mov.w	ip, #10
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efa:	3b30      	subs	r3, #48	@ 0x30
 8004efc:	2b09      	cmp	r3, #9
 8004efe:	d94b      	bls.n	8004f98 <_svfiprintf_r+0x17c>
 8004f00:	b1b0      	cbz	r0, 8004f30 <_svfiprintf_r+0x114>
 8004f02:	9207      	str	r2, [sp, #28]
 8004f04:	e014      	b.n	8004f30 <_svfiprintf_r+0x114>
 8004f06:	eba0 0308 	sub.w	r3, r0, r8
 8004f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	46a2      	mov	sl, r4
 8004f14:	e7d2      	b.n	8004ebc <_svfiprintf_r+0xa0>
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	9103      	str	r1, [sp, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfbb      	ittet	lt
 8004f22:	425b      	neglt	r3, r3
 8004f24:	f042 0202 	orrlt.w	r2, r2, #2
 8004f28:	9307      	strge	r3, [sp, #28]
 8004f2a:	9307      	strlt	r3, [sp, #28]
 8004f2c:	bfb8      	it	lt
 8004f2e:	9204      	strlt	r2, [sp, #16]
 8004f30:	7823      	ldrb	r3, [r4, #0]
 8004f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f34:	d10a      	bne.n	8004f4c <_svfiprintf_r+0x130>
 8004f36:	7863      	ldrb	r3, [r4, #1]
 8004f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f3a:	d132      	bne.n	8004fa2 <_svfiprintf_r+0x186>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	9203      	str	r2, [sp, #12]
 8004f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f48:	3402      	adds	r4, #2
 8004f4a:	9305      	str	r3, [sp, #20]
 8004f4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005010 <_svfiprintf_r+0x1f4>
 8004f50:	7821      	ldrb	r1, [r4, #0]
 8004f52:	2203      	movs	r2, #3
 8004f54:	4650      	mov	r0, sl
 8004f56:	f7fb f943 	bl	80001e0 <memchr>
 8004f5a:	b138      	cbz	r0, 8004f6c <_svfiprintf_r+0x150>
 8004f5c:	9b04      	ldr	r3, [sp, #16]
 8004f5e:	eba0 000a 	sub.w	r0, r0, sl
 8004f62:	2240      	movs	r2, #64	@ 0x40
 8004f64:	4082      	lsls	r2, r0
 8004f66:	4313      	orrs	r3, r2
 8004f68:	3401      	adds	r4, #1
 8004f6a:	9304      	str	r3, [sp, #16]
 8004f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f70:	4824      	ldr	r0, [pc, #144]	@ (8005004 <_svfiprintf_r+0x1e8>)
 8004f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f76:	2206      	movs	r2, #6
 8004f78:	f7fb f932 	bl	80001e0 <memchr>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d036      	beq.n	8004fee <_svfiprintf_r+0x1d2>
 8004f80:	4b21      	ldr	r3, [pc, #132]	@ (8005008 <_svfiprintf_r+0x1ec>)
 8004f82:	bb1b      	cbnz	r3, 8004fcc <_svfiprintf_r+0x1b0>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	3307      	adds	r3, #7
 8004f88:	f023 0307 	bic.w	r3, r3, #7
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f92:	4433      	add	r3, r6
 8004f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f96:	e76a      	b.n	8004e6e <_svfiprintf_r+0x52>
 8004f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	e7a8      	b.n	8004ef4 <_svfiprintf_r+0xd8>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	3401      	adds	r4, #1
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f04f 0c0a 	mov.w	ip, #10
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb4:	3a30      	subs	r2, #48	@ 0x30
 8004fb6:	2a09      	cmp	r2, #9
 8004fb8:	d903      	bls.n	8004fc2 <_svfiprintf_r+0x1a6>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0c6      	beq.n	8004f4c <_svfiprintf_r+0x130>
 8004fbe:	9105      	str	r1, [sp, #20]
 8004fc0:	e7c4      	b.n	8004f4c <_svfiprintf_r+0x130>
 8004fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e7f0      	b.n	8004fae <_svfiprintf_r+0x192>
 8004fcc:	ab03      	add	r3, sp, #12
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <_svfiprintf_r+0x1f0>)
 8004fd4:	a904      	add	r1, sp, #16
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7fd fe96 	bl	8002d08 <_printf_float>
 8004fdc:	1c42      	adds	r2, r0, #1
 8004fde:	4606      	mov	r6, r0
 8004fe0:	d1d6      	bne.n	8004f90 <_svfiprintf_r+0x174>
 8004fe2:	89ab      	ldrh	r3, [r5, #12]
 8004fe4:	065b      	lsls	r3, r3, #25
 8004fe6:	f53f af2d 	bmi.w	8004e44 <_svfiprintf_r+0x28>
 8004fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fec:	e72c      	b.n	8004e48 <_svfiprintf_r+0x2c>
 8004fee:	ab03      	add	r3, sp, #12
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	462a      	mov	r2, r5
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <_svfiprintf_r+0x1f0>)
 8004ff6:	a904      	add	r1, sp, #16
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f7fe f91d 	bl	8003238 <_printf_i>
 8004ffe:	e7ed      	b.n	8004fdc <_svfiprintf_r+0x1c0>
 8005000:	08006588 	.word	0x08006588
 8005004:	08006592 	.word	0x08006592
 8005008:	08002d09 	.word	0x08002d09
 800500c:	08004d65 	.word	0x08004d65
 8005010:	0800658e 	.word	0x0800658e

08005014 <__sflush_r>:
 8005014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501c:	0716      	lsls	r6, r2, #28
 800501e:	4605      	mov	r5, r0
 8005020:	460c      	mov	r4, r1
 8005022:	d454      	bmi.n	80050ce <__sflush_r+0xba>
 8005024:	684b      	ldr	r3, [r1, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	dc02      	bgt.n	8005030 <__sflush_r+0x1c>
 800502a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	dd48      	ble.n	80050c2 <__sflush_r+0xae>
 8005030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005032:	2e00      	cmp	r6, #0
 8005034:	d045      	beq.n	80050c2 <__sflush_r+0xae>
 8005036:	2300      	movs	r3, #0
 8005038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800503c:	682f      	ldr	r7, [r5, #0]
 800503e:	6a21      	ldr	r1, [r4, #32]
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	d030      	beq.n	80050a6 <__sflush_r+0x92>
 8005044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	0759      	lsls	r1, r3, #29
 800504a:	d505      	bpl.n	8005058 <__sflush_r+0x44>
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005052:	b10b      	cbz	r3, 8005058 <__sflush_r+0x44>
 8005054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800505c:	6a21      	ldr	r1, [r4, #32]
 800505e:	4628      	mov	r0, r5
 8005060:	47b0      	blx	r6
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	d106      	bne.n	8005076 <__sflush_r+0x62>
 8005068:	6829      	ldr	r1, [r5, #0]
 800506a:	291d      	cmp	r1, #29
 800506c:	d82b      	bhi.n	80050c6 <__sflush_r+0xb2>
 800506e:	4a2a      	ldr	r2, [pc, #168]	@ (8005118 <__sflush_r+0x104>)
 8005070:	410a      	asrs	r2, r1
 8005072:	07d6      	lsls	r6, r2, #31
 8005074:	d427      	bmi.n	80050c6 <__sflush_r+0xb2>
 8005076:	2200      	movs	r2, #0
 8005078:	6062      	str	r2, [r4, #4]
 800507a:	04d9      	lsls	r1, r3, #19
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	6022      	str	r2, [r4, #0]
 8005080:	d504      	bpl.n	800508c <__sflush_r+0x78>
 8005082:	1c42      	adds	r2, r0, #1
 8005084:	d101      	bne.n	800508a <__sflush_r+0x76>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	b903      	cbnz	r3, 800508c <__sflush_r+0x78>
 800508a:	6560      	str	r0, [r4, #84]	@ 0x54
 800508c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800508e:	602f      	str	r7, [r5, #0]
 8005090:	b1b9      	cbz	r1, 80050c2 <__sflush_r+0xae>
 8005092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005096:	4299      	cmp	r1, r3
 8005098:	d002      	beq.n	80050a0 <__sflush_r+0x8c>
 800509a:	4628      	mov	r0, r5
 800509c:	f7ff f9e0 	bl	8004460 <_free_r>
 80050a0:	2300      	movs	r3, #0
 80050a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80050a4:	e00d      	b.n	80050c2 <__sflush_r+0xae>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b0      	blx	r6
 80050ac:	4602      	mov	r2, r0
 80050ae:	1c50      	adds	r0, r2, #1
 80050b0:	d1c9      	bne.n	8005046 <__sflush_r+0x32>
 80050b2:	682b      	ldr	r3, [r5, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0c6      	beq.n	8005046 <__sflush_r+0x32>
 80050b8:	2b1d      	cmp	r3, #29
 80050ba:	d001      	beq.n	80050c0 <__sflush_r+0xac>
 80050bc:	2b16      	cmp	r3, #22
 80050be:	d11e      	bne.n	80050fe <__sflush_r+0xea>
 80050c0:	602f      	str	r7, [r5, #0]
 80050c2:	2000      	movs	r0, #0
 80050c4:	e022      	b.n	800510c <__sflush_r+0xf8>
 80050c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	e01b      	b.n	8005106 <__sflush_r+0xf2>
 80050ce:	690f      	ldr	r7, [r1, #16]
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	d0f6      	beq.n	80050c2 <__sflush_r+0xae>
 80050d4:	0793      	lsls	r3, r2, #30
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	bf08      	it	eq
 80050da:	694b      	ldreq	r3, [r1, #20]
 80050dc:	600f      	str	r7, [r1, #0]
 80050de:	bf18      	it	ne
 80050e0:	2300      	movne	r3, #0
 80050e2:	eba6 0807 	sub.w	r8, r6, r7
 80050e6:	608b      	str	r3, [r1, #8]
 80050e8:	f1b8 0f00 	cmp.w	r8, #0
 80050ec:	dde9      	ble.n	80050c2 <__sflush_r+0xae>
 80050ee:	6a21      	ldr	r1, [r4, #32]
 80050f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050f2:	4643      	mov	r3, r8
 80050f4:	463a      	mov	r2, r7
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b0      	blx	r6
 80050fa:	2800      	cmp	r0, #0
 80050fc:	dc08      	bgt.n	8005110 <__sflush_r+0xfc>
 80050fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005110:	4407      	add	r7, r0
 8005112:	eba8 0800 	sub.w	r8, r8, r0
 8005116:	e7e7      	b.n	80050e8 <__sflush_r+0xd4>
 8005118:	dfbffffe 	.word	0xdfbffffe

0800511c <_fflush_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	4605      	mov	r5, r0
 8005122:	460c      	mov	r4, r1
 8005124:	b913      	cbnz	r3, 800512c <_fflush_r+0x10>
 8005126:	2500      	movs	r5, #0
 8005128:	4628      	mov	r0, r5
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	b118      	cbz	r0, 8005136 <_fflush_r+0x1a>
 800512e:	6a03      	ldr	r3, [r0, #32]
 8005130:	b90b      	cbnz	r3, 8005136 <_fflush_r+0x1a>
 8005132:	f7fe fa2d 	bl	8003590 <__sinit>
 8005136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f3      	beq.n	8005126 <_fflush_r+0xa>
 800513e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005140:	07d0      	lsls	r0, r2, #31
 8005142:	d404      	bmi.n	800514e <_fflush_r+0x32>
 8005144:	0599      	lsls	r1, r3, #22
 8005146:	d402      	bmi.n	800514e <_fflush_r+0x32>
 8005148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800514a:	f7fe fb38 	bl	80037be <__retarget_lock_acquire_recursive>
 800514e:	4628      	mov	r0, r5
 8005150:	4621      	mov	r1, r4
 8005152:	f7ff ff5f 	bl	8005014 <__sflush_r>
 8005156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005158:	07da      	lsls	r2, r3, #31
 800515a:	4605      	mov	r5, r0
 800515c:	d4e4      	bmi.n	8005128 <_fflush_r+0xc>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	059b      	lsls	r3, r3, #22
 8005162:	d4e1      	bmi.n	8005128 <_fflush_r+0xc>
 8005164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005166:	f7fe fb2b 	bl	80037c0 <__retarget_lock_release_recursive>
 800516a:	e7dd      	b.n	8005128 <_fflush_r+0xc>

0800516c <memmove>:
 800516c:	4288      	cmp	r0, r1
 800516e:	b510      	push	{r4, lr}
 8005170:	eb01 0402 	add.w	r4, r1, r2
 8005174:	d902      	bls.n	800517c <memmove+0x10>
 8005176:	4284      	cmp	r4, r0
 8005178:	4623      	mov	r3, r4
 800517a:	d807      	bhi.n	800518c <memmove+0x20>
 800517c:	1e43      	subs	r3, r0, #1
 800517e:	42a1      	cmp	r1, r4
 8005180:	d008      	beq.n	8005194 <memmove+0x28>
 8005182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800518a:	e7f8      	b.n	800517e <memmove+0x12>
 800518c:	4402      	add	r2, r0
 800518e:	4601      	mov	r1, r0
 8005190:	428a      	cmp	r2, r1
 8005192:	d100      	bne.n	8005196 <memmove+0x2a>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800519a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800519e:	e7f7      	b.n	8005190 <memmove+0x24>

080051a0 <_sbrk_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d06      	ldr	r5, [pc, #24]	@ (80051bc <_sbrk_r+0x1c>)
 80051a4:	2300      	movs	r3, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	602b      	str	r3, [r5, #0]
 80051ac:	f7fc ff1e 	bl	8001fec <_sbrk>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_sbrk_r+0x1a>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_sbrk_r+0x1a>
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	20000348 	.word	0x20000348

080051c0 <memcpy>:
 80051c0:	440a      	add	r2, r1
 80051c2:	4291      	cmp	r1, r2
 80051c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051c8:	d100      	bne.n	80051cc <memcpy+0xc>
 80051ca:	4770      	bx	lr
 80051cc:	b510      	push	{r4, lr}
 80051ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051d6:	4291      	cmp	r1, r2
 80051d8:	d1f9      	bne.n	80051ce <memcpy+0xe>
 80051da:	bd10      	pop	{r4, pc}

080051dc <__assert_func>:
 80051dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051de:	4614      	mov	r4, r2
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b09      	ldr	r3, [pc, #36]	@ (8005208 <__assert_func+0x2c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4605      	mov	r5, r0
 80051e8:	68d8      	ldr	r0, [r3, #12]
 80051ea:	b954      	cbnz	r4, 8005202 <__assert_func+0x26>
 80051ec:	4b07      	ldr	r3, [pc, #28]	@ (800520c <__assert_func+0x30>)
 80051ee:	461c      	mov	r4, r3
 80051f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051f4:	9100      	str	r1, [sp, #0]
 80051f6:	462b      	mov	r3, r5
 80051f8:	4905      	ldr	r1, [pc, #20]	@ (8005210 <__assert_func+0x34>)
 80051fa:	f000 f86f 	bl	80052dc <fiprintf>
 80051fe:	f000 f87f 	bl	8005300 <abort>
 8005202:	4b04      	ldr	r3, [pc, #16]	@ (8005214 <__assert_func+0x38>)
 8005204:	e7f4      	b.n	80051f0 <__assert_func+0x14>
 8005206:	bf00      	nop
 8005208:	2000001c 	.word	0x2000001c
 800520c:	080065de 	.word	0x080065de
 8005210:	080065b0 	.word	0x080065b0
 8005214:	080065a3 	.word	0x080065a3

08005218 <_calloc_r>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	fba1 5402 	umull	r5, r4, r1, r2
 800521e:	b93c      	cbnz	r4, 8005230 <_calloc_r+0x18>
 8005220:	4629      	mov	r1, r5
 8005222:	f7ff f991 	bl	8004548 <_malloc_r>
 8005226:	4606      	mov	r6, r0
 8005228:	b928      	cbnz	r0, 8005236 <_calloc_r+0x1e>
 800522a:	2600      	movs	r6, #0
 800522c:	4630      	mov	r0, r6
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	220c      	movs	r2, #12
 8005232:	6002      	str	r2, [r0, #0]
 8005234:	e7f9      	b.n	800522a <_calloc_r+0x12>
 8005236:	462a      	mov	r2, r5
 8005238:	4621      	mov	r1, r4
 800523a:	f7fe fa42 	bl	80036c2 <memset>
 800523e:	e7f5      	b.n	800522c <_calloc_r+0x14>

08005240 <__ascii_mbtowc>:
 8005240:	b082      	sub	sp, #8
 8005242:	b901      	cbnz	r1, 8005246 <__ascii_mbtowc+0x6>
 8005244:	a901      	add	r1, sp, #4
 8005246:	b142      	cbz	r2, 800525a <__ascii_mbtowc+0x1a>
 8005248:	b14b      	cbz	r3, 800525e <__ascii_mbtowc+0x1e>
 800524a:	7813      	ldrb	r3, [r2, #0]
 800524c:	600b      	str	r3, [r1, #0]
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	1e10      	subs	r0, r2, #0
 8005252:	bf18      	it	ne
 8005254:	2001      	movne	r0, #1
 8005256:	b002      	add	sp, #8
 8005258:	4770      	bx	lr
 800525a:	4610      	mov	r0, r2
 800525c:	e7fb      	b.n	8005256 <__ascii_mbtowc+0x16>
 800525e:	f06f 0001 	mvn.w	r0, #1
 8005262:	e7f8      	b.n	8005256 <__ascii_mbtowc+0x16>

08005264 <_realloc_r>:
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	4680      	mov	r8, r0
 800526a:	4615      	mov	r5, r2
 800526c:	460c      	mov	r4, r1
 800526e:	b921      	cbnz	r1, 800527a <_realloc_r+0x16>
 8005270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	4611      	mov	r1, r2
 8005276:	f7ff b967 	b.w	8004548 <_malloc_r>
 800527a:	b92a      	cbnz	r2, 8005288 <_realloc_r+0x24>
 800527c:	f7ff f8f0 	bl	8004460 <_free_r>
 8005280:	2400      	movs	r4, #0
 8005282:	4620      	mov	r0, r4
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	f000 f841 	bl	800530e <_malloc_usable_size_r>
 800528c:	4285      	cmp	r5, r0
 800528e:	4606      	mov	r6, r0
 8005290:	d802      	bhi.n	8005298 <_realloc_r+0x34>
 8005292:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005296:	d8f4      	bhi.n	8005282 <_realloc_r+0x1e>
 8005298:	4629      	mov	r1, r5
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff f954 	bl	8004548 <_malloc_r>
 80052a0:	4607      	mov	r7, r0
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0ec      	beq.n	8005280 <_realloc_r+0x1c>
 80052a6:	42b5      	cmp	r5, r6
 80052a8:	462a      	mov	r2, r5
 80052aa:	4621      	mov	r1, r4
 80052ac:	bf28      	it	cs
 80052ae:	4632      	movcs	r2, r6
 80052b0:	f7ff ff86 	bl	80051c0 <memcpy>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4640      	mov	r0, r8
 80052b8:	f7ff f8d2 	bl	8004460 <_free_r>
 80052bc:	463c      	mov	r4, r7
 80052be:	e7e0      	b.n	8005282 <_realloc_r+0x1e>

080052c0 <__ascii_wctomb>:
 80052c0:	4603      	mov	r3, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	b141      	cbz	r1, 80052d8 <__ascii_wctomb+0x18>
 80052c6:	2aff      	cmp	r2, #255	@ 0xff
 80052c8:	d904      	bls.n	80052d4 <__ascii_wctomb+0x14>
 80052ca:	228a      	movs	r2, #138	@ 0x8a
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	4770      	bx	lr
 80052d4:	700a      	strb	r2, [r1, #0]
 80052d6:	2001      	movs	r0, #1
 80052d8:	4770      	bx	lr
	...

080052dc <fiprintf>:
 80052dc:	b40e      	push	{r1, r2, r3}
 80052de:	b503      	push	{r0, r1, lr}
 80052e0:	4601      	mov	r1, r0
 80052e2:	ab03      	add	r3, sp, #12
 80052e4:	4805      	ldr	r0, [pc, #20]	@ (80052fc <fiprintf+0x20>)
 80052e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	f000 f83f 	bl	8005370 <_vfiprintf_r>
 80052f2:	b002      	add	sp, #8
 80052f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052f8:	b003      	add	sp, #12
 80052fa:	4770      	bx	lr
 80052fc:	2000001c 	.word	0x2000001c

08005300 <abort>:
 8005300:	b508      	push	{r3, lr}
 8005302:	2006      	movs	r0, #6
 8005304:	f000 fa08 	bl	8005718 <raise>
 8005308:	2001      	movs	r0, #1
 800530a:	f7fc fdf6 	bl	8001efa <_exit>

0800530e <_malloc_usable_size_r>:
 800530e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005312:	1f18      	subs	r0, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	bfbc      	itt	lt
 8005318:	580b      	ldrlt	r3, [r1, r0]
 800531a:	18c0      	addlt	r0, r0, r3
 800531c:	4770      	bx	lr

0800531e <__sfputc_r>:
 800531e:	6893      	ldr	r3, [r2, #8]
 8005320:	3b01      	subs	r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	b410      	push	{r4}
 8005326:	6093      	str	r3, [r2, #8]
 8005328:	da08      	bge.n	800533c <__sfputc_r+0x1e>
 800532a:	6994      	ldr	r4, [r2, #24]
 800532c:	42a3      	cmp	r3, r4
 800532e:	db01      	blt.n	8005334 <__sfputc_r+0x16>
 8005330:	290a      	cmp	r1, #10
 8005332:	d103      	bne.n	800533c <__sfputc_r+0x1e>
 8005334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005338:	f000 b932 	b.w	80055a0 <__swbuf_r>
 800533c:	6813      	ldr	r3, [r2, #0]
 800533e:	1c58      	adds	r0, r3, #1
 8005340:	6010      	str	r0, [r2, #0]
 8005342:	7019      	strb	r1, [r3, #0]
 8005344:	4608      	mov	r0, r1
 8005346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534a:	4770      	bx	lr

0800534c <__sfputs_r>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	4606      	mov	r6, r0
 8005350:	460f      	mov	r7, r1
 8005352:	4614      	mov	r4, r2
 8005354:	18d5      	adds	r5, r2, r3
 8005356:	42ac      	cmp	r4, r5
 8005358:	d101      	bne.n	800535e <__sfputs_r+0x12>
 800535a:	2000      	movs	r0, #0
 800535c:	e007      	b.n	800536e <__sfputs_r+0x22>
 800535e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005362:	463a      	mov	r2, r7
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff ffda 	bl	800531e <__sfputc_r>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	d1f3      	bne.n	8005356 <__sfputs_r+0xa>
 800536e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005370 <_vfiprintf_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	460d      	mov	r5, r1
 8005376:	b09d      	sub	sp, #116	@ 0x74
 8005378:	4614      	mov	r4, r2
 800537a:	4698      	mov	r8, r3
 800537c:	4606      	mov	r6, r0
 800537e:	b118      	cbz	r0, 8005388 <_vfiprintf_r+0x18>
 8005380:	6a03      	ldr	r3, [r0, #32]
 8005382:	b90b      	cbnz	r3, 8005388 <_vfiprintf_r+0x18>
 8005384:	f7fe f904 	bl	8003590 <__sinit>
 8005388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	d405      	bmi.n	800539a <_vfiprintf_r+0x2a>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	059a      	lsls	r2, r3, #22
 8005392:	d402      	bmi.n	800539a <_vfiprintf_r+0x2a>
 8005394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005396:	f7fe fa12 	bl	80037be <__retarget_lock_acquire_recursive>
 800539a:	89ab      	ldrh	r3, [r5, #12]
 800539c:	071b      	lsls	r3, r3, #28
 800539e:	d501      	bpl.n	80053a4 <_vfiprintf_r+0x34>
 80053a0:	692b      	ldr	r3, [r5, #16]
 80053a2:	b99b      	cbnz	r3, 80053cc <_vfiprintf_r+0x5c>
 80053a4:	4629      	mov	r1, r5
 80053a6:	4630      	mov	r0, r6
 80053a8:	f000 f938 	bl	800561c <__swsetup_r>
 80053ac:	b170      	cbz	r0, 80053cc <_vfiprintf_r+0x5c>
 80053ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053b0:	07dc      	lsls	r4, r3, #31
 80053b2:	d504      	bpl.n	80053be <_vfiprintf_r+0x4e>
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	b01d      	add	sp, #116	@ 0x74
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	0598      	lsls	r0, r3, #22
 80053c2:	d4f7      	bmi.n	80053b4 <_vfiprintf_r+0x44>
 80053c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053c6:	f7fe f9fb 	bl	80037c0 <__retarget_lock_release_recursive>
 80053ca:	e7f3      	b.n	80053b4 <_vfiprintf_r+0x44>
 80053cc:	2300      	movs	r3, #0
 80053ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80053d0:	2320      	movs	r3, #32
 80053d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053da:	2330      	movs	r3, #48	@ 0x30
 80053dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800558c <_vfiprintf_r+0x21c>
 80053e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053e4:	f04f 0901 	mov.w	r9, #1
 80053e8:	4623      	mov	r3, r4
 80053ea:	469a      	mov	sl, r3
 80053ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f0:	b10a      	cbz	r2, 80053f6 <_vfiprintf_r+0x86>
 80053f2:	2a25      	cmp	r2, #37	@ 0x25
 80053f4:	d1f9      	bne.n	80053ea <_vfiprintf_r+0x7a>
 80053f6:	ebba 0b04 	subs.w	fp, sl, r4
 80053fa:	d00b      	beq.n	8005414 <_vfiprintf_r+0xa4>
 80053fc:	465b      	mov	r3, fp
 80053fe:	4622      	mov	r2, r4
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff ffa2 	bl	800534c <__sfputs_r>
 8005408:	3001      	adds	r0, #1
 800540a:	f000 80a7 	beq.w	800555c <_vfiprintf_r+0x1ec>
 800540e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005410:	445a      	add	r2, fp
 8005412:	9209      	str	r2, [sp, #36]	@ 0x24
 8005414:	f89a 3000 	ldrb.w	r3, [sl]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 809f 	beq.w	800555c <_vfiprintf_r+0x1ec>
 800541e:	2300      	movs	r3, #0
 8005420:	f04f 32ff 	mov.w	r2, #4294967295
 8005424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005428:	f10a 0a01 	add.w	sl, sl, #1
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005434:	931a      	str	r3, [sp, #104]	@ 0x68
 8005436:	4654      	mov	r4, sl
 8005438:	2205      	movs	r2, #5
 800543a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800543e:	4853      	ldr	r0, [pc, #332]	@ (800558c <_vfiprintf_r+0x21c>)
 8005440:	f7fa fece 	bl	80001e0 <memchr>
 8005444:	9a04      	ldr	r2, [sp, #16]
 8005446:	b9d8      	cbnz	r0, 8005480 <_vfiprintf_r+0x110>
 8005448:	06d1      	lsls	r1, r2, #27
 800544a:	bf44      	itt	mi
 800544c:	2320      	movmi	r3, #32
 800544e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005452:	0713      	lsls	r3, r2, #28
 8005454:	bf44      	itt	mi
 8005456:	232b      	movmi	r3, #43	@ 0x2b
 8005458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800545c:	f89a 3000 	ldrb.w	r3, [sl]
 8005460:	2b2a      	cmp	r3, #42	@ 0x2a
 8005462:	d015      	beq.n	8005490 <_vfiprintf_r+0x120>
 8005464:	9a07      	ldr	r2, [sp, #28]
 8005466:	4654      	mov	r4, sl
 8005468:	2000      	movs	r0, #0
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4621      	mov	r1, r4
 8005470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005474:	3b30      	subs	r3, #48	@ 0x30
 8005476:	2b09      	cmp	r3, #9
 8005478:	d94b      	bls.n	8005512 <_vfiprintf_r+0x1a2>
 800547a:	b1b0      	cbz	r0, 80054aa <_vfiprintf_r+0x13a>
 800547c:	9207      	str	r2, [sp, #28]
 800547e:	e014      	b.n	80054aa <_vfiprintf_r+0x13a>
 8005480:	eba0 0308 	sub.w	r3, r0, r8
 8005484:	fa09 f303 	lsl.w	r3, r9, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	46a2      	mov	sl, r4
 800548e:	e7d2      	b.n	8005436 <_vfiprintf_r+0xc6>
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	1d19      	adds	r1, r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfbb      	ittet	lt
 800549c:	425b      	neglt	r3, r3
 800549e:	f042 0202 	orrlt.w	r2, r2, #2
 80054a2:	9307      	strge	r3, [sp, #28]
 80054a4:	9307      	strlt	r3, [sp, #28]
 80054a6:	bfb8      	it	lt
 80054a8:	9204      	strlt	r2, [sp, #16]
 80054aa:	7823      	ldrb	r3, [r4, #0]
 80054ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80054ae:	d10a      	bne.n	80054c6 <_vfiprintf_r+0x156>
 80054b0:	7863      	ldrb	r3, [r4, #1]
 80054b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054b4:	d132      	bne.n	800551c <_vfiprintf_r+0x1ac>
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	1d1a      	adds	r2, r3, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	9203      	str	r2, [sp, #12]
 80054be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054c2:	3402      	adds	r4, #2
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800559c <_vfiprintf_r+0x22c>
 80054ca:	7821      	ldrb	r1, [r4, #0]
 80054cc:	2203      	movs	r2, #3
 80054ce:	4650      	mov	r0, sl
 80054d0:	f7fa fe86 	bl	80001e0 <memchr>
 80054d4:	b138      	cbz	r0, 80054e6 <_vfiprintf_r+0x176>
 80054d6:	9b04      	ldr	r3, [sp, #16]
 80054d8:	eba0 000a 	sub.w	r0, r0, sl
 80054dc:	2240      	movs	r2, #64	@ 0x40
 80054de:	4082      	lsls	r2, r0
 80054e0:	4313      	orrs	r3, r2
 80054e2:	3401      	adds	r4, #1
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ea:	4829      	ldr	r0, [pc, #164]	@ (8005590 <_vfiprintf_r+0x220>)
 80054ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054f0:	2206      	movs	r2, #6
 80054f2:	f7fa fe75 	bl	80001e0 <memchr>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d03f      	beq.n	800557a <_vfiprintf_r+0x20a>
 80054fa:	4b26      	ldr	r3, [pc, #152]	@ (8005594 <_vfiprintf_r+0x224>)
 80054fc:	bb1b      	cbnz	r3, 8005546 <_vfiprintf_r+0x1d6>
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	3307      	adds	r3, #7
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	3308      	adds	r3, #8
 8005508:	9303      	str	r3, [sp, #12]
 800550a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800550c:	443b      	add	r3, r7
 800550e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005510:	e76a      	b.n	80053e8 <_vfiprintf_r+0x78>
 8005512:	fb0c 3202 	mla	r2, ip, r2, r3
 8005516:	460c      	mov	r4, r1
 8005518:	2001      	movs	r0, #1
 800551a:	e7a8      	b.n	800546e <_vfiprintf_r+0xfe>
 800551c:	2300      	movs	r3, #0
 800551e:	3401      	adds	r4, #1
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	4619      	mov	r1, r3
 8005524:	f04f 0c0a 	mov.w	ip, #10
 8005528:	4620      	mov	r0, r4
 800552a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800552e:	3a30      	subs	r2, #48	@ 0x30
 8005530:	2a09      	cmp	r2, #9
 8005532:	d903      	bls.n	800553c <_vfiprintf_r+0x1cc>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0c6      	beq.n	80054c6 <_vfiprintf_r+0x156>
 8005538:	9105      	str	r1, [sp, #20]
 800553a:	e7c4      	b.n	80054c6 <_vfiprintf_r+0x156>
 800553c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005540:	4604      	mov	r4, r0
 8005542:	2301      	movs	r3, #1
 8005544:	e7f0      	b.n	8005528 <_vfiprintf_r+0x1b8>
 8005546:	ab03      	add	r3, sp, #12
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	462a      	mov	r2, r5
 800554c:	4b12      	ldr	r3, [pc, #72]	@ (8005598 <_vfiprintf_r+0x228>)
 800554e:	a904      	add	r1, sp, #16
 8005550:	4630      	mov	r0, r6
 8005552:	f7fd fbd9 	bl	8002d08 <_printf_float>
 8005556:	4607      	mov	r7, r0
 8005558:	1c78      	adds	r0, r7, #1
 800555a:	d1d6      	bne.n	800550a <_vfiprintf_r+0x19a>
 800555c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800555e:	07d9      	lsls	r1, r3, #31
 8005560:	d405      	bmi.n	800556e <_vfiprintf_r+0x1fe>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	059a      	lsls	r2, r3, #22
 8005566:	d402      	bmi.n	800556e <_vfiprintf_r+0x1fe>
 8005568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800556a:	f7fe f929 	bl	80037c0 <__retarget_lock_release_recursive>
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	065b      	lsls	r3, r3, #25
 8005572:	f53f af1f 	bmi.w	80053b4 <_vfiprintf_r+0x44>
 8005576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005578:	e71e      	b.n	80053b8 <_vfiprintf_r+0x48>
 800557a:	ab03      	add	r3, sp, #12
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	462a      	mov	r2, r5
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <_vfiprintf_r+0x228>)
 8005582:	a904      	add	r1, sp, #16
 8005584:	4630      	mov	r0, r6
 8005586:	f7fd fe57 	bl	8003238 <_printf_i>
 800558a:	e7e4      	b.n	8005556 <_vfiprintf_r+0x1e6>
 800558c:	08006588 	.word	0x08006588
 8005590:	08006592 	.word	0x08006592
 8005594:	08002d09 	.word	0x08002d09
 8005598:	0800534d 	.word	0x0800534d
 800559c:	0800658e 	.word	0x0800658e

080055a0 <__swbuf_r>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	460e      	mov	r6, r1
 80055a4:	4614      	mov	r4, r2
 80055a6:	4605      	mov	r5, r0
 80055a8:	b118      	cbz	r0, 80055b2 <__swbuf_r+0x12>
 80055aa:	6a03      	ldr	r3, [r0, #32]
 80055ac:	b90b      	cbnz	r3, 80055b2 <__swbuf_r+0x12>
 80055ae:	f7fd ffef 	bl	8003590 <__sinit>
 80055b2:	69a3      	ldr	r3, [r4, #24]
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	071a      	lsls	r2, r3, #28
 80055ba:	d501      	bpl.n	80055c0 <__swbuf_r+0x20>
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	b943      	cbnz	r3, 80055d2 <__swbuf_r+0x32>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f82a 	bl	800561c <__swsetup_r>
 80055c8:	b118      	cbz	r0, 80055d2 <__swbuf_r+0x32>
 80055ca:	f04f 37ff 	mov.w	r7, #4294967295
 80055ce:	4638      	mov	r0, r7
 80055d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	1a98      	subs	r0, r3, r2
 80055d8:	6963      	ldr	r3, [r4, #20]
 80055da:	b2f6      	uxtb	r6, r6
 80055dc:	4283      	cmp	r3, r0
 80055de:	4637      	mov	r7, r6
 80055e0:	dc05      	bgt.n	80055ee <__swbuf_r+0x4e>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f7ff fd99 	bl	800511c <_fflush_r>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1ed      	bne.n	80055ca <__swbuf_r+0x2a>
 80055ee:	68a3      	ldr	r3, [r4, #8]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	60a3      	str	r3, [r4, #8]
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	701e      	strb	r6, [r3, #0]
 80055fc:	6962      	ldr	r2, [r4, #20]
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	429a      	cmp	r2, r3
 8005602:	d004      	beq.n	800560e <__swbuf_r+0x6e>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	07db      	lsls	r3, r3, #31
 8005608:	d5e1      	bpl.n	80055ce <__swbuf_r+0x2e>
 800560a:	2e0a      	cmp	r6, #10
 800560c:	d1df      	bne.n	80055ce <__swbuf_r+0x2e>
 800560e:	4621      	mov	r1, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f7ff fd83 	bl	800511c <_fflush_r>
 8005616:	2800      	cmp	r0, #0
 8005618:	d0d9      	beq.n	80055ce <__swbuf_r+0x2e>
 800561a:	e7d6      	b.n	80055ca <__swbuf_r+0x2a>

0800561c <__swsetup_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4b29      	ldr	r3, [pc, #164]	@ (80056c4 <__swsetup_r+0xa8>)
 8005620:	4605      	mov	r5, r0
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	460c      	mov	r4, r1
 8005626:	b118      	cbz	r0, 8005630 <__swsetup_r+0x14>
 8005628:	6a03      	ldr	r3, [r0, #32]
 800562a:	b90b      	cbnz	r3, 8005630 <__swsetup_r+0x14>
 800562c:	f7fd ffb0 	bl	8003590 <__sinit>
 8005630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005634:	0719      	lsls	r1, r3, #28
 8005636:	d422      	bmi.n	800567e <__swsetup_r+0x62>
 8005638:	06da      	lsls	r2, r3, #27
 800563a:	d407      	bmi.n	800564c <__swsetup_r+0x30>
 800563c:	2209      	movs	r2, #9
 800563e:	602a      	str	r2, [r5, #0]
 8005640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	f04f 30ff 	mov.w	r0, #4294967295
 800564a:	e033      	b.n	80056b4 <__swsetup_r+0x98>
 800564c:	0758      	lsls	r0, r3, #29
 800564e:	d512      	bpl.n	8005676 <__swsetup_r+0x5a>
 8005650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005652:	b141      	cbz	r1, 8005666 <__swsetup_r+0x4a>
 8005654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <__swsetup_r+0x46>
 800565c:	4628      	mov	r0, r5
 800565e:	f7fe feff 	bl	8004460 <_free_r>
 8005662:	2300      	movs	r3, #0
 8005664:	6363      	str	r3, [r4, #52]	@ 0x34
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	2300      	movs	r3, #0
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	f043 0308 	orr.w	r3, r3, #8
 800567c:	81a3      	strh	r3, [r4, #12]
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	b94b      	cbnz	r3, 8005696 <__swsetup_r+0x7a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568c:	d003      	beq.n	8005696 <__swsetup_r+0x7a>
 800568e:	4621      	mov	r1, r4
 8005690:	4628      	mov	r0, r5
 8005692:	f000 f883 	bl	800579c <__smakebuf_r>
 8005696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800569a:	f013 0201 	ands.w	r2, r3, #1
 800569e:	d00a      	beq.n	80056b6 <__swsetup_r+0x9a>
 80056a0:	2200      	movs	r2, #0
 80056a2:	60a2      	str	r2, [r4, #8]
 80056a4:	6962      	ldr	r2, [r4, #20]
 80056a6:	4252      	negs	r2, r2
 80056a8:	61a2      	str	r2, [r4, #24]
 80056aa:	6922      	ldr	r2, [r4, #16]
 80056ac:	b942      	cbnz	r2, 80056c0 <__swsetup_r+0xa4>
 80056ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056b2:	d1c5      	bne.n	8005640 <__swsetup_r+0x24>
 80056b4:	bd38      	pop	{r3, r4, r5, pc}
 80056b6:	0799      	lsls	r1, r3, #30
 80056b8:	bf58      	it	pl
 80056ba:	6962      	ldrpl	r2, [r4, #20]
 80056bc:	60a2      	str	r2, [r4, #8]
 80056be:	e7f4      	b.n	80056aa <__swsetup_r+0x8e>
 80056c0:	2000      	movs	r0, #0
 80056c2:	e7f7      	b.n	80056b4 <__swsetup_r+0x98>
 80056c4:	2000001c 	.word	0x2000001c

080056c8 <_raise_r>:
 80056c8:	291f      	cmp	r1, #31
 80056ca:	b538      	push	{r3, r4, r5, lr}
 80056cc:	4605      	mov	r5, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	d904      	bls.n	80056dc <_raise_r+0x14>
 80056d2:	2316      	movs	r3, #22
 80056d4:	6003      	str	r3, [r0, #0]
 80056d6:	f04f 30ff 	mov.w	r0, #4294967295
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80056de:	b112      	cbz	r2, 80056e6 <_raise_r+0x1e>
 80056e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056e4:	b94b      	cbnz	r3, 80056fa <_raise_r+0x32>
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f830 	bl	800574c <_getpid_r>
 80056ec:	4622      	mov	r2, r4
 80056ee:	4601      	mov	r1, r0
 80056f0:	4628      	mov	r0, r5
 80056f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056f6:	f000 b817 	b.w	8005728 <_kill_r>
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d00a      	beq.n	8005714 <_raise_r+0x4c>
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	d103      	bne.n	800570a <_raise_r+0x42>
 8005702:	2316      	movs	r3, #22
 8005704:	6003      	str	r3, [r0, #0]
 8005706:	2001      	movs	r0, #1
 8005708:	e7e7      	b.n	80056da <_raise_r+0x12>
 800570a:	2100      	movs	r1, #0
 800570c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005710:	4620      	mov	r0, r4
 8005712:	4798      	blx	r3
 8005714:	2000      	movs	r0, #0
 8005716:	e7e0      	b.n	80056da <_raise_r+0x12>

08005718 <raise>:
 8005718:	4b02      	ldr	r3, [pc, #8]	@ (8005724 <raise+0xc>)
 800571a:	4601      	mov	r1, r0
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	f7ff bfd3 	b.w	80056c8 <_raise_r>
 8005722:	bf00      	nop
 8005724:	2000001c 	.word	0x2000001c

08005728 <_kill_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d07      	ldr	r5, [pc, #28]	@ (8005748 <_kill_r+0x20>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	4611      	mov	r1, r2
 8005734:	602b      	str	r3, [r5, #0]
 8005736:	f7fc fbd0 	bl	8001eda <_kill>
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	d102      	bne.n	8005744 <_kill_r+0x1c>
 800573e:	682b      	ldr	r3, [r5, #0]
 8005740:	b103      	cbz	r3, 8005744 <_kill_r+0x1c>
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	bd38      	pop	{r3, r4, r5, pc}
 8005746:	bf00      	nop
 8005748:	20000348 	.word	0x20000348

0800574c <_getpid_r>:
 800574c:	f7fc bbbd 	b.w	8001eca <_getpid>

08005750 <__swhatbuf_r>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	460c      	mov	r4, r1
 8005754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005758:	2900      	cmp	r1, #0
 800575a:	b096      	sub	sp, #88	@ 0x58
 800575c:	4615      	mov	r5, r2
 800575e:	461e      	mov	r6, r3
 8005760:	da0d      	bge.n	800577e <__swhatbuf_r+0x2e>
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005768:	f04f 0100 	mov.w	r1, #0
 800576c:	bf14      	ite	ne
 800576e:	2340      	movne	r3, #64	@ 0x40
 8005770:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005774:	2000      	movs	r0, #0
 8005776:	6031      	str	r1, [r6, #0]
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	b016      	add	sp, #88	@ 0x58
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	466a      	mov	r2, sp
 8005780:	f000 f848 	bl	8005814 <_fstat_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	dbec      	blt.n	8005762 <__swhatbuf_r+0x12>
 8005788:	9901      	ldr	r1, [sp, #4]
 800578a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800578e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005792:	4259      	negs	r1, r3
 8005794:	4159      	adcs	r1, r3
 8005796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800579a:	e7eb      	b.n	8005774 <__swhatbuf_r+0x24>

0800579c <__smakebuf_r>:
 800579c:	898b      	ldrh	r3, [r1, #12]
 800579e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057a0:	079d      	lsls	r5, r3, #30
 80057a2:	4606      	mov	r6, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	d507      	bpl.n	80057b8 <__smakebuf_r+0x1c>
 80057a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	6123      	str	r3, [r4, #16]
 80057b0:	2301      	movs	r3, #1
 80057b2:	6163      	str	r3, [r4, #20]
 80057b4:	b003      	add	sp, #12
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b8:	ab01      	add	r3, sp, #4
 80057ba:	466a      	mov	r2, sp
 80057bc:	f7ff ffc8 	bl	8005750 <__swhatbuf_r>
 80057c0:	9f00      	ldr	r7, [sp, #0]
 80057c2:	4605      	mov	r5, r0
 80057c4:	4639      	mov	r1, r7
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7fe febe 	bl	8004548 <_malloc_r>
 80057cc:	b948      	cbnz	r0, 80057e2 <__smakebuf_r+0x46>
 80057ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d2:	059a      	lsls	r2, r3, #22
 80057d4:	d4ee      	bmi.n	80057b4 <__smakebuf_r+0x18>
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	f043 0302 	orr.w	r3, r3, #2
 80057de:	81a3      	strh	r3, [r4, #12]
 80057e0:	e7e2      	b.n	80057a8 <__smakebuf_r+0xc>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	6020      	str	r0, [r4, #0]
 80057e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	9b01      	ldr	r3, [sp, #4]
 80057ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80057f2:	b15b      	cbz	r3, 800580c <__smakebuf_r+0x70>
 80057f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f8:	4630      	mov	r0, r6
 80057fa:	f000 f81d 	bl	8005838 <_isatty_r>
 80057fe:	b128      	cbz	r0, 800580c <__smakebuf_r+0x70>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	431d      	orrs	r5, r3
 8005810:	81a5      	strh	r5, [r4, #12]
 8005812:	e7cf      	b.n	80057b4 <__smakebuf_r+0x18>

08005814 <_fstat_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d07      	ldr	r5, [pc, #28]	@ (8005834 <_fstat_r+0x20>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	f7fc fbba 	bl	8001f9a <_fstat>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d102      	bne.n	8005830 <_fstat_r+0x1c>
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	b103      	cbz	r3, 8005830 <_fstat_r+0x1c>
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	bd38      	pop	{r3, r4, r5, pc}
 8005832:	bf00      	nop
 8005834:	20000348 	.word	0x20000348

08005838 <_isatty_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d06      	ldr	r5, [pc, #24]	@ (8005854 <_isatty_r+0x1c>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fc fbb9 	bl	8001fba <_isatty>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_isatty_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_isatty_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20000348 	.word	0x20000348

08005858 <log10f>:
 8005858:	b508      	push	{r3, lr}
 800585a:	ed2d 8b02 	vpush	{d8}
 800585e:	eeb0 8a40 	vmov.f32	s16, s0
 8005862:	f000 f88f 	bl	8005984 <__ieee754_log10f>
 8005866:	eeb4 8a48 	vcmp.f32	s16, s16
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	d60f      	bvs.n	8005890 <log10f+0x38>
 8005870:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	d80a      	bhi.n	8005890 <log10f+0x38>
 800587a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800587e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005882:	d108      	bne.n	8005896 <log10f+0x3e>
 8005884:	f7fd ff70 	bl	8003768 <__errno>
 8005888:	2322      	movs	r3, #34	@ 0x22
 800588a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80058ac <log10f+0x54>
 800588e:	6003      	str	r3, [r0, #0]
 8005890:	ecbd 8b02 	vpop	{d8}
 8005894:	bd08      	pop	{r3, pc}
 8005896:	f7fd ff67 	bl	8003768 <__errno>
 800589a:	ecbd 8b02 	vpop	{d8}
 800589e:	2321      	movs	r3, #33	@ 0x21
 80058a0:	6003      	str	r3, [r0, #0]
 80058a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80058a6:	4802      	ldr	r0, [pc, #8]	@ (80058b0 <log10f+0x58>)
 80058a8:	f000 b866 	b.w	8005978 <nanf>
 80058ac:	ff800000 	.word	0xff800000
 80058b0:	080065de 	.word	0x080065de

080058b4 <powf>:
 80058b4:	b508      	push	{r3, lr}
 80058b6:	ed2d 8b04 	vpush	{d8-d9}
 80058ba:	eeb0 8a60 	vmov.f32	s16, s1
 80058be:	eeb0 9a40 	vmov.f32	s18, s0
 80058c2:	f000 f8b7 	bl	8005a34 <__ieee754_powf>
 80058c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	eef0 8a40 	vmov.f32	s17, s0
 80058d2:	d63e      	bvs.n	8005952 <powf+0x9e>
 80058d4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80058d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058dc:	d112      	bne.n	8005904 <powf+0x50>
 80058de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80058e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e6:	d039      	beq.n	800595c <powf+0xa8>
 80058e8:	eeb0 0a48 	vmov.f32	s0, s16
 80058ec:	f000 f839 	bl	8005962 <finitef>
 80058f0:	b378      	cbz	r0, 8005952 <powf+0x9e>
 80058f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80058f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fa:	d52a      	bpl.n	8005952 <powf+0x9e>
 80058fc:	f7fd ff34 	bl	8003768 <__errno>
 8005900:	2322      	movs	r3, #34	@ 0x22
 8005902:	e014      	b.n	800592e <powf+0x7a>
 8005904:	f000 f82d 	bl	8005962 <finitef>
 8005908:	b998      	cbnz	r0, 8005932 <powf+0x7e>
 800590a:	eeb0 0a49 	vmov.f32	s0, s18
 800590e:	f000 f828 	bl	8005962 <finitef>
 8005912:	b170      	cbz	r0, 8005932 <powf+0x7e>
 8005914:	eeb0 0a48 	vmov.f32	s0, s16
 8005918:	f000 f823 	bl	8005962 <finitef>
 800591c:	b148      	cbz	r0, 8005932 <powf+0x7e>
 800591e:	eef4 8a68 	vcmp.f32	s17, s17
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	d7e9      	bvc.n	80058fc <powf+0x48>
 8005928:	f7fd ff1e 	bl	8003768 <__errno>
 800592c:	2321      	movs	r3, #33	@ 0x21
 800592e:	6003      	str	r3, [r0, #0]
 8005930:	e00f      	b.n	8005952 <powf+0x9e>
 8005932:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593a:	d10a      	bne.n	8005952 <powf+0x9e>
 800593c:	eeb0 0a49 	vmov.f32	s0, s18
 8005940:	f000 f80f 	bl	8005962 <finitef>
 8005944:	b128      	cbz	r0, 8005952 <powf+0x9e>
 8005946:	eeb0 0a48 	vmov.f32	s0, s16
 800594a:	f000 f80a 	bl	8005962 <finitef>
 800594e:	2800      	cmp	r0, #0
 8005950:	d1d4      	bne.n	80058fc <powf+0x48>
 8005952:	eeb0 0a68 	vmov.f32	s0, s17
 8005956:	ecbd 8b04 	vpop	{d8-d9}
 800595a:	bd08      	pop	{r3, pc}
 800595c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005960:	e7f7      	b.n	8005952 <powf+0x9e>

08005962 <finitef>:
 8005962:	ee10 3a10 	vmov	r3, s0
 8005966:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800596a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800596e:	bfac      	ite	ge
 8005970:	2000      	movge	r0, #0
 8005972:	2001      	movlt	r0, #1
 8005974:	4770      	bx	lr
	...

08005978 <nanf>:
 8005978:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005980 <nanf+0x8>
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	7fc00000 	.word	0x7fc00000

08005984 <__ieee754_log10f>:
 8005984:	b508      	push	{r3, lr}
 8005986:	ee10 3a10 	vmov	r3, s0
 800598a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800598e:	ed2d 8b02 	vpush	{d8}
 8005992:	d108      	bne.n	80059a6 <__ieee754_log10f+0x22>
 8005994:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005a1c <__ieee754_log10f+0x98>
 8005998:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005a20 <__ieee754_log10f+0x9c>
 800599c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80059a0:	ecbd 8b02 	vpop	{d8}
 80059a4:	bd08      	pop	{r3, pc}
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	461a      	mov	r2, r3
 80059aa:	da02      	bge.n	80059b2 <__ieee754_log10f+0x2e>
 80059ac:	ee30 7a40 	vsub.f32	s14, s0, s0
 80059b0:	e7f2      	b.n	8005998 <__ieee754_log10f+0x14>
 80059b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80059b6:	db02      	blt.n	80059be <__ieee754_log10f+0x3a>
 80059b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80059bc:	e7f0      	b.n	80059a0 <__ieee754_log10f+0x1c>
 80059be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059c2:	bfbf      	itttt	lt
 80059c4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8005a24 <__ieee754_log10f+0xa0>
 80059c8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80059cc:	f06f 0118 	mvnlt.w	r1, #24
 80059d0:	ee17 2a90 	vmovlt	r2, s15
 80059d4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80059d8:	bfa8      	it	ge
 80059da:	2100      	movge	r1, #0
 80059dc:	3b7f      	subs	r3, #127	@ 0x7f
 80059de:	440b      	add	r3, r1
 80059e0:	0fd9      	lsrs	r1, r3, #31
 80059e2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80059ee:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 80059f2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80059f6:	ee00 3a10 	vmov	s0, r3
 80059fa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80059fe:	f000 fb81 	bl	8006104 <__ieee754_logf>
 8005a02:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005a28 <__ieee754_log10f+0xa4>
 8005a06:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005a0a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005a2c <__ieee754_log10f+0xa8>
 8005a0e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005a12:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8005a30 <__ieee754_log10f+0xac>
 8005a16:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005a1a:	e7c1      	b.n	80059a0 <__ieee754_log10f+0x1c>
 8005a1c:	cc000000 	.word	0xcc000000
 8005a20:	00000000 	.word	0x00000000
 8005a24:	4c000000 	.word	0x4c000000
 8005a28:	3ede5bd9 	.word	0x3ede5bd9
 8005a2c:	355427db 	.word	0x355427db
 8005a30:	3e9a2080 	.word	0x3e9a2080

08005a34 <__ieee754_powf>:
 8005a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a38:	ee10 4a90 	vmov	r4, s1
 8005a3c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005a40:	ed2d 8b02 	vpush	{d8}
 8005a44:	ee10 6a10 	vmov	r6, s0
 8005a48:	eeb0 8a40 	vmov.f32	s16, s0
 8005a4c:	eef0 8a60 	vmov.f32	s17, s1
 8005a50:	d10c      	bne.n	8005a6c <__ieee754_powf+0x38>
 8005a52:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8005a56:	0076      	lsls	r6, r6, #1
 8005a58:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005a5c:	f240 829c 	bls.w	8005f98 <__ieee754_powf+0x564>
 8005a60:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005a64:	ecbd 8b02 	vpop	{d8}
 8005a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8005a70:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005a74:	d802      	bhi.n	8005a7c <__ieee754_powf+0x48>
 8005a76:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005a7a:	d908      	bls.n	8005a8e <__ieee754_powf+0x5a>
 8005a7c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005a80:	d1ee      	bne.n	8005a60 <__ieee754_powf+0x2c>
 8005a82:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8005a86:	0064      	lsls	r4, r4, #1
 8005a88:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005a8c:	e7e6      	b.n	8005a5c <__ieee754_powf+0x28>
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	da1e      	bge.n	8005ad0 <__ieee754_powf+0x9c>
 8005a92:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8005a96:	d22b      	bcs.n	8005af0 <__ieee754_powf+0xbc>
 8005a98:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005a9c:	d332      	bcc.n	8005b04 <__ieee754_powf+0xd0>
 8005a9e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8005aa2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005aa6:	fa49 f503 	asr.w	r5, r9, r3
 8005aaa:	fa05 f303 	lsl.w	r3, r5, r3
 8005aae:	454b      	cmp	r3, r9
 8005ab0:	d126      	bne.n	8005b00 <__ieee754_powf+0xcc>
 8005ab2:	f005 0501 	and.w	r5, r5, #1
 8005ab6:	f1c5 0502 	rsb	r5, r5, #2
 8005aba:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005abe:	d122      	bne.n	8005b06 <__ieee754_powf+0xd2>
 8005ac0:	2c00      	cmp	r4, #0
 8005ac2:	f280 826f 	bge.w	8005fa4 <__ieee754_powf+0x570>
 8005ac6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005aca:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005ace:	e7c9      	b.n	8005a64 <__ieee754_powf+0x30>
 8005ad0:	2500      	movs	r5, #0
 8005ad2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005ad6:	d1f0      	bne.n	8005aba <__ieee754_powf+0x86>
 8005ad8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8005adc:	f000 825c 	beq.w	8005f98 <__ieee754_powf+0x564>
 8005ae0:	d908      	bls.n	8005af4 <__ieee754_powf+0xc0>
 8005ae2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8005e44 <__ieee754_powf+0x410>
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	bfa8      	it	ge
 8005aea:	eeb0 0a68 	vmovge.f32	s0, s17
 8005aee:	e7b9      	b.n	8005a64 <__ieee754_powf+0x30>
 8005af0:	2502      	movs	r5, #2
 8005af2:	e7ee      	b.n	8005ad2 <__ieee754_powf+0x9e>
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	f280 8252 	bge.w	8005f9e <__ieee754_powf+0x56a>
 8005afa:	eeb1 0a68 	vneg.f32	s0, s17
 8005afe:	e7b1      	b.n	8005a64 <__ieee754_powf+0x30>
 8005b00:	2500      	movs	r5, #0
 8005b02:	e7da      	b.n	8005aba <__ieee754_powf+0x86>
 8005b04:	2500      	movs	r5, #0
 8005b06:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8005b0a:	d102      	bne.n	8005b12 <__ieee754_powf+0xde>
 8005b0c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005b10:	e7a8      	b.n	8005a64 <__ieee754_powf+0x30>
 8005b12:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005b16:	d109      	bne.n	8005b2c <__ieee754_powf+0xf8>
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	db07      	blt.n	8005b2c <__ieee754_powf+0xf8>
 8005b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b20:	ecbd 8b02 	vpop	{d8}
 8005b24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	f000 bae8 	b.w	80060fc <__ieee754_sqrtf>
 8005b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b30:	f000 fa50 	bl	8005fd4 <fabsf>
 8005b34:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005b38:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005b3c:	4647      	mov	r7, r8
 8005b3e:	d002      	beq.n	8005b46 <__ieee754_powf+0x112>
 8005b40:	f1b8 0f00 	cmp.w	r8, #0
 8005b44:	d117      	bne.n	8005b76 <__ieee754_powf+0x142>
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	bfbc      	itt	lt
 8005b4a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8005b4e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	da86      	bge.n	8005a64 <__ieee754_powf+0x30>
 8005b56:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005b5a:	ea58 0805 	orrs.w	r8, r8, r5
 8005b5e:	d104      	bne.n	8005b6a <__ieee754_powf+0x136>
 8005b60:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005b64:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005b68:	e77c      	b.n	8005a64 <__ieee754_powf+0x30>
 8005b6a:	2d01      	cmp	r5, #1
 8005b6c:	f47f af7a 	bne.w	8005a64 <__ieee754_powf+0x30>
 8005b70:	eeb1 0a40 	vneg.f32	s0, s0
 8005b74:	e776      	b.n	8005a64 <__ieee754_powf+0x30>
 8005b76:	0ff0      	lsrs	r0, r6, #31
 8005b78:	3801      	subs	r0, #1
 8005b7a:	ea55 0300 	orrs.w	r3, r5, r0
 8005b7e:	d104      	bne.n	8005b8a <__ieee754_powf+0x156>
 8005b80:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005b84:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005b88:	e76c      	b.n	8005a64 <__ieee754_powf+0x30>
 8005b8a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8005b8e:	d973      	bls.n	8005c78 <__ieee754_powf+0x244>
 8005b90:	4bad      	ldr	r3, [pc, #692]	@ (8005e48 <__ieee754_powf+0x414>)
 8005b92:	4598      	cmp	r8, r3
 8005b94:	d808      	bhi.n	8005ba8 <__ieee754_powf+0x174>
 8005b96:	2c00      	cmp	r4, #0
 8005b98:	da0b      	bge.n	8005bb2 <__ieee754_powf+0x17e>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	ecbd 8b02 	vpop	{d8}
 8005ba0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	f000 baa4 	b.w	80060f0 <__math_oflowf>
 8005ba8:	4ba8      	ldr	r3, [pc, #672]	@ (8005e4c <__ieee754_powf+0x418>)
 8005baa:	4598      	cmp	r8, r3
 8005bac:	d908      	bls.n	8005bc0 <__ieee754_powf+0x18c>
 8005bae:	2c00      	cmp	r4, #0
 8005bb0:	dcf3      	bgt.n	8005b9a <__ieee754_powf+0x166>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	ecbd 8b02 	vpop	{d8}
 8005bb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bbc:	f000 ba92 	b.w	80060e4 <__math_uflowf>
 8005bc0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005bc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005bc8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8005e50 <__ieee754_powf+0x41c>
 8005bcc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005bd0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005bd4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005bd8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005bdc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005be4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8005e54 <__ieee754_powf+0x420>
 8005be8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005bec:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8005e58 <__ieee754_powf+0x424>
 8005bf0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005bf4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8005e5c <__ieee754_powf+0x428>
 8005bf8:	eef0 6a67 	vmov.f32	s13, s15
 8005bfc:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005c00:	ee16 3a90 	vmov	r3, s13
 8005c04:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005c08:	f023 030f 	bic.w	r3, r3, #15
 8005c0c:	ee06 3a90 	vmov	s13, r3
 8005c10:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005c14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c18:	3d01      	subs	r5, #1
 8005c1a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8005c1e:	4305      	orrs	r5, r0
 8005c20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c24:	f024 040f 	bic.w	r4, r4, #15
 8005c28:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005c2c:	bf18      	it	ne
 8005c2e:	eeb0 8a47 	vmovne.f32	s16, s14
 8005c32:	ee07 4a10 	vmov	s14, r4
 8005c36:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005c3a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005c46:	ee07 4a10 	vmov	s14, r4
 8005c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c4e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005c52:	ee17 1a10 	vmov	r1, s14
 8005c56:	2900      	cmp	r1, #0
 8005c58:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005c5c:	f340 80dd 	ble.w	8005e1a <__ieee754_powf+0x3e6>
 8005c60:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8005c64:	f240 80ca 	bls.w	8005dfc <__ieee754_powf+0x3c8>
 8005c68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	bf4c      	ite	mi
 8005c72:	2001      	movmi	r0, #1
 8005c74:	2000      	movpl	r0, #0
 8005c76:	e791      	b.n	8005b9c <__ieee754_powf+0x168>
 8005c78:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8005c7c:	bf01      	itttt	eq
 8005c7e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8005e60 <__ieee754_powf+0x42c>
 8005c82:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8005c86:	f06f 0317 	mvneq.w	r3, #23
 8005c8a:	ee17 7a90 	vmoveq	r7, s15
 8005c8e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8005c92:	bf18      	it	ne
 8005c94:	2300      	movne	r3, #0
 8005c96:	3a7f      	subs	r2, #127	@ 0x7f
 8005c98:	441a      	add	r2, r3
 8005c9a:	4b72      	ldr	r3, [pc, #456]	@ (8005e64 <__ieee754_powf+0x430>)
 8005c9c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8005ca0:	429f      	cmp	r7, r3
 8005ca2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8005ca6:	dd06      	ble.n	8005cb6 <__ieee754_powf+0x282>
 8005ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8005e68 <__ieee754_powf+0x434>)
 8005caa:	429f      	cmp	r7, r3
 8005cac:	f340 80a4 	ble.w	8005df8 <__ieee754_powf+0x3c4>
 8005cb0:	3201      	adds	r2, #1
 8005cb2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e6c <__ieee754_powf+0x438>)
 8005cba:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005cbe:	ee07 1a10 	vmov	s14, r1
 8005cc2:	edd3 5a00 	vldr	s11, [r3]
 8005cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e70 <__ieee754_powf+0x43c>)
 8005cc8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8005ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cd0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8005cd4:	1049      	asrs	r1, r1, #1
 8005cd6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8005cda:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8005cde:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8005ce2:	ee37 6a65 	vsub.f32	s12, s14, s11
 8005ce6:	ee07 1a90 	vmov	s15, r1
 8005cea:	ee26 5a24 	vmul.f32	s10, s12, s9
 8005cee:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8005cf2:	ee15 7a10 	vmov	r7, s10
 8005cf6:	401f      	ands	r7, r3
 8005cf8:	ee06 7a90 	vmov	s13, r7
 8005cfc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8005d00:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005d04:	ee65 7a05 	vmul.f32	s15, s10, s10
 8005d08:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005d0c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005e74 <__ieee754_powf+0x440>
 8005d10:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005e78 <__ieee754_powf+0x444>
 8005d14:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005d18:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005e7c <__ieee754_powf+0x448>
 8005d1c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005d20:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8005e50 <__ieee754_powf+0x41c>
 8005d24:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005d28:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005e80 <__ieee754_powf+0x44c>
 8005d2c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005d30:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8005e84 <__ieee754_powf+0x450>
 8005d34:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005d38:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005d3c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8005d40:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8005d44:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005d48:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8005d4c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8005d50:	eef0 5a67 	vmov.f32	s11, s15
 8005d54:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8005d58:	ee75 5a87 	vadd.f32	s11, s11, s14
 8005d5c:	ee15 1a90 	vmov	r1, s11
 8005d60:	4019      	ands	r1, r3
 8005d62:	ee05 1a90 	vmov	s11, r1
 8005d66:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8005d6a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8005d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d72:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005d76:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005d7a:	eeb0 6a67 	vmov.f32	s12, s15
 8005d7e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8005d82:	ee16 1a10 	vmov	r1, s12
 8005d86:	4019      	ands	r1, r3
 8005d88:	ee06 1a10 	vmov	s12, r1
 8005d8c:	eeb0 7a46 	vmov.f32	s14, s12
 8005d90:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8005d94:	493c      	ldr	r1, [pc, #240]	@ (8005e88 <__ieee754_powf+0x454>)
 8005d96:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8005d9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d9e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005e8c <__ieee754_powf+0x458>
 8005da2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8005e90 <__ieee754_powf+0x45c>
 8005da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005daa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005e94 <__ieee754_powf+0x460>
 8005dae:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005db2:	ed91 7a00 	vldr	s14, [r1]
 8005db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dba:	ee07 2a10 	vmov	s14, r2
 8005dbe:	eef0 6a67 	vmov.f32	s13, s15
 8005dc2:	4a35      	ldr	r2, [pc, #212]	@ (8005e98 <__ieee754_powf+0x464>)
 8005dc4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005dc8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8005dcc:	ed92 5a00 	vldr	s10, [r2]
 8005dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dd4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005dd8:	ee76 6a87 	vadd.f32	s13, s13, s14
 8005ddc:	ee16 2a90 	vmov	r2, s13
 8005de0:	4013      	ands	r3, r2
 8005de2:	ee06 3a90 	vmov	s13, r3
 8005de6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005dea:	ee37 7a45 	vsub.f32	s14, s14, s10
 8005dee:	eea6 7a65 	vfms.f32	s14, s12, s11
 8005df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005df6:	e70f      	b.n	8005c18 <__ieee754_powf+0x1e4>
 8005df8:	2601      	movs	r6, #1
 8005dfa:	e75d      	b.n	8005cb8 <__ieee754_powf+0x284>
 8005dfc:	d152      	bne.n	8005ea4 <__ieee754_powf+0x470>
 8005dfe:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005e9c <__ieee754_powf+0x468>
 8005e02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e06:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005e0a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	f73f af29 	bgt.w	8005c68 <__ieee754_powf+0x234>
 8005e16:	2386      	movs	r3, #134	@ 0x86
 8005e18:	e048      	b.n	8005eac <__ieee754_powf+0x478>
 8005e1a:	4a21      	ldr	r2, [pc, #132]	@ (8005ea0 <__ieee754_powf+0x46c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d907      	bls.n	8005e30 <__ieee754_powf+0x3fc>
 8005e20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	bf4c      	ite	mi
 8005e2a:	2001      	movmi	r0, #1
 8005e2c:	2000      	movpl	r0, #0
 8005e2e:	e6c1      	b.n	8005bb4 <__ieee754_powf+0x180>
 8005e30:	d138      	bne.n	8005ea4 <__ieee754_powf+0x470>
 8005e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e36:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	dbea      	blt.n	8005e16 <__ieee754_powf+0x3e2>
 8005e40:	e7ee      	b.n	8005e20 <__ieee754_powf+0x3ec>
 8005e42:	bf00      	nop
 8005e44:	00000000 	.word	0x00000000
 8005e48:	3f7ffff3 	.word	0x3f7ffff3
 8005e4c:	3f800007 	.word	0x3f800007
 8005e50:	3eaaaaab 	.word	0x3eaaaaab
 8005e54:	3fb8aa3b 	.word	0x3fb8aa3b
 8005e58:	36eca570 	.word	0x36eca570
 8005e5c:	3fb8aa00 	.word	0x3fb8aa00
 8005e60:	4b800000 	.word	0x4b800000
 8005e64:	001cc471 	.word	0x001cc471
 8005e68:	005db3d6 	.word	0x005db3d6
 8005e6c:	080066f0 	.word	0x080066f0
 8005e70:	fffff000 	.word	0xfffff000
 8005e74:	3e6c3255 	.word	0x3e6c3255
 8005e78:	3e53f142 	.word	0x3e53f142
 8005e7c:	3e8ba305 	.word	0x3e8ba305
 8005e80:	3edb6db7 	.word	0x3edb6db7
 8005e84:	3f19999a 	.word	0x3f19999a
 8005e88:	080066e0 	.word	0x080066e0
 8005e8c:	3f76384f 	.word	0x3f76384f
 8005e90:	3f763800 	.word	0x3f763800
 8005e94:	369dc3a0 	.word	0x369dc3a0
 8005e98:	080066e8 	.word	0x080066e8
 8005e9c:	3338aa3c 	.word	0x3338aa3c
 8005ea0:	43160000 	.word	0x43160000
 8005ea4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005ea8:	d971      	bls.n	8005f8e <__ieee754_powf+0x55a>
 8005eaa:	15db      	asrs	r3, r3, #23
 8005eac:	3b7e      	subs	r3, #126	@ 0x7e
 8005eae:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005eb2:	4118      	asrs	r0, r3
 8005eb4:	4408      	add	r0, r1
 8005eb6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005eba:	4a3c      	ldr	r2, [pc, #240]	@ (8005fac <__ieee754_powf+0x578>)
 8005ebc:	3b7f      	subs	r3, #127	@ 0x7f
 8005ebe:	411a      	asrs	r2, r3
 8005ec0:	4002      	ands	r2, r0
 8005ec2:	ee07 2a10 	vmov	s14, r2
 8005ec6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8005eca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005ece:	f1c3 0317 	rsb	r3, r3, #23
 8005ed2:	4118      	asrs	r0, r3
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eda:	bfb8      	it	lt
 8005edc:	4240      	neglt	r0, r0
 8005ede:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005ee2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8005fb0 <__ieee754_powf+0x57c>
 8005ee6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8005fb4 <__ieee754_powf+0x580>
 8005eea:	ee17 3a10 	vmov	r3, s14
 8005eee:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005ef2:	f023 030f 	bic.w	r3, r3, #15
 8005ef6:	ee07 3a10 	vmov	s14, r3
 8005efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f02:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005f06:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8005fb8 <__ieee754_powf+0x584>
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8005f12:	eef0 6a67 	vmov.f32	s13, s15
 8005f16:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005f1a:	eef0 5a66 	vmov.f32	s11, s13
 8005f1e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8005f22:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005f26:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005f2a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8005fbc <__ieee754_powf+0x588>
 8005f2e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8005fc0 <__ieee754_powf+0x58c>
 8005f32:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005f36:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005fc4 <__ieee754_powf+0x590>
 8005f3a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005f3e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8005fc8 <__ieee754_powf+0x594>
 8005f42:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005f46:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8005fcc <__ieee754_powf+0x598>
 8005f4a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005f4e:	eeb0 6a66 	vmov.f32	s12, s13
 8005f52:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8005f56:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005f5a:	ee66 5a86 	vmul.f32	s11, s13, s12
 8005f5e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005f62:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8005f66:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8005f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005f76:	ee10 3a10 	vmov	r3, s0
 8005f7a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005f7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f82:	da06      	bge.n	8005f92 <__ieee754_powf+0x55e>
 8005f84:	f000 f82e 	bl	8005fe4 <scalbnf>
 8005f88:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005f8c:	e56a      	b.n	8005a64 <__ieee754_powf+0x30>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7a5      	b.n	8005ede <__ieee754_powf+0x4aa>
 8005f92:	ee00 3a10 	vmov	s0, r3
 8005f96:	e7f7      	b.n	8005f88 <__ieee754_powf+0x554>
 8005f98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f9c:	e562      	b.n	8005a64 <__ieee754_powf+0x30>
 8005f9e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005fd0 <__ieee754_powf+0x59c>
 8005fa2:	e55f      	b.n	8005a64 <__ieee754_powf+0x30>
 8005fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fa8:	e55c      	b.n	8005a64 <__ieee754_powf+0x30>
 8005faa:	bf00      	nop
 8005fac:	ff800000 	.word	0xff800000
 8005fb0:	3f317218 	.word	0x3f317218
 8005fb4:	3f317200 	.word	0x3f317200
 8005fb8:	35bfbe8c 	.word	0x35bfbe8c
 8005fbc:	b5ddea0e 	.word	0xb5ddea0e
 8005fc0:	3331bb4c 	.word	0x3331bb4c
 8005fc4:	388ab355 	.word	0x388ab355
 8005fc8:	bb360b61 	.word	0xbb360b61
 8005fcc:	3e2aaaab 	.word	0x3e2aaaab
 8005fd0:	00000000 	.word	0x00000000

08005fd4 <fabsf>:
 8005fd4:	ee10 3a10 	vmov	r3, s0
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fdc:	ee00 3a10 	vmov	s0, r3
 8005fe0:	4770      	bx	lr
	...

08005fe4 <scalbnf>:
 8005fe4:	ee10 3a10 	vmov	r3, s0
 8005fe8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005fec:	d02b      	beq.n	8006046 <scalbnf+0x62>
 8005fee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005ff2:	d302      	bcc.n	8005ffa <scalbnf+0x16>
 8005ff4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005ff8:	4770      	bx	lr
 8005ffa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005ffe:	d123      	bne.n	8006048 <scalbnf+0x64>
 8006000:	4b24      	ldr	r3, [pc, #144]	@ (8006094 <scalbnf+0xb0>)
 8006002:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006098 <scalbnf+0xb4>
 8006006:	4298      	cmp	r0, r3
 8006008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800600c:	db17      	blt.n	800603e <scalbnf+0x5a>
 800600e:	ee10 3a10 	vmov	r3, s0
 8006012:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006016:	3a19      	subs	r2, #25
 8006018:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800601c:	4288      	cmp	r0, r1
 800601e:	dd15      	ble.n	800604c <scalbnf+0x68>
 8006020:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800609c <scalbnf+0xb8>
 8006024:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80060a0 <scalbnf+0xbc>
 8006028:	ee10 3a10 	vmov	r3, s0
 800602c:	eeb0 7a67 	vmov.f32	s14, s15
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfb8      	it	lt
 8006034:	eef0 7a66 	vmovlt.f32	s15, s13
 8006038:	ee27 0a87 	vmul.f32	s0, s15, s14
 800603c:	4770      	bx	lr
 800603e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80060a4 <scalbnf+0xc0>
 8006042:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006046:	4770      	bx	lr
 8006048:	0dd2      	lsrs	r2, r2, #23
 800604a:	e7e5      	b.n	8006018 <scalbnf+0x34>
 800604c:	4410      	add	r0, r2
 800604e:	28fe      	cmp	r0, #254	@ 0xfe
 8006050:	dce6      	bgt.n	8006020 <scalbnf+0x3c>
 8006052:	2800      	cmp	r0, #0
 8006054:	dd06      	ble.n	8006064 <scalbnf+0x80>
 8006056:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800605a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800605e:	ee00 3a10 	vmov	s0, r3
 8006062:	4770      	bx	lr
 8006064:	f110 0f16 	cmn.w	r0, #22
 8006068:	da09      	bge.n	800607e <scalbnf+0x9a>
 800606a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80060a4 <scalbnf+0xc0>
 800606e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80060a8 <scalbnf+0xc4>
 8006072:	ee10 3a10 	vmov	r3, s0
 8006076:	eeb0 7a67 	vmov.f32	s14, s15
 800607a:	2b00      	cmp	r3, #0
 800607c:	e7d9      	b.n	8006032 <scalbnf+0x4e>
 800607e:	3019      	adds	r0, #25
 8006080:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006084:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006088:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80060ac <scalbnf+0xc8>
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	e7d7      	b.n	8006042 <scalbnf+0x5e>
 8006092:	bf00      	nop
 8006094:	ffff3cb0 	.word	0xffff3cb0
 8006098:	4c000000 	.word	0x4c000000
 800609c:	7149f2ca 	.word	0x7149f2ca
 80060a0:	f149f2ca 	.word	0xf149f2ca
 80060a4:	0da24260 	.word	0x0da24260
 80060a8:	8da24260 	.word	0x8da24260
 80060ac:	33000000 	.word	0x33000000

080060b0 <with_errnof>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	ed2d 8b02 	vpush	{d8}
 80060b6:	eeb0 8a40 	vmov.f32	s16, s0
 80060ba:	4604      	mov	r4, r0
 80060bc:	f7fd fb54 	bl	8003768 <__errno>
 80060c0:	eeb0 0a48 	vmov.f32	s0, s16
 80060c4:	ecbd 8b02 	vpop	{d8}
 80060c8:	6004      	str	r4, [r0, #0]
 80060ca:	bd10      	pop	{r4, pc}

080060cc <xflowf>:
 80060cc:	b130      	cbz	r0, 80060dc <xflowf+0x10>
 80060ce:	eef1 7a40 	vneg.f32	s15, s0
 80060d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80060d6:	2022      	movs	r0, #34	@ 0x22
 80060d8:	f7ff bfea 	b.w	80060b0 <with_errnof>
 80060dc:	eef0 7a40 	vmov.f32	s15, s0
 80060e0:	e7f7      	b.n	80060d2 <xflowf+0x6>
	...

080060e4 <__math_uflowf>:
 80060e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80060ec <__math_uflowf+0x8>
 80060e8:	f7ff bff0 	b.w	80060cc <xflowf>
 80060ec:	10000000 	.word	0x10000000

080060f0 <__math_oflowf>:
 80060f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80060f8 <__math_oflowf+0x8>
 80060f4:	f7ff bfea 	b.w	80060cc <xflowf>
 80060f8:	70000000 	.word	0x70000000

080060fc <__ieee754_sqrtf>:
 80060fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006100:	4770      	bx	lr
	...

08006104 <__ieee754_logf>:
 8006104:	ee10 3a10 	vmov	r3, s0
 8006108:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800610c:	d106      	bne.n	800611c <__ieee754_logf+0x18>
 800610e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80062a8 <__ieee754_logf+0x1a4>
 8006112:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80062ac <__ieee754_logf+0x1a8>
 8006116:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800611a:	4770      	bx	lr
 800611c:	2b00      	cmp	r3, #0
 800611e:	461a      	mov	r2, r3
 8006120:	da02      	bge.n	8006128 <__ieee754_logf+0x24>
 8006122:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006126:	e7f4      	b.n	8006112 <__ieee754_logf+0xe>
 8006128:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800612c:	db02      	blt.n	8006134 <__ieee754_logf+0x30>
 800612e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006132:	4770      	bx	lr
 8006134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006138:	bfb8      	it	lt
 800613a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80062b0 <__ieee754_logf+0x1ac>
 800613e:	485d      	ldr	r0, [pc, #372]	@ (80062b4 <__ieee754_logf+0x1b0>)
 8006140:	bfbe      	ittt	lt
 8006142:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006146:	f06f 0118 	mvnlt.w	r1, #24
 800614a:	ee17 2a90 	vmovlt	r2, s15
 800614e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006152:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006156:	4410      	add	r0, r2
 8006158:	bfa8      	it	ge
 800615a:	2100      	movge	r1, #0
 800615c:	3b7f      	subs	r3, #127	@ 0x7f
 800615e:	440b      	add	r3, r1
 8006160:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8006164:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8006168:	4311      	orrs	r1, r2
 800616a:	ee00 1a10 	vmov	s0, r1
 800616e:	4952      	ldr	r1, [pc, #328]	@ (80062b8 <__ieee754_logf+0x1b4>)
 8006170:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8006174:	f102 000f 	add.w	r0, r2, #15
 8006178:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800617c:	4001      	ands	r1, r0
 800617e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006182:	bb89      	cbnz	r1, 80061e8 <__ieee754_logf+0xe4>
 8006184:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618c:	d10f      	bne.n	80061ae <__ieee754_logf+0xaa>
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8087 	beq.w	80062a2 <__ieee754_logf+0x19e>
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80062bc <__ieee754_logf+0x1b8>
 800619c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80062c0 <__ieee754_logf+0x1bc>
 80061a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80061a8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80061ac:	4770      	bx	lr
 80061ae:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80062c4 <__ieee754_logf+0x1c0>
 80061b2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80061b6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80061ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80061be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061c2:	b913      	cbnz	r3, 80061ca <__ieee754_logf+0xc6>
 80061c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061c8:	4770      	bx	lr
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80062bc <__ieee754_logf+0x1b8>
 80061d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80061da:	ee37 0a40 	vsub.f32	s0, s14, s0
 80061de:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80062c0 <__ieee754_logf+0x1bc>
 80061e2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80061e6:	4770      	bx	lr
 80061e8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80061ec:	ee70 7a27 	vadd.f32	s15, s0, s15
 80061f0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80062c8 <__ieee754_logf+0x1c4>
 80061f4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80062cc <__ieee754_logf+0x1c8>
 80061f8:	4935      	ldr	r1, [pc, #212]	@ (80062d0 <__ieee754_logf+0x1cc>)
 80061fa:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80061fe:	4411      	add	r1, r2
 8006200:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8006204:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8006208:	430a      	orrs	r2, r1
 800620a:	2a00      	cmp	r2, #0
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	ee26 5a06 	vmul.f32	s10, s12, s12
 8006214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006218:	ee25 7a05 	vmul.f32	s14, s10, s10
 800621c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80062d4 <__ieee754_logf+0x1d0>
 8006220:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006224:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80062d8 <__ieee754_logf+0x1d4>
 8006228:	eee7 5a87 	vfma.f32	s11, s15, s14
 800622c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80062dc <__ieee754_logf+0x1d8>
 8006230:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006234:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80062e0 <__ieee754_logf+0x1dc>
 8006238:	eee7 4a87 	vfma.f32	s9, s15, s14
 800623c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80062e4 <__ieee754_logf+0x1e0>
 8006240:	eee4 7a87 	vfma.f32	s15, s9, s14
 8006244:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006248:	eee5 7a87 	vfma.f32	s15, s11, s14
 800624c:	dd1a      	ble.n	8006284 <__ieee754_logf+0x180>
 800624e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006252:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006256:	ee27 7a00 	vmul.f32	s14, s14, s0
 800625a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800625e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006262:	b913      	cbnz	r3, 800626a <__ieee754_logf+0x166>
 8006264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006268:	e7ac      	b.n	80061c4 <__ieee754_logf+0xc0>
 800626a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80062bc <__ieee754_logf+0x1b8>
 800626e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8006272:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006276:	ee37 0a40 	vsub.f32	s0, s14, s0
 800627a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80062c0 <__ieee754_logf+0x1bc>
 800627e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8006282:	4770      	bx	lr
 8006284:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006288:	ee67 7a86 	vmul.f32	s15, s15, s12
 800628c:	b913      	cbnz	r3, 8006294 <__ieee754_logf+0x190>
 800628e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006292:	4770      	bx	lr
 8006294:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80062bc <__ieee754_logf+0x1b8>
 8006298:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800629c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80062a0:	e7eb      	b.n	800627a <__ieee754_logf+0x176>
 80062a2:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80062ac <__ieee754_logf+0x1a8>
 80062a6:	4770      	bx	lr
 80062a8:	cc000000 	.word	0xcc000000
 80062ac:	00000000 	.word	0x00000000
 80062b0:	4c000000 	.word	0x4c000000
 80062b4:	004afb20 	.word	0x004afb20
 80062b8:	007ffff0 	.word	0x007ffff0
 80062bc:	3717f7d1 	.word	0x3717f7d1
 80062c0:	3f317180 	.word	0x3f317180
 80062c4:	3eaaaaab 	.word	0x3eaaaaab
 80062c8:	3e1cd04f 	.word	0x3e1cd04f
 80062cc:	3e178897 	.word	0x3e178897
 80062d0:	ffcf5c30 	.word	0xffcf5c30
 80062d4:	3e638e29 	.word	0x3e638e29
 80062d8:	3ecccccd 	.word	0x3ecccccd
 80062dc:	3e3a3325 	.word	0x3e3a3325
 80062e0:	3e924925 	.word	0x3e924925
 80062e4:	3f2aaaab 	.word	0x3f2aaaab

080062e8 <_init>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr

080062f4 <_fini>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr
