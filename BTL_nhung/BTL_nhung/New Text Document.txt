#include "ssd1306.h"


static const uint8_t font5x8[][5] = {
// Ký tự: space đến ~
		{ 0x00, 0x00, 0x00, 0x00, 0x00 }, // (space)
		{ 0x00, 0x00, 0x5F, 0x00, 0x00 }, // !
		{ 0x00, 0x07, 0x00, 0x07, 0x00 }, // "
		{ 0x14, 0x7F, 0x14, 0x7F, 0x14 }, // #
		{ 0x24, 0x2A, 0x7F, 0x2A, 0x12 }, // $
		{ 0x23, 0x13, 0x08, 0x64, 0x62 }, // %
		{ 0x36, 0x49, 0x55, 0x22, 0x50 }, // &
		{ 0x00, 0x05, 0x03, 0x00, 0x00 }, // '
		{ 0x00, 0x1C, 0x22, 0x41, 0x00 }, // (
		{ 0x00, 0x41, 0x22, 0x1C, 0x00 }, // )
		{ 0x14, 0x08, 0x3E, 0x08, 0x14 }, // *
		{ 0x08, 0x08, 0x3E, 0x08, 0x08 }, // +
		{ 0x00, 0x50, 0x30, 0x00, 0x00 }, // ,
		{ 0x08, 0x08, 0x08, 0x08, 0x08 }, // -
		{ 0x00, 0x60, 0x60, 0x00, 0x00 }, // .
		{ 0x20, 0x10, 0x08, 0x04, 0x02 }, // /

		{ 0x3E, 0x51, 0x49, 0x45, 0x3E }, // 0
		{ 0x00, 0x42, 0x7F, 0x40, 0x00 }, // 1
		{ 0x42, 0x61, 0x51, 0x49, 0x46 }, // 2
		{ 0x21, 0x41, 0x45, 0x4B, 0x31 }, // 3
		{ 0x18, 0x14, 0x12, 0x7F, 0x10 }, // 4
		{ 0x27, 0x45, 0x45, 0x45, 0x39 }, // 5
		{ 0x3C, 0x4A, 0x49, 0x49, 0x30 }, // 6
		{ 0x01, 0x71, 0x09, 0x05, 0x03 }, // 7
		{ 0x36, 0x49, 0x49, 0x49, 0x36 }, // 8
		{ 0x06, 0x49, 0x49, 0x29, 0x1E }, // 9

		{ 0x00, 0x36, 0x36, 0x00, 0x00 }, // :
		{ 0x00, 0x56, 0x36, 0x00, 0x00 }, // ;
		{ 0x08, 0x14, 0x22, 0x41, 0x00 }, // <
		{ 0x14, 0x14, 0x14, 0x14, 0x14 }, // =
		{ 0x00, 0x41, 0x22, 0x14, 0x08 }, // >
		{ 0x02, 0x01, 0x51, 0x09, 0x06 }, // ?

		{ 0x32, 0x49, 0x79, 0x41, 0x3E }, // @
		{ 0x7E, 0x11, 0x11, 0x11, 0x7E }, // A
		{ 0x7F, 0x49, 0x49, 0x49, 0x36 }, // B
		{ 0x3E, 0x41, 0x41, 0x41, 0x22 }, // C
		{ 0x7F, 0x41, 0x41, 0x22, 0x1C }, // D
		{ 0x7F, 0x49, 0x49, 0x49, 0x41 }, // E
		{ 0x7F, 0x09, 0x09, 0x09, 0x01 }, // F
		{ 0x3E, 0x41, 0x49, 0x49, 0x7A }, // G
		{ 0x7F, 0x08, 0x08, 0x08, 0x7F }, // H
		{ 0x00, 0x41, 0x7F, 0x41, 0x00 }, // I
		{ 0x20, 0x40, 0x41, 0x3F, 0x01 }, // J
		{ 0x7F, 0x08, 0x14, 0x22, 0x41 }, // K
		{ 0x7F, 0x40, 0x40, 0x40, 0x40 }, // L
		{ 0x7F, 0x02, 0x0C, 0x02, 0x7F }, // M
		{ 0x7F, 0x04, 0x08, 0x10, 0x7F }, // N
		{ 0x3E, 0x41, 0x41, 0x41, 0x3E }, // O
		{ 0x7F, 0x09, 0x09, 0x09, 0x06 }, // P
		{ 0x3E, 0x41, 0x51, 0x21, 0x5E }, // Q
		{ 0x7F, 0x09, 0x19, 0x29, 0x46 }, // R
		{ 0x46, 0x49, 0x49, 0x49, 0x31 }, // S
		{ 0x01, 0x01, 0x7F, 0x01, 0x01 }, // T
		{ 0x3F, 0x40, 0x40, 0x40, 0x3F }, // U
		{ 0x1F, 0x20, 0x40, 0x20, 0x1F }, // V
		{ 0x3F, 0x40, 0x38, 0x40, 0x3F }, // W
		{ 0x63, 0x14, 0x08, 0x14, 0x63 }, // X
		{ 0x07, 0x08, 0x70, 0x08, 0x07 }, // Y
		{ 0x61, 0x51, 0x49, 0x45, 0x43 }, // Z

		{ 0x00, 0x7F, 0x41, 0x41, 0x00 }, // [
		{ 0x02, 0x04, 0x08, 0x10, 0x20 }, // backslash
		{ 0x00, 0x41, 0x41, 0x7F, 0x00 }, // ]
		{ 0x04, 0x02, 0x01, 0x02, 0x04 }, // ^
		{ 0x40, 0x40, 0x40, 0x40, 0x40 }, // _
		{ 0x00, 0x03, 0x07, 0x00, 0x00 }, // `

		{ 0x20, 0x54, 0x54, 0x54, 0x78 }, // a
		{ 0x7F, 0x48, 0x44, 0x44, 0x38 }, // b
		{ 0x38, 0x44, 0x44, 0x44, 0x20 }, // c
		{ 0x38, 0x44, 0x44, 0x48, 0x7F }, // d
		{ 0x38, 0x54, 0x54, 0x54, 0x18 }, // e
		{ 0x08, 0x7E, 0x09, 0x01, 0x02 }, // f
		{ 0x0C, 0x52, 0x52, 0x52, 0x3E }, // g
		{ 0x7F, 0x08, 0x04, 0x04, 0x78 }, // h
		{ 0x00, 0x44, 0x7D, 0x40, 0x00 }, // i
		{ 0x20, 0x40, 0x44, 0x3D, 0x00 }, // j
		{ 0x7F, 0x10, 0x28, 0x44, 0x00 }, // k
		{ 0x00, 0x41, 0x7F, 0x40, 0x00 }, // l
		{ 0x7C, 0x04, 0x18, 0x04, 0x78 }, // m
		{ 0x7C, 0x08, 0x04, 0x04, 0x78 }, // n
		{ 0x38, 0x44, 0x44, 0x44, 0x38 }, // o
		{ 0x7C, 0x14, 0x14, 0x14, 0x08 }, // p
		{ 0x08, 0x14, 0x14, 0x18, 0x7C }, // q
		{ 0x7C, 0x08, 0x04, 0x04, 0x08 }, // r
		{ 0x48, 0x54, 0x54, 0x54, 0x20 }, // s
		{ 0x04, 0x3F, 0x44, 0x40, 0x20 }, // t
		{ 0x3C, 0x40, 0x40, 0x20, 0x7C }, // u
		{ 0x1C, 0x20, 0x40, 0x20, 0x1C }, // v
		{ 0x3C, 0x40, 0x30, 0x40, 0x3C }, // w
		{ 0x44, 0x28, 0x10, 0x28, 0x44 }, // x
		{ 0x0C, 0x50, 0x50, 0x50, 0x3C }, // y
		{ 0x44, 0x64, 0x54, 0x4C, 0x44 }, // z

		{ 0x00, 0x08, 0x36, 0x41, 0x00 }, // {
		{ 0x00, 0x00, 0x7F, 0x00, 0x00 }, // |
		{ 0x00, 0x41, 0x36, 0x08, 0x00 }, // }
		{ 0x08, 0x08, 0x2A, 0x1C, 0x08 }, // ~
		};

#include "stm32f4xx.h"
/***************************************************************************
 * SSD1306 – STM32F4 low-level driver (I²C 100 kHz, 7-bit addr 0x3C)
 * PB6 → SCL  |  PB7 → SDA   (AF4 – I2C1)
 ***************************************************************************/
#include "stm32f4xx.h"
#include <stdbool.h>
#include <string.h>

/* ---------- Cấu hình chung ---------- */
#define SSD1306_I2C          I2C1
#define SSD1306_I2C_ADDR     0x3C        /* 7-bit */
#define SSD1306_WIDTH        128
#define SSD1306_PAGES        8
#define I2C_TIMEOUT_US       2000

/* Font 5×8 extern (khai báo ở file khác) */
extern const uint8_t font5x8[][5];


/* ---------- 1. Khởi tạo I²C & GPIO ---------- */
void OLED_I2C_Init(void)
{
    /* 1. Bật clock GPIOB & I2C1 */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;

    /* 2. GPIOB6/B7 – AF4 OD 50 MHz, no-pull */
    GPIOB->MODER   &= ~((3U<<(6*2)) | (3U<<(7*2)));
    GPIOB->MODER   |=  (2U<<(6*2)) | (2U<<(7*2));
    GPIOB->OTYPER  |=  (1U<<6) | (1U<<7);
    GPIOB->OSPEEDR |=  (3U<<(6*2)) | (3U<<(7*2));
    GPIOB->PUPDR   &= ~((3U<<(6*2)) | (3U<<(7*2)));
    GPIOB->AFR[0]  |=  (4U<<(6*4)) | (4U<<(7*4));

    /* 3. Reset I2C1 */
    SSD1306_I2C->CR1 |=  I2C_CR1_SWRST;
    SSD1306_I2C->CR1 &= ~I2C_CR1_SWRST;

    /* 4. Cấu hình clock I²C (chuẩn-mode 100 kHz) */
    uint32_t pclk   = SystemCoreClock / 4;           /* APB1 mặc định /4 = 42 MHz @168 MHz */
    SSD1306_I2C->CR2   = (pclk / 1000000U);        /* MHz */
    SSD1306_I2C->CCR   = (pclk / (2*100000U));      /* =210 */
    SSD1306_I2C->TRISE = (pclk / 1000000U) + 1;    /* =43 */

    /* 5. Enable I²C */
    SSD1306_I2C->CR1 |= I2C_CR1_PE;
}

/* ---------- 2. Hàm ghi I²C cơ bản, có timeout ---------- */
static bool I2C_Write(uint8_t addr, const uint8_t *buf, uint16_t len)
{
    uint32_t t0;

    /* START */
    SSD1306_I2C->CR1 |= I2C_CR1_START;
    t0 = DWT->CYCCNT;
    while (!(SSD1306_I2C->SR1 & I2C_SR1_SB))
        if ((DWT->CYCCNT - t0) > I2C_TIMEOUT_US*SystemCoreClock/1000000) return false;

    (void)SSD1306_I2C->SR1;          /* Clear SB */
    SSD1306_I2C->DR = addr << 1;     /* Write */

    /* ADDR */
    t0 = DWT->CYCCNT;
    while (!(SSD1306_I2C->SR1 & I2C_SR1_ADDR))
        if ((DWT->CYCCNT - t0) > I2C_TIMEOUT_US*SystemCoreClock/1000000) return false;
    (void)SSD1306_I2C->SR1; (void)SSD1306_I2C->SR2;

    /* Data */
    for (uint16_t i = 0; i < len; i++)
    {
        t0 = DWT->CYCCNT;
        while (!(SSD1306_I2C->SR1 & I2C_SR1_TXE))
            if ((DWT->CYCCNT - t0) > I2C_TIMEOUT_US*SystemCoreClock/1000000) return false;
        SSD1306_I2C->DR = buf[i];
    }

    /* BTF (byte xong) */
    t0 = DWT->CYCCNT;
    while (!(SSD1306_I2C->SR1 & I2C_SR1_BTF))
        if ((DWT->CYCCNT - t0) > I2C_TIMEOUT_US*SystemCoreClock/1000000) return false;

    /* STOP */
    SSD1306_I2C->CR1 |= I2C_CR1_STOP;
    return true;
}

/* ---------- 3. Gửi lệnh / dữ liệu ---------- */
static bool SSD1306_WriteCmd(uint8_t cmd)
{
    uint8_t pkt[2] = {0x00, cmd};
    return I2C_Write(SSD1306_I2C_ADDR, pkt, 2);
}

static bool SSD1306_WriteData(const uint8_t *src, uint16_t n)
{
    static uint8_t pkt[129];                       /* 1 + 128 bytes */
    if (n > 128) n = 128;
    pkt[0] = 0x40;
    memcpy(&pkt[1], src, n);
    return I2C_Write(SSD1306_I2C_ADDR, pkt, n+1);
}

/* ---------- 4. Khởi tạo SSD1306 ---------- */
void SSD1306_Init(void)
{
    OLED_I2C_Init();


    /* Chuẩn “truyền thống” – tắt scroll trước khi bật */
    const uint8_t init_seq[] = {
        0xAE,               /* Display OFF          */
        0xD5,0x80,          /* clock div            */
        0xA8,0x3F,          /* multiplex            */
        0xD3,0x00,          /* offset               */
        0x40,               /* line 0               */
        0x8D,0x14,          /* charge-pump ON       */
        0x20,0x00,          /* horiz addr mode      */
        0xA1,               /* seg remap            */
        0xC8,               /* COM scan dir remap   */
        0xDA,0x12,          /* COM pins             */
        0x81,0x7F,          /* contrast             */
        0xD9,0xF1,          /* pre-charge           */
        0xDB,0x40,          /* VCOMH                */
        0xA4,               /* resume RAM content   */
        0xA6,               /* normal display       */
        0x2E,               /* deactivate scroll    */
        0xAF                /* Display ON           */
    };

    for (uint8_t i = 0; i < sizeof(init_seq); i++)
    {
        SSD1306_WriteCmd(init_seq[i]);
    }


}

/* ---------- 5. Hàm trợ giúp ---------- */
static inline void SSD1306_SetCursor(uint8_t x, uint8_t page)
{
    SSD1306_WriteCmd(0xB0 | (page & 0x07));
    SSD1306_WriteCmd(0x00 | (x & 0x0F));
    SSD1306_WriteCmd(0x10 | (x >> 4));
}

void SSD1306_Clear(void)
{
    static const uint8_t zero[SSD1306_WIDTH] = {0};
    for (uint8_t p = 0; p < SSD1306_PAGES; ++p)
    {
        SSD1306_SetCursor(0, p);
        SSD1306_WriteData(zero, SSD1306_WIDTH);
    }
}

void SSD1306_DrawChar(uint8_t x, uint8_t page, char c)
{
    if (c < 32 || c > 126 || x > (SSD1306_WIDTH-6) || page >= SSD1306_PAGES) return;
    SSD1306_SetCursor(x, page);
    SSD1306_WriteData(font5x8[(uint8_t)c - 32], 5);
    uint8_t space = 0;                              /* cột trắng cuối ký tự */
    SSD1306_WriteData(&space, 1);
}

void SSD1306_DrawString(uint8_t x, uint8_t page, const char *s)
{
    while (*s && x <= (SSD1306_WIDTH-6))
    {
        SSD1306_DrawChar(x, page, *s++);
        x += 6;
    }
}




#ifndef __SSD1306_H__
#define __SSD1306_H__

#include "main.h"

#define SSD1306_I2C_ADDR 0x3C

void OLED_I2C_Init(void);
void SSD1306_Init(void);
//static bool I2C_Write(uint8_t addr, const uint8_t *buf, uint16_t len);
//static bool SSD1306_WriteCmd(uint8_t cmd);
//static bool SSD1306_WriteData(const uint8_t *src, uint16_t n);
//static inline void SSD1306_SetCursor(uint8_t x, uint8_t page);
void SSD1306_Clear(void);
void SSD1306_DrawChar(uint8_t x, uint8_t page, char c);
void SSD1306_DrawString(uint8_t x, uint8_t page, const char *s);

#endif